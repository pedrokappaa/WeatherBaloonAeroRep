
Balloon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b3c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08008d34  08008d34  00018d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800920c  0800920c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800920c  0800920c  0001920c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009214  08009214  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800921c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002814  20000024  08009240  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002838  08009240  00022838  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013698  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003069  00000000  00000000  000336ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00036758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00037680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab6a  00000000  00000000  00038440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d80  00000000  00000000  00062faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faa0e  00000000  00000000  0007ad2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00175738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c44  00000000  00000000  00175788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000024 	.word	0x20000024
 8000214:	00000000 	.word	0x00000000
 8000218:	08008d1c 	.word	0x08008d1c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000028 	.word	0x20000028
 8000234:	08008d1c 	.word	0x08008d1c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000552:	463b      	mov	r3, r7
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800055e:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <MX_ADC3_Init+0x9c>)
 8000562:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800056a:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <MX_ADC3_Init+0x98>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <MX_ADC3_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000586:	2200      	movs	r2, #0
 8000588:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_ADC3_Init+0x98>)
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <MX_ADC3_Init+0xa0>)
 800058e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000598:	2201      	movs	r2, #1
 800059a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_ADC3_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_ADC3_Init+0x98>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <MX_ADC3_Init+0x98>)
 80005ac:	f000 fdd6 	bl	800115c <HAL_ADC_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80005b6:	f000 fa37 	bl	8000a28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2301      	movs	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4619      	mov	r1, r3
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <MX_ADC3_Init+0x98>)
 80005cc:	f000 fe0a 	bl	80011e4 <HAL_ADC_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80005d6:	f000 fa27 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000040 	.word	0x20000040
 80005e8:	40012200 	.word	0x40012200
 80005ec:	0f000001 	.word	0x0f000001

080005f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a15      	ldr	r2, [pc, #84]	; (8000664 <HAL_ADC_MspInit+0x74>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d123      	bne.n	800065a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_ADC_MspInit+0x78>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <HAL_ADC_MspInit+0x78>)
 8000618:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800061c:	6453      	str	r3, [r2, #68]	; 0x44
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_ADC_MspInit+0x78>)
 8000620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_ADC_MspInit+0x78>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_ADC_MspInit+0x78>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_ADC_MspInit+0x78>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000642:	2301      	movs	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000646:	2303      	movs	r3, #3
 8000648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <HAL_ADC_MspInit+0x7c>)
 8000656:	f001 f9b9 	bl	80019cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	; 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40012200 	.word	0x40012200
 8000668:	40023800 	.word	0x40023800
 800066c:	40020000 	.word	0x40020000

08000670 <SDCardInit>:
DWORD fre_clust;
uint32_t totalSpace, freeSpace;


bool SDCardInit()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	// Mount SD Card
	if(f_mount(&fs, "", 0) != FR_OK)
 8000674:	2200      	movs	r2, #0
 8000676:	490c      	ldr	r1, [pc, #48]	; (80006a8 <SDCardInit+0x38>)
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <SDCardInit+0x3c>)
 800067a:	f007 fd03 	bl	8008084 <f_mount>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SDCardInit+0x18>
		return false;
 8000684:	2300      	movs	r3, #0
 8000686:	e00d      	b.n	80006a4 <SDCardInit+0x34>

	HAL_Delay(10);
 8000688:	200a      	movs	r0, #10
 800068a:	f000 fd43 	bl	8001114 <HAL_Delay>

	// Open file to write
	if(f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 800068e:	2213      	movs	r2, #19
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <SDCardInit+0x40>)
 8000692:	4808      	ldr	r0, [pc, #32]	; (80006b4 <SDCardInit+0x44>)
 8000694:	f007 fd3c 	bl	8008110 <f_open>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SDCardInit+0x32>
		return false;
 800069e:	2300      	movs	r3, #0
 80006a0:	e000      	b.n	80006a4 <SDCardInit+0x34>

	return true;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	08008d34 	.word	0x08008d34
 80006ac:	20000088 	.word	0x20000088
 80006b0:	08008d38 	.word	0x08008d38
 80006b4:	200010c0 	.word	0x200010c0

080006b8 <SDCardWrite>:

bool SDCardWrite(const char* msg)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	f_puts(msg, &fil);
 80006c0:	4904      	ldr	r1, [pc, #16]	; (80006d4 <SDCardWrite+0x1c>)
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f008 f9a3 	bl	8008a0e <f_puts>
	return true;
 80006c8:	2301      	movs	r3, #1
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200010c0 	.word	0x200010c0

080006d8 <SDCardEnd>:
	else
		return false;
}

bool SDCardEnd()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	// Close file
	if(f_close(&fil) != FR_OK)
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <SDCardEnd+0x34>)
 80006de:	f008 f8f5 	bl	80088cc <f_close>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SDCardEnd+0x14>
		return false;
 80006e8:	2300      	movs	r3, #0
 80006ea:	e00d      	b.n	8000708 <SDCardEnd+0x30>

	HAL_Delay(10);
 80006ec:	200a      	movs	r0, #10
 80006ee:	f000 fd11 	bl	8001114 <HAL_Delay>

	// Unmount SDCARD
	if(f_mount(NULL, "", 1) != FR_OK)
 80006f2:	2201      	movs	r2, #1
 80006f4:	4906      	ldr	r1, [pc, #24]	; (8000710 <SDCardEnd+0x38>)
 80006f6:	2000      	movs	r0, #0
 80006f8:	f007 fcc4 	bl	8008084 <f_mount>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SDCardEnd+0x2e>
		return false;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <SDCardEnd+0x30>

	return true;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200010c0 	.word	0x200010c0
 8000710:	08008d34 	.word	0x08008d34

08000714 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b40      	ldr	r3, [pc, #256]	; (800082c <MX_GPIO_Init+0x118>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a3f      	ldr	r2, [pc, #252]	; (800082c <MX_GPIO_Init+0x118>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b3d      	ldr	r3, [pc, #244]	; (800082c <MX_GPIO_Init+0x118>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b3a      	ldr	r3, [pc, #232]	; (800082c <MX_GPIO_Init+0x118>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a39      	ldr	r2, [pc, #228]	; (800082c <MX_GPIO_Init+0x118>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <MX_GPIO_Init+0x118>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <MX_GPIO_Init+0x118>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a33      	ldr	r2, [pc, #204]	; (800082c <MX_GPIO_Init+0x118>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b31      	ldr	r3, [pc, #196]	; (800082c <MX_GPIO_Init+0x118>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <MX_GPIO_Init+0x118>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a2d      	ldr	r2, [pc, #180]	; (800082c <MX_GPIO_Init+0x118>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <MX_GPIO_Init+0x118>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_GPIO_Init+0x118>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a27      	ldr	r2, [pc, #156]	; (800082c <MX_GPIO_Init+0x118>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <MX_GPIO_Init+0x118>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007a8:	4821      	ldr	r0, [pc, #132]	; (8000830 <MX_GPIO_Init+0x11c>)
 80007aa:	f001 fabb 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b4:	481f      	ldr	r0, [pc, #124]	; (8000834 <MX_GPIO_Init+0x120>)
 80007b6:	f001 fab5 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4819      	ldr	r0, [pc, #100]	; (8000838 <MX_GPIO_Init+0x124>)
 80007d2:	f001 f8fb 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007d6:	f244 0381 	movw	r3, #16513	; 0x4081
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <MX_GPIO_Init+0x11c>)
 80007f0:	f001 f8ec 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80007f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <MX_GPIO_Init+0x120>)
 800080e:	f001 f8dd 	bl	80019cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2028      	movs	r0, #40	; 0x28
 8000818:	f001 f80f 	bl	800183a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800081c:	2028      	movs	r0, #40	; 0x28
 800081e:	f001 f828 	bl	8001872 <HAL_NVIC_EnableIRQ>

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	; 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40020400 	.word	0x40020400
 8000834:	40020c00 	.word	0x40020c00
 8000838:	40020800 	.word	0x40020800

0800083c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */
float volts = 0;
int butPressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084c:	d102      	bne.n	8000854 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		send_UART("{to:'Log',from:'Mst',reci:'headerValsCsv',dir:'g',rc:''}\r");
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		*/

		butPressed = 1;
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <HAL_GPIO_EXTI_Callback+0x24>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
	}
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	200020f0 	.word	0x200020f0

08000864 <isButPressed>:

int isButPressed()
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
	return butPressed;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <isButPressed+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	200020f0 	.word	0x200020f0

0800087c <butClear>:

void butClear()
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	butPressed = 0;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <butClear+0x14>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	200020f0 	.word	0x200020f0

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800089a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800089c:	f000 fbdd 	bl	800105a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008a0:	f000 f858 	bl	8000954 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008a4:	f7ff ff36 	bl	8000714 <MX_GPIO_Init>
	MX_ADC3_Init();
 80008a8:	f7ff fe50 	bl	800054c <MX_ADC3_Init>
	MX_SPI1_Init();
 80008ac:	f000 f8c2 	bl	8000a34 <MX_SPI1_Init>
	MX_FATFS_Init();
 80008b0:	f004 fcd0 	bl	8005254 <MX_FATFS_Init>
	MX_USART3_UART_Init();
 80008b4:	f000 f9ea 	bl	8000c8c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	reset_UART();
 80008b8:	f000 fab0 	bl	8000e1c <reset_UART>
	send_UART(PROMPT);
 80008bc:	4820      	ldr	r0, [pc, #128]	; (8000940 <main+0xac>)
 80008be:	f000 fac5 	bl	8000e4c <send_UART>

	if(SDCardInit())
 80008c2:	f7ff fed5 	bl	8000670 <SDCardInit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <main+0x3e>
		send_UART("true");
 80008cc:	481d      	ldr	r0, [pc, #116]	; (8000944 <main+0xb0>)
 80008ce:	f000 fabd 	bl	8000e4c <send_UART>

	SDCardWrite("Hello\n");
 80008d2:	481d      	ldr	r0, [pc, #116]	; (8000948 <main+0xb4>)
 80008d4:	f7ff fef0 	bl	80006b8 <SDCardWrite>

	if(SDCardEnd())
 80008d8:	f7ff fefe 	bl	80006d8 <SDCardEnd>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <main+0x54>
		send_UART("true");
 80008e2:	4818      	ldr	r0, [pc, #96]	; (8000944 <main+0xb0>)
 80008e4:	f000 fab2 	bl	8000e4c <send_UART>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		if(has_message_from_UART())
 80008e8:	f000 fa80 	bl	8000dec <has_message_from_UART>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d016      	beq.n	8000920 <main+0x8c>
		{
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 80008f2:	463b      	mov	r3, r7
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fad3 	bl	8000ea0 <read_UART>

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008fa:	2101      	movs	r1, #1
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <main+0xb8>)
 80008fe:	f001 fa2a 	bl	8001d56 <HAL_GPIO_TogglePin>

		  send_UART((char*) message);
 8000902:	463b      	mov	r3, r7
 8000904:	4618      	mov	r0, r3
 8000906:	f000 faa1 	bl	8000e4c <send_UART>

		  while(is_transmitting_to_UART());
 800090a:	bf00      	nop
 800090c:	f000 fa7a 	bl	8000e04 <is_transmitting_to_UART>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1fa      	bne.n	800090c <main+0x78>

		  reset_UART();
 8000916:	f000 fa81 	bl	8000e1c <reset_UART>
		  send_UART(PROMPT);
 800091a:	4809      	ldr	r0, [pc, #36]	; (8000940 <main+0xac>)
 800091c:	f000 fa96 	bl	8000e4c <send_UART>
		}

		if(isButPressed())
 8000920:	f7ff ffa0 	bl	8000864 <isButPressed>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0de      	beq.n	80008e8 <main+0x54>
		{
			butClear();
 800092a:	f7ff ffa7 	bl	800087c <butClear>
			send_UART("Button pressed");
 800092e:	4808      	ldr	r0, [pc, #32]	; (8000950 <main+0xbc>)
 8000930:	f000 fa8c 	bl	8000e4c <send_UART>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <main+0xb8>)
 8000938:	f001 fa0d 	bl	8001d56 <HAL_GPIO_TogglePin>
		if(has_message_from_UART())
 800093c:	e7d4      	b.n	80008e8 <main+0x54>
 800093e:	bf00      	nop
 8000940:	08008d44 	.word	0x08008d44
 8000944:	08008d48 	.word	0x08008d48
 8000948:	08008d50 	.word	0x08008d50
 800094c:	40020400 	.word	0x40020400
 8000950:	08008d58 	.word	0x08008d58

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b094      	sub	sp, #80	; 0x50
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2234      	movs	r2, #52	; 0x34
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f008 f9be 	bl	8008ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <SystemClock_Config+0xcc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a28      	ldr	r2, [pc, #160]	; (8000a20 <SystemClock_Config+0xcc>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <SystemClock_Config+0xcc>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <SystemClock_Config+0xd0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000998:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <SystemClock_Config+0xd0>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <SystemClock_Config+0xd0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b4:	2310      	movs	r3, #16
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c0:	2308      	movs	r3, #8
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009c4:	2360      	movs	r3, #96	; 0x60
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009cc:	2307      	movs	r3, #7
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 f9ef 	bl	8001dbc <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e4:	f000 f820 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2302      	movs	r3, #2
 80009ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2101      	movs	r1, #1
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fc86 	bl	8002318 <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a12:	f000 f809 	bl	8000a28 <Error_Handler>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3750      	adds	r7, #80	; 0x50
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_SPI1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a82:	2207      	movs	r2, #7
 8000a84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a94:	f002 fa8c 	bl	8002fb0 <HAL_SPI_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f7ff ffc3 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200020f4 	.word	0x200020f4
 8000aac:	40013000 	.word	0x40013000

08000ab0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_SPI_MspInit+0x7c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d127      	bne.n	8000b22 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_SPI_MspInit+0x80>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <HAL_SPI_MspInit+0x80>)
 8000ad8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_SPI_MspInit+0x80>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_SPI_MspInit+0x80>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_SPI_MspInit+0x80>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_SPI_MspInit+0x80>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b02:	23e0      	movs	r3, #224	; 0xe0
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b12:	2305      	movs	r3, #5
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000b1e:	f000 ff55 	bl	80019cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40013000 	.word	0x40013000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_MspInit+0x44>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_MspInit+0x44>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_MspInit+0x44>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_MspInit+0x44>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x44>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x44>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <SDTimer_Handler>:

volatile uint8_t FatFSCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <SDTimer_Handler+0x40>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d006      	beq.n	8000b9c <SDTimer_Handler+0x1c>
		Timer1--;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <SDTimer_Handler+0x40>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	3b01      	subs	r3, #1
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <SDTimer_Handler+0x40>)
 8000b9a:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <SDTimer_Handler+0x44>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <SDTimer_Handler+0x34>
		Timer2--;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <SDTimer_Handler+0x44>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <SDTimer_Handler+0x44>)
 8000bb2:	801a      	strh	r2, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000215a 	.word	0x2000215a
 8000bc4:	2000215c 	.word	0x2000215c

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFSCnt++;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <SysTick_Handler+0x30>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <SysTick_Handler+0x30>)
 8000c20:	701a      	strb	r2, [r3, #0]
	if(FatFSCnt >= 10)
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <SysTick_Handler+0x30>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b09      	cmp	r3, #9
 8000c2a:	d904      	bls.n	8000c36 <SysTick_Handler+0x26>
	{
		FatFSCnt = 0;
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Handler+0x30>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8000c32:	f7ff ffa5 	bl	8000b80 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c36:	f000 fa4d 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20002158 	.word	0x20002158

08000c44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <USART3_IRQHandler+0x10>)
 8000c4a:	f003 f855 	bl	8003cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000256c 	.word	0x2000256c

08000c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000c5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c60:	f001 f894 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_USART3_UART_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_USART3_UART_Init+0x78>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_USART3_UART_Init+0x7c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_USART3_UART_Init+0x80>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_USART3_UART_Init+0x84>)
 8000caa:	220d      	movs	r2, #13
 8000cac:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000cb0:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <MX_USART3_UART_Init+0x8c>)
 8000cb2:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000cb6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cba:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <MX_USART3_UART_Init+0x88>)
 8000cee:	f002 ff13 	bl	8003b18 <HAL_UART_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000cf8:	f7ff fe96 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20002568 	.word	0x20002568
 8000d04:	20002569 	.word	0x20002569
 8000d08:	20002360 	.word	0x20002360
 8000d0c:	20002564 	.word	0x20002564
 8000d10:	20002364 	.word	0x20002364
 8000d14:	2000256c 	.word	0x2000256c
 8000d18:	40004800 	.word	0x40004800

08000d1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0ae      	sub	sp, #184	; 0xb8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2290      	movs	r2, #144	; 0x90
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f007 ffd1 	bl	8008ce4 <memset>
  if(uartHandle->Instance==USART3)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <HAL_UART_MspInit+0xc4>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d144      	bne.n	8000dd6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 fd00 	bl	8002760 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d66:	f7ff fe5f 	bl	8000a28 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db4:	2307      	movs	r3, #7
 8000db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <HAL_UART_MspInit+0xcc>)
 8000dc2:	f000 fe03 	bl	80019cc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2027      	movs	r0, #39	; 0x27
 8000dcc:	f000 fd35 	bl	800183a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dd0:	2027      	movs	r0, #39	; 0x27
 8000dd2:	f000 fd4e 	bl	8001872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	37b8      	adds	r7, #184	; 0xb8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40004800 	.word	0x40004800
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020c00 	.word	0x40020c00

08000dec <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
	return flagCPP;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <has_message_from_UART+0x14>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20002568 	.word	0x20002568

08000e04 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	return flagCPE;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <is_transmitting_to_UART+0x14>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20002569 	.word	0x20002569

08000e1c <reset_UART>:

void reset_UART()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8000e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e24:	2100      	movs	r1, #0
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <reset_UART+0x24>)
 8000e28:	f007 ff5c 	bl	8008ce4 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4904      	ldr	r1, [pc, #16]	; (8000e40 <reset_UART+0x24>)
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <reset_UART+0x28>)
 8000e32:	f002 ff1d 	bl	8003c70 <HAL_UART_Receive_IT>
	flagCPP = false;
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <reset_UART+0x2c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20002160 	.word	0x20002160
 8000e44:	2000256c 	.word	0x2000256c
 8000e48:	20002568 	.word	0x20002568

08000e4c <send_UART>:

void send_UART(const char* msg_to_send)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8000e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	480d      	ldr	r0, [pc, #52]	; (8000e90 <send_UART+0x44>)
 8000e5c:	f007 ff4a 	bl	8008cf4 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <send_UART+0x44>)
 8000e62:	f7ff f9e9 	bl	8000238 <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <send_UART+0x44>)
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4909      	ldr	r1, [pc, #36]	; (8000e94 <send_UART+0x48>)
 8000e70:	461a      	mov	r2, r3
 8000e72:	460b      	mov	r3, r1
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <send_UART+0x4c>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4903      	ldr	r1, [pc, #12]	; (8000e90 <send_UART+0x44>)
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <send_UART+0x50>)
 8000e84:	f002 fe96 	bl	8003bb4 <HAL_UART_Transmit_IT>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20002364 	.word	0x20002364
 8000e94:	08008d68 	.word	0x08008d68
 8000e98:	20002569 	.word	0x20002569
 8000e9c:	2000256c 	.word	0x2000256c

08000ea0 <read_UART>:

void read_UART(char* msg_to_read)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8000ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eac:	4903      	ldr	r1, [pc, #12]	; (8000ebc <read_UART+0x1c>)
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f007 ff20 	bl	8008cf4 <strncpy>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20002160 	.word	0x20002160

08000ec0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <HAL_UART_RxCpltCallback+0xc4>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d154      	bne.n	8000f7a <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <HAL_UART_RxCpltCallback+0xcc>)
 8000ed6:	5cd3      	ldrb	r3, [r2, r3]
 8000ed8:	2b0d      	cmp	r3, #13
 8000eda:	d00b      	beq.n	8000ef4 <HAL_UART_RxCpltCallback+0x34>
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	; (8000f8c <HAL_UART_RxCpltCallback+0xcc>)
 8000ee2:	5cd3      	ldrb	r3, [r2, r3]
 8000ee4:	2b5c      	cmp	r3, #92	; 0x5c
 8000ee6:	d005      	beq.n	8000ef4 <HAL_UART_RxCpltCallback+0x34>
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a27      	ldr	r2, [pc, #156]	; (8000f8c <HAL_UART_RxCpltCallback+0xcc>)
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ef2:	d106      	bne.n	8000f02 <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_UART_RxCpltCallback+0xc4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e03c      	b.n	8000f7c <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <HAL_UART_RxCpltCallback+0xcc>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d10f      	bne.n	8000f2e <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	e01c      	b.n	8000f5c <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3b02      	subs	r3, #2
 8000f28:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e016      	b.n	8000f5c <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <HAL_UART_RxCpltCallback+0xcc>)
 8000f34:	5cd3      	ldrb	r3, [r2, r3]
 8000f36:	2b1b      	cmp	r3, #27
 8000f38:	d104      	bne.n	8000f44 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e00b      	b.n	8000f5c <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <HAL_UART_RxCpltCallback+0xcc>)
 8000f4a:	5cd3      	ldrb	r3, [r2, r3]
 8000f4c:	2b24      	cmp	r3, #36	; 0x24
 8000f4e:	d105      	bne.n	8000f5c <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_UART_RxCpltCallback+0xcc>)
 8000f58:	2224      	movs	r2, #36	; 0x24
 8000f5a:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_UART_RxCpltCallback+0xc8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_UART_RxCpltCallback+0xcc>)
 8000f6c:	4413      	add	r3, r2
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <HAL_UART_RxCpltCallback+0xd0>)
 8000f74:	f002 fe7c 	bl	8003c70 <HAL_UART_Receive_IT>
 8000f78:	e000      	b.n	8000f7c <HAL_UART_RxCpltCallback+0xbc>
		return;
 8000f7a:	bf00      	nop
	}
}
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20002568 	.word	0x20002568
 8000f88:	20002360 	.word	0x20002360
 8000f8c:	20002160 	.word	0x20002160
 8000f90:	2000256c 	.word	0x2000256c

08000f94 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_UART_TxCpltCallback+0x64>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d122      	bne.n	8000ff0 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_UART_TxCpltCallback+0x68>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a14      	ldr	r2, [pc, #80]	; (8001000 <HAL_UART_TxCpltCallback+0x6c>)
 8000fb0:	5cd3      	ldrb	r3, [r2, r3]
 8000fb2:	2b0d      	cmp	r3, #13
 8000fb4:	d10d      	bne.n	8000fd2 <HAL_UART_TxCpltCallback+0x3e>
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_UART_TxCpltCallback+0x68>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_UART_TxCpltCallback+0x6c>)
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	2b0a      	cmp	r3, #10
 8000fc2:	d006      	beq.n	8000fd2 <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_UART_TxCpltCallback+0x68>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_UART_TxCpltCallback+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e00f      	b.n	8000ff2 <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_UART_TxCpltCallback+0x68>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_UART_TxCpltCallback+0x68>)
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_UART_TxCpltCallback+0x68>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_UART_TxCpltCallback+0x6c>)
 8000fe2:	4413      	add	r3, r2
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <HAL_UART_TxCpltCallback+0x70>)
 8000fea:	f002 fde3 	bl	8003bb4 <HAL_UART_Transmit_IT>
 8000fee:	e000      	b.n	8000ff2 <HAL_UART_TxCpltCallback+0x5e>
		return;
 8000ff0:	bf00      	nop
}
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20002569 	.word	0x20002569
 8000ffc:	20002564 	.word	0x20002564
 8001000:	20002364 	.word	0x20002364
 8001004:	2000256c 	.word	0x2000256c

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100e:	490e      	ldr	r1, [pc, #56]	; (8001048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001024:	4c0b      	ldr	r4, [pc, #44]	; (8001054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001032:	f7ff fe19 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f007 fe31 	bl	8008c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fc2b 	bl	8000894 <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800104c:	0800921c 	.word	0x0800921c
  ldr r2, =_sbss
 8001050:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001054:	20002838 	.word	0x20002838

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>

0800105a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 fbe0 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f805 	bl	8001074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106a:	f7ff fd65 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x54>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x58>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fbfb 	bl	800188e <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 fbc3 	bl	800183a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_InitTick+0x5c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000004 	.word	0x20000004

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008
 80010f8:	200025f4 	.word	0x200025f4

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	200025f4 	.word	0x200025f4

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffee 	bl	80010fc <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffde 	bl	80010fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008

0800115c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e031      	b.n	80011d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff fa38 	bl	80005f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	2b00      	cmp	r3, #0
 8001198:	d116      	bne.n	80011c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_ADC_Init+0x84>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	f043 0202 	orr.w	r2, r3, #2
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f970 	bl	8001490 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f023 0303 	bic.w	r3, r3, #3
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
 80011c6:	e001      	b.n	80011cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	ffffeefd 	.word	0xffffeefd

080011e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x1c>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e136      	b.n	800146e <HAL_ADC_ConfigChannel+0x28a>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b09      	cmp	r3, #9
 800120e:	d93a      	bls.n	8001286 <HAL_ADC_ConfigChannel+0xa2>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001218:	d035      	beq.n	8001286 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68d9      	ldr	r1, [r3, #12]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	3b1e      	subs	r3, #30
 8001230:	2207      	movs	r2, #7
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	400a      	ands	r2, r1
 800123e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a8d      	ldr	r2, [pc, #564]	; (800147c <HAL_ADC_ConfigChannel+0x298>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d10a      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68d9      	ldr	r1, [r3, #12]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	061a      	lsls	r2, r3, #24
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800125e:	e035      	b.n	80012cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68d9      	ldr	r1, [r3, #12]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	4603      	mov	r3, r0
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4403      	add	r3, r0
 8001278:	3b1e      	subs	r3, #30
 800127a:	409a      	lsls	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001284:	e022      	b.n	80012cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6919      	ldr	r1, [r3, #16]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	2207      	movs	r2, #7
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43da      	mvns	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	400a      	ands	r2, r1
 80012a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6919      	ldr	r1, [r3, #16]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	4603      	mov	r3, r0
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4403      	add	r3, r0
 80012c2:	409a      	lsls	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b06      	cmp	r3, #6
 80012d2:	d824      	bhi.n	800131e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3b05      	subs	r3, #5
 80012e6:	221f      	movs	r2, #31
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43da      	mvns	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	400a      	ands	r2, r1
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	3b05      	subs	r3, #5
 8001310:	fa00 f203 	lsl.w	r2, r0, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
 800131c:	e04c      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d824      	bhi.n	8001370 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b23      	subs	r3, #35	; 0x23
 8001338:	221f      	movs	r2, #31
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b23      	subs	r3, #35	; 0x23
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
 800136e:	e023      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b41      	subs	r3, #65	; 0x41
 8001382:	221f      	movs	r2, #31
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43da      	mvns	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	400a      	ands	r2, r1
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	3b41      	subs	r3, #65	; 0x41
 80013ac:	fa00 f203 	lsl.w	r2, r0, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a30      	ldr	r2, [pc, #192]	; (8001480 <HAL_ADC_ConfigChannel+0x29c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10a      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1f4>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013ca:	d105      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_ADC_ConfigChannel+0x2a0>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <HAL_ADC_ConfigChannel+0x2a0>)
 80013d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80013d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a28      	ldr	r2, [pc, #160]	; (8001480 <HAL_ADC_ConfigChannel+0x29c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10f      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x21e>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d10b      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_ADC_ConfigChannel+0x2a0>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_ADC_ConfigChannel+0x2a0>)
 80013f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013f4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_ADC_ConfigChannel+0x2a0>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4a22      	ldr	r2, [pc, #136]	; (8001484 <HAL_ADC_ConfigChannel+0x2a0>)
 80013fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001400:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_ADC_ConfigChannel+0x29c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d12b      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x280>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_ADC_ConfigChannel+0x298>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_ADC_ConfigChannel+0x23a>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b11      	cmp	r3, #17
 800141c:	d122      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_ADC_ConfigChannel+0x2a0>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a18      	ldr	r2, [pc, #96]	; (8001484 <HAL_ADC_ConfigChannel+0x2a0>)
 8001424:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001428:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_ADC_ConfigChannel+0x2a0>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <HAL_ADC_ConfigChannel+0x2a0>)
 8001430:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001434:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_ADC_ConfigChannel+0x298>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d111      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_ADC_ConfigChannel+0x2a4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_ADC_ConfigChannel+0x2a8>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9a      	lsrs	r2, r3, #18
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001456:	e002      	b.n	800145e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3b01      	subs	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f9      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	10000012 	.word	0x10000012
 8001480:	40012000 	.word	0x40012000
 8001484:	40012300 	.word	0x40012300
 8001488:	20000000 	.word	0x20000000
 800148c:	431bde83 	.word	0x431bde83

08001490 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001498:	4b78      	ldr	r3, [pc, #480]	; (800167c <ADC_Init+0x1ec>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a77      	ldr	r2, [pc, #476]	; (800167c <ADC_Init+0x1ec>)
 800149e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80014a2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80014a4:	4b75      	ldr	r3, [pc, #468]	; (800167c <ADC_Init+0x1ec>)
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4973      	ldr	r1, [pc, #460]	; (800167c <ADC_Init+0x1ec>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	021a      	lsls	r2, r3, #8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6859      	ldr	r1, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6899      	ldr	r1, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	4a58      	ldr	r2, [pc, #352]	; (8001680 <ADC_Init+0x1f0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d022      	beq.n	800156a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001532:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6899      	ldr	r1, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6899      	ldr	r1, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	e00f      	b.n	800158a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001588:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0202 	bic.w	r2, r2, #2
 8001598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6899      	ldr	r1, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	005a      	lsls	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01b      	beq.n	80015f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6859      	ldr	r1, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	3b01      	subs	r3, #1
 80015e4:	035a      	lsls	r2, r3, #13
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	e007      	b.n	8001600 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	3b01      	subs	r3, #1
 800161c:	051a      	lsls	r2, r3, #20
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800165a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6899      	ldr	r1, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	029a      	lsls	r2, r3, #10
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	609a      	str	r2, [r3, #8]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40012300 	.word	0x40012300
 8001680:	0f000001 	.word	0x0f000001

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x40>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00
 80016c8:	05fa0000 	.word	0x05fa0000

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f0:	d301      	bcc.n	80017f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00f      	b.n	8001816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <SysTick_Config+0x40>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fe:	210f      	movs	r1, #15
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f7ff ff8e 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <SysTick_Config+0x40>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SysTick_Config+0x40>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010

08001824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff29 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184c:	f7ff ff3e 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f7ff ff8e 	bl	8001778 <NVIC_EncodePriority>
 800185c:	4602      	mov	r2, r0
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff5d 	bl	8001724 <__NVIC_SetPriority>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff31 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffa2 	bl	80017e0 <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff fc22 	bl	80010fc <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d008      	beq.n	80018d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e052      	b.n	800197e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0216 	bic.w	r2, r2, #22
 80018e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d103      	bne.n	8001908 <HAL_DMA_Abort+0x62>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0208 	bic.w	r2, r2, #8
 8001916:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001928:	e013      	b.n	8001952 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800192a:	f7ff fbe7 	bl	80010fc <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b05      	cmp	r3, #5
 8001936:	d90c      	bls.n	8001952 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2220      	movs	r2, #32
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2203      	movs	r2, #3
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e015      	b.n	800197e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e4      	bne.n	800192a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	223f      	movs	r2, #63	; 0x3f
 8001966:	409a      	lsls	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d004      	beq.n	80019a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e00c      	b.n	80019be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2205      	movs	r2, #5
 80019a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e175      	b.n	8001cd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f040 8164 	bne.w	8001cd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d005      	beq.n	8001a22 <HAL_GPIO_Init+0x56>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d130      	bne.n	8001a84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0201 	and.w	r2, r3, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d017      	beq.n	8001ac0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d123      	bne.n	8001b14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80be 	beq.w	8001cd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_GPIO_Init+0x324>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <HAL_GPIO_Init+0x324>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_GPIO_Init+0x324>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b6e:	4a61      	ldr	r2, [pc, #388]	; (8001cf4 <HAL_GPIO_Init+0x328>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_GPIO_Init+0x32c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d037      	beq.n	8001c0a <HAL_GPIO_Init+0x23e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a57      	ldr	r2, [pc, #348]	; (8001cfc <HAL_GPIO_Init+0x330>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d031      	beq.n	8001c06 <HAL_GPIO_Init+0x23a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a56      	ldr	r2, [pc, #344]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d02b      	beq.n	8001c02 <HAL_GPIO_Init+0x236>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a55      	ldr	r2, [pc, #340]	; (8001d04 <HAL_GPIO_Init+0x338>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d025      	beq.n	8001bfe <HAL_GPIO_Init+0x232>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_GPIO_Init+0x33c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01f      	beq.n	8001bfa <HAL_GPIO_Init+0x22e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a53      	ldr	r2, [pc, #332]	; (8001d0c <HAL_GPIO_Init+0x340>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d019      	beq.n	8001bf6 <HAL_GPIO_Init+0x22a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_GPIO_Init+0x344>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x226>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a51      	ldr	r2, [pc, #324]	; (8001d14 <HAL_GPIO_Init+0x348>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x222>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <HAL_GPIO_Init+0x34c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x21e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4f      	ldr	r2, [pc, #316]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x21a>
 8001be2:	2309      	movs	r3, #9
 8001be4:	e012      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001be6:	230a      	movs	r3, #10
 8001be8:	e010      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bea:	2308      	movs	r3, #8
 8001bec:	e00e      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bee:	2307      	movs	r3, #7
 8001bf0:	e00c      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	e00a      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	e008      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c1c:	4935      	ldr	r1, [pc, #212]	; (8001cf4 <HAL_GPIO_Init+0x328>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a34      	ldr	r2, [pc, #208]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a29      	ldr	r2, [pc, #164]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	f67f ae86 	bls.w	80019ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40020c00 	.word	0x40020c00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40021400 	.word	0x40021400
 8001d10:	40021800 	.word	0x40021800
 8001d14:	40021c00 	.word	0x40021c00
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	40022400 	.word	0x40022400
 8001d20:	40013c00 	.word	0x40013c00

08001d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
 8001d30:	4613      	mov	r3, r2
 8001d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d34:	787b      	ldrb	r3, [r7, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d40:	e003      	b.n	8001d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	619a      	str	r2, [r3, #24]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d68:	887a      	ldrh	r2, [r7, #2]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	041a      	lsls	r2, r3, #16
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	400b      	ands	r3, r1
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	619a      	str	r2, [r3, #24]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fd46 	bl	800083c <HAL_GPIO_EXTI_Callback>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e29b      	b.n	800230a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8087 	beq.w	8001eee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de0:	4b96      	ldr	r3, [pc, #600]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d00c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dec:	4b93      	ldr	r3, [pc, #588]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d112      	bne.n	8001e1e <HAL_RCC_OscConfig+0x62>
 8001df8:	4b90      	ldr	r3, [pc, #576]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e04:	d10b      	bne.n	8001e1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e06:	4b8d      	ldr	r3, [pc, #564]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d06c      	beq.n	8001eec <HAL_RCC_OscConfig+0x130>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d168      	bne.n	8001eec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e275      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x7a>
 8001e28:	4b84      	ldr	r3, [pc, #528]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a83      	ldr	r2, [pc, #524]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e02e      	b.n	8001e94 <HAL_RCC_OscConfig+0xd8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x9c>
 8001e3e:	4b7f      	ldr	r3, [pc, #508]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7e      	ldr	r2, [pc, #504]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b7c      	ldr	r3, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a7b      	ldr	r2, [pc, #492]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0xd8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0xc0>
 8001e62:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a75      	ldr	r2, [pc, #468]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a72      	ldr	r2, [pc, #456]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xd8>
 8001e7c:	4b6f      	ldr	r3, [pc, #444]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a6e      	ldr	r2, [pc, #440]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b6c      	ldr	r3, [pc, #432]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a6b      	ldr	r2, [pc, #428]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f92e 	bl	80010fc <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff f92a 	bl	80010fc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e229      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b61      	ldr	r3, [pc, #388]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe8>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f91a 	bl	80010fc <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f916 	bl	80010fc <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e215      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	4b57      	ldr	r3, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x110>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d069      	beq.n	8001fce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efa:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f06:	4b4d      	ldr	r3, [pc, #308]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d11c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x190>
 8001f12:	4b4a      	ldr	r3, [pc, #296]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d116      	bne.n	8001f4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_RCC_OscConfig+0x17a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1e9      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f36:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	493d      	ldr	r1, [pc, #244]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	e040      	b.n	8001fce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d023      	beq.n	8001f9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f54:	4b39      	ldr	r3, [pc, #228]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a38      	ldr	r2, [pc, #224]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f8cc 	bl	80010fc <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f68:	f7ff f8c8 	bl	80010fc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1c7      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f86:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4929      	ldr	r1, [pc, #164]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
 8001f9a:	e018      	b.n	8001fce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7ff f8a8 	bl	80010fc <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7ff f8a4 	bl	80010fc <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e1a3      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d038      	beq.n	800204c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d019      	beq.n	8002016 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe6:	4a15      	ldr	r2, [pc, #84]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fee:	f7ff f885 	bl	80010fc <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff6:	f7ff f881 	bl	80010fc <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e180      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_RCC_OscConfig+0x280>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x23a>
 8002014:	e01a      	b.n	800204c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_OscConfig+0x280>)
 8002018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_RCC_OscConfig+0x280>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7ff f86b 	bl	80010fc <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202a:	f7ff f867 	bl	80010fc <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d903      	bls.n	8002040 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e166      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
 800203c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	4b92      	ldr	r3, [pc, #584]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ee      	bne.n	800202a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a4 	beq.w	80021a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b8c      	ldr	r3, [pc, #560]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10d      	bne.n	8002082 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	4b89      	ldr	r3, [pc, #548]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a88      	ldr	r2, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b86      	ldr	r3, [pc, #536]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002082:	4b83      	ldr	r3, [pc, #524]	; (8002290 <HAL_RCC_OscConfig+0x4d4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d118      	bne.n	80020c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800208e:	4b80      	ldr	r3, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x4d4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7f      	ldr	r2, [pc, #508]	; (8002290 <HAL_RCC_OscConfig+0x4d4>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209a:	f7ff f82f 	bl	80010fc <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a2:	f7ff f82b 	bl	80010fc <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b64      	cmp	r3, #100	; 0x64
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e12a      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b4:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x4d4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x31a>
 80020c8:	4b70      	ldr	r3, [pc, #448]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	4a6f      	ldr	r2, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
 80020d4:	e02d      	b.n	8002132 <HAL_RCC_OscConfig+0x376>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x33c>
 80020de:	4b6b      	ldr	r3, [pc, #428]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a6a      	ldr	r2, [pc, #424]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a67      	ldr	r2, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
 80020f6:	e01c      	b.n	8002132 <HAL_RCC_OscConfig+0x376>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d10c      	bne.n	800211a <HAL_RCC_OscConfig+0x35e>
 8002100:	4b62      	ldr	r3, [pc, #392]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	4a61      	ldr	r2, [pc, #388]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
 800210c:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a5e      	ldr	r2, [pc, #376]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
 8002118:	e00b      	b.n	8002132 <HAL_RCC_OscConfig+0x376>
 800211a:	4b5c      	ldr	r3, [pc, #368]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a5b      	ldr	r2, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	4b59      	ldr	r3, [pc, #356]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	4a58      	ldr	r2, [pc, #352]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d015      	beq.n	8002166 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7fe ffdf 	bl	80010fc <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe ffdb 	bl	80010fc <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0d8      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	4b4c      	ldr	r3, [pc, #304]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ee      	beq.n	8002142 <HAL_RCC_OscConfig+0x386>
 8002164:	e014      	b.n	8002190 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7fe ffc9 	bl	80010fc <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7fe ffc5 	bl	80010fc <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	; 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0c2      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1ee      	bne.n	800216e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a3c      	ldr	r2, [pc, #240]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80ae 	beq.w	8002308 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ac:	4b37      	ldr	r3, [pc, #220]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d06d      	beq.n	8002294 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d14b      	bne.n	8002258 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a31      	ldr	r2, [pc, #196]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 80021c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe ff96 	bl	80010fc <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe ff92 	bl	80010fc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e091      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	4b29      	ldr	r3, [pc, #164]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	3b01      	subs	r3, #1
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	071b      	lsls	r3, r3, #28
 800221e:	491b      	ldr	r1, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a18      	ldr	r2, [pc, #96]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800222a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe ff64 	bl	80010fc <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe ff60 	bl	80010fc <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e05f      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x47c>
 8002256:	e057      	b.n	8002308 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 800225e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe ff4a 	bl	80010fc <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe ff46 	bl	80010fc <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e045      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_RCC_OscConfig+0x4d0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x4b0>
 800228a:	e03d      	b.n	8002308 <HAL_RCC_OscConfig+0x54c>
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_RCC_OscConfig+0x558>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d030      	beq.n	8002304 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d129      	bne.n	8002304 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d122      	bne.n	8002304 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022c4:	4013      	ands	r3, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d119      	bne.n	8002304 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	085b      	lsrs	r3, r3, #1
 80022dc:	3b01      	subs	r3, #1
 80022de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d10f      	bne.n	8002304 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0d0      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 020f 	bic.w	r2, r3, #15
 8002346:	4965      	ldr	r1, [pc, #404]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b63      	ldr	r3, [pc, #396]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0b8      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002378:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a58      	ldr	r2, [pc, #352]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002382:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002390:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800239a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	494d      	ldr	r1, [pc, #308]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d040      	beq.n	800243c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d115      	bne.n	80023fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07f      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e073      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06b      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f023 0203 	bic.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4936      	ldr	r1, [pc, #216]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	4313      	orrs	r3, r2
 800240a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240c:	f7fe fe76 	bl	80010fc <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7fe fe72 	bl	80010fc <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e053      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 020c 	and.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	429a      	cmp	r2, r3
 800243a:	d1eb      	bne.n	8002414 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d210      	bcs.n	800246c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 020f 	bic.w	r2, r3, #15
 8002452:	4922      	ldr	r1, [pc, #136]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e032      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4916      	ldr	r1, [pc, #88]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	490e      	ldr	r1, [pc, #56]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024aa:	f000 f821 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	490a      	ldr	r1, [pc, #40]	; (80024e4 <HAL_RCC_ClockConfig+0x1cc>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	fa22 f303 	lsr.w	r3, r2, r3
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x1d0>)
 80024c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x1d4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fdd2 	bl	8001074 <HAL_InitTick>

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023c00 	.word	0x40023c00
 80024e0:	40023800 	.word	0x40023800
 80024e4:	08008db4 	.word	0x08008db4
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f4:	b094      	sub	sp, #80	; 0x50
 80024f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	647b      	str	r3, [r7, #68]	; 0x44
 80024fc:	2300      	movs	r3, #0
 80024fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002500:	2300      	movs	r3, #0
 8002502:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002508:	4b79      	ldr	r3, [pc, #484]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d00d      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x40>
 8002514:	2b08      	cmp	r3, #8
 8002516:	f200 80e1 	bhi.w	80026dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x34>
 800251e:	2b04      	cmp	r3, #4
 8002520:	d003      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x3a>
 8002522:	e0db      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b73      	ldr	r3, [pc, #460]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002526:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002528:	e0db      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800252a:	4b72      	ldr	r3, [pc, #456]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800252c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800252e:	e0d8      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002530:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002538:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800253a:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d063      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002546:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	2200      	movs	r2, #0
 800254e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002550:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
 800255e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002562:	4622      	mov	r2, r4
 8002564:	462b      	mov	r3, r5
 8002566:	f04f 0000 	mov.w	r0, #0
 800256a:	f04f 0100 	mov.w	r1, #0
 800256e:	0159      	lsls	r1, r3, #5
 8002570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002574:	0150      	lsls	r0, r2, #5
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4621      	mov	r1, r4
 800257c:	1a51      	subs	r1, r2, r1
 800257e:	6139      	str	r1, [r7, #16]
 8002580:	4629      	mov	r1, r5
 8002582:	eb63 0301 	sbc.w	r3, r3, r1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002594:	4659      	mov	r1, fp
 8002596:	018b      	lsls	r3, r1, #6
 8002598:	4651      	mov	r1, sl
 800259a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800259e:	4651      	mov	r1, sl
 80025a0:	018a      	lsls	r2, r1, #6
 80025a2:	4651      	mov	r1, sl
 80025a4:	ebb2 0801 	subs.w	r8, r2, r1
 80025a8:	4659      	mov	r1, fp
 80025aa:	eb63 0901 	sbc.w	r9, r3, r1
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025c2:	4690      	mov	r8, r2
 80025c4:	4699      	mov	r9, r3
 80025c6:	4623      	mov	r3, r4
 80025c8:	eb18 0303 	adds.w	r3, r8, r3
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	462b      	mov	r3, r5
 80025d0:	eb49 0303 	adc.w	r3, r9, r3
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025e2:	4629      	mov	r1, r5
 80025e4:	028b      	lsls	r3, r1, #10
 80025e6:	4621      	mov	r1, r4
 80025e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ec:	4621      	mov	r1, r4
 80025ee:	028a      	lsls	r2, r1, #10
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f6:	2200      	movs	r2, #0
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002600:	f7fd fe22 	bl	8000248 <__aeabi_uldivmod>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4613      	mov	r3, r2
 800260a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800260c:	e058      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260e:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	2200      	movs	r2, #0
 8002616:	4618      	mov	r0, r3
 8002618:	4611      	mov	r1, r2
 800261a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800261e:	623b      	str	r3, [r7, #32]
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002628:	4642      	mov	r2, r8
 800262a:	464b      	mov	r3, r9
 800262c:	f04f 0000 	mov.w	r0, #0
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	0159      	lsls	r1, r3, #5
 8002636:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800263a:	0150      	lsls	r0, r2, #5
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4641      	mov	r1, r8
 8002642:	ebb2 0a01 	subs.w	sl, r2, r1
 8002646:	4649      	mov	r1, r9
 8002648:	eb63 0b01 	sbc.w	fp, r3, r1
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002658:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800265c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002660:	ebb2 040a 	subs.w	r4, r2, sl
 8002664:	eb63 050b 	sbc.w	r5, r3, fp
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	00eb      	lsls	r3, r5, #3
 8002672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002676:	00e2      	lsls	r2, r4, #3
 8002678:	4614      	mov	r4, r2
 800267a:	461d      	mov	r5, r3
 800267c:	4643      	mov	r3, r8
 800267e:	18e3      	adds	r3, r4, r3
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	464b      	mov	r3, r9
 8002684:	eb45 0303 	adc.w	r3, r5, r3
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002696:	4629      	mov	r1, r5
 8002698:	028b      	lsls	r3, r1, #10
 800269a:	4621      	mov	r1, r4
 800269c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a0:	4621      	mov	r1, r4
 80026a2:	028a      	lsls	r2, r1, #10
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026aa:	2200      	movs	r2, #0
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	61fa      	str	r2, [r7, #28]
 80026b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026b4:	f7fd fdc8 	bl	8000248 <__aeabi_uldivmod>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4613      	mov	r3, r2
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80026d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80026de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3750      	adds	r7, #80	; 0x50
 80026e8:	46bd      	mov	sp, r7
 80026ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	00f42400 	.word	0x00f42400

080026f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_GetHCLKFreq+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000000 	.word	0x20000000

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002714:	f7ff fff0 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	08008dc4 	.word	0x08008dc4

08002738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800273c:	f7ff ffdc 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0b5b      	lsrs	r3, r3, #13
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	; (800275c <HAL_RCC_GetPCLK2Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	08008dc4 	.word	0x08008dc4

08002760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002788:	4b69      	ldr	r3, [pc, #420]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a68      	ldr	r2, [pc, #416]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002792:	6093      	str	r3, [r2, #8]
 8002794:	4b66      	ldr	r3, [pc, #408]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	4964      	ldr	r1, [pc, #400]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d017      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ba:	4b5d      	ldr	r3, [pc, #372]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	4959      	ldr	r1, [pc, #356]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d8:	d101      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d017      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027f6:	4b4e      	ldr	r3, [pc, #312]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	494a      	ldr	r1, [pc, #296]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002814:	d101      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002816:	2301      	movs	r3, #1
 8002818:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 808b 	beq.w	800295a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	4a39      	ldr	r2, [pc, #228]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284e:	6413      	str	r3, [r2, #64]	; 0x40
 8002850:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800285c:	4b35      	ldr	r3, [pc, #212]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a34      	ldr	r2, [pc, #208]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002868:	f7fe fc48 	bl	80010fc <HAL_GetTick>
 800286c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002870:	f7fe fc44 	bl	80010fc <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e38f      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002882:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800288e:	4b28      	ldr	r3, [pc, #160]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002896:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d035      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d02e      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d114      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fc0c 	bl	80010fc <HAL_GetTick>
 80028e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	e00a      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7fe fc08 	bl	80010fc <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e351      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0ee      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002916:	d111      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002926:	400b      	ands	r3, r1
 8002928:	4901      	ldr	r1, [pc, #4]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
 800292e:	e00b      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002930:	40023800 	.word	0x40023800
 8002934:	40007000 	.word	0x40007000
 8002938:	0ffffcff 	.word	0x0ffffcff
 800293c:	4bac      	ldr	r3, [pc, #688]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4aab      	ldr	r2, [pc, #684]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002942:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002946:	6093      	str	r3, [r2, #8]
 8002948:	4ba9      	ldr	r3, [pc, #676]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	49a6      	ldr	r1, [pc, #664]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002956:	4313      	orrs	r3, r2
 8002958:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002966:	4ba2      	ldr	r3, [pc, #648]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296c:	4aa0      	ldr	r2, [pc, #640]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002972:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002976:	4b9e      	ldr	r3, [pc, #632]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002978:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	499b      	ldr	r1, [pc, #620]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002994:	4b96      	ldr	r3, [pc, #600]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a2:	4993      	ldr	r1, [pc, #588]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029b6:	4b8e      	ldr	r3, [pc, #568]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c4:	498a      	ldr	r1, [pc, #552]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029d8:	4b85      	ldr	r3, [pc, #532]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e6:	4982      	ldr	r1, [pc, #520]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029fa:	4b7d      	ldr	r3, [pc, #500]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	4979      	ldr	r1, [pc, #484]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a1c:	4b74      	ldr	r3, [pc, #464]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4971      	ldr	r1, [pc, #452]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a3e:	4b6c      	ldr	r3, [pc, #432]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a44:	f023 020c 	bic.w	r2, r3, #12
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4c:	4968      	ldr	r1, [pc, #416]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a60:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	4960      	ldr	r1, [pc, #384]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a82:	4b5b      	ldr	r3, [pc, #364]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a90:	4957      	ldr	r1, [pc, #348]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aa4:	4b52      	ldr	r3, [pc, #328]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	494f      	ldr	r1, [pc, #316]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	4946      	ldr	r1, [pc, #280]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ae8:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	493e      	ldr	r1, [pc, #248]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b18:	4935      	ldr	r1, [pc, #212]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b2c:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3a:	492d      	ldr	r1, [pc, #180]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d011      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b4e:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5c:	4924      	ldr	r1, [pc, #144]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9c:	4914      	ldr	r1, [pc, #80]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc0:	490b      	ldr	r1, [pc, #44]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00f      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be4:	4902      	ldr	r1, [pc, #8]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bec:	e002      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00b      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c00:	4b8a      	ldr	r3, [pc, #552]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	4986      	ldr	r1, [pc, #536]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00b      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c24:	4b81      	ldr	r3, [pc, #516]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c34:	497d      	ldr	r1, [pc, #500]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d006      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80d6 	beq.w	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c50:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a75      	ldr	r2, [pc, #468]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fa4e 	bl	80010fc <HAL_GetTick>
 8002c60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c64:	f7fe fa4a 	bl	80010fc <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	; 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e195      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c76:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d021      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d11d      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c96:	4b65      	ldr	r3, [pc, #404]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ca4:	4b61      	ldr	r3, [pc, #388]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002caa:	0e1b      	lsrs	r3, r3, #24
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	019a      	lsls	r2, r3, #6
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	041b      	lsls	r3, r3, #16
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	071b      	lsls	r3, r3, #28
 8002cca:	4958      	ldr	r1, [pc, #352]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d02e      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfc:	d129      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cfe:	4b4b      	ldr	r3, [pc, #300]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d0c:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d12:	0f1b      	lsrs	r3, r3, #28
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	019a      	lsls	r2, r3, #6
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	061b      	lsls	r3, r3, #24
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	071b      	lsls	r3, r3, #28
 8002d32:	493e      	ldr	r1, [pc, #248]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d3a:	4b3c      	ldr	r3, [pc, #240]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d40:	f023 021f 	bic.w	r2, r3, #31
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	4938      	ldr	r1, [pc, #224]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01d      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d5e:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d64:	0e1b      	lsrs	r3, r3, #24
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d72:	0f1b      	lsrs	r3, r3, #28
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	019a      	lsls	r2, r3, #6
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	431a      	orrs	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	071b      	lsls	r3, r3, #28
 8002d92:	4926      	ldr	r1, [pc, #152]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d011      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	019a      	lsls	r2, r3, #6
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	071b      	lsls	r3, r3, #28
 8002dc2:	491a      	ldr	r1, [pc, #104]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002dca:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd6:	f7fe f991 	bl	80010fc <HAL_GetTick>
 8002dda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dde:	f7fe f98d 	bl	80010fc <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0d8      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	f040 80ce 	bne.w	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e10:	f7fe f974 	bl	80010fc <HAL_GetTick>
 8002e14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e16:	e00b      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e18:	f7fe f970 	bl	80010fc <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d904      	bls.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0bb      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e30:	4b5e      	ldr	r3, [pc, #376]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e3c:	d0ec      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d02e      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d12a      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e66:	4b51      	ldr	r3, [pc, #324]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	0f1b      	lsrs	r3, r3, #28
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	019a      	lsls	r2, r3, #6
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	061b      	lsls	r3, r3, #24
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	071b      	lsls	r3, r3, #28
 8002e9a:	4944      	ldr	r1, [pc, #272]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ea2:	4b42      	ldr	r3, [pc, #264]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	493d      	ldr	r1, [pc, #244]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d022      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed0:	d11d      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	0e1b      	lsrs	r3, r3, #24
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ee0:	4b32      	ldr	r3, [pc, #200]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	0f1b      	lsrs	r3, r3, #28
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	019a      	lsls	r2, r3, #6
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	431a      	orrs	r2, r3
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	071b      	lsls	r3, r3, #28
 8002f06:	4929      	ldr	r1, [pc, #164]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d028      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	0e1b      	lsrs	r3, r3, #24
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	019a      	lsls	r2, r3, #6
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	041b      	lsls	r3, r3, #16
 8002f40:	431a      	orrs	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	4917      	ldr	r1, [pc, #92]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	4911      	ldr	r1, [pc, #68]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fe f8c0 	bl	80010fc <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f80:	f7fe f8bc 	bl	80010fc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e007      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9e:	d1ef      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800

08002fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e09d      	b.n	80030fe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d108      	bne.n	8002fdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fd2:	d009      	beq.n	8002fe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
 8002fda:	e005      	b.n	8002fe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd fd54 	bl	8000ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800301e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003028:	d902      	bls.n	8003030 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e002      	b.n	8003036 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003034:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800303e:	d007      	beq.n	8003050 <HAL_SPI_Init+0xa0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003048:	d002      	beq.n	8003050 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	ea42 0103 	orr.w	r1, r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	f003 0204 	and.w	r2, r3, #4
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030cc:	ea42 0103 	orr.w	r1, r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b088      	sub	sp, #32
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_SPI_Transmit+0x22>
 8003124:	2302      	movs	r3, #2
 8003126:	e158      	b.n	80033da <HAL_SPI_Transmit+0x2d4>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003130:	f7fd ffe4 	bl	80010fc <HAL_GetTick>
 8003134:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d002      	beq.n	800314c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	77fb      	strb	r3, [r7, #31]
    goto error;
 800314a:	e13d      	b.n	80033c8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_Transmit+0x52>
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800315c:	e134      	b.n	80033c8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2203      	movs	r2, #3
 8003162:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	88fa      	ldrh	r2, [r7, #6]
 8003176:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	88fa      	ldrh	r2, [r7, #6]
 800317c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a8:	d10f      	bne.n	80031ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d007      	beq.n	80031e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031f0:	d94b      	bls.n	800328a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_SPI_Transmit+0xfa>
 80031fa:	8afb      	ldrh	r3, [r7, #22]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d13e      	bne.n	800327e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	1c9a      	adds	r2, r3, #2
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003224:	e02b      	b.n	800327e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b02      	cmp	r3, #2
 8003232:	d112      	bne.n	800325a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	881a      	ldrh	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	1c9a      	adds	r2, r3, #2
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003258:	e011      	b.n	800327e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800325a:	f7fd ff4f 	bl	80010fc <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d803      	bhi.n	8003272 <HAL_SPI_Transmit+0x16c>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d102      	bne.n	8003278 <HAL_SPI_Transmit+0x172>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800327c:	e0a4      	b.n	80033c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ce      	bne.n	8003226 <HAL_SPI_Transmit+0x120>
 8003288:	e07c      	b.n	8003384 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_SPI_Transmit+0x192>
 8003292:	8afb      	ldrh	r3, [r7, #22]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d170      	bne.n	800337a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d912      	bls.n	80032c8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	1c9a      	adds	r2, r3, #2
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b02      	subs	r3, #2
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032c6:	e058      	b.n	800337a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	7812      	ldrb	r2, [r2, #0]
 80032d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032ee:	e044      	b.n	800337a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d12b      	bne.n	8003356 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d912      	bls.n	800332e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	1c9a      	adds	r2, r3, #2
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b02      	subs	r3, #2
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800332c:	e025      	b.n	800337a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003354:	e011      	b.n	800337a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003356:	f7fd fed1 	bl	80010fc <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d803      	bhi.n	800336e <HAL_SPI_Transmit+0x268>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d102      	bne.n	8003374 <HAL_SPI_Transmit+0x26e>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003378:	e026      	b.n	80033c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1b5      	bne.n	80032f0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	6839      	ldr	r1, [r7, #0]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fb5b 	bl	8003a44 <SPI_EndRxTxTransaction>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e000      	b.n	80033c8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80033c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b08a      	sub	sp, #40	; 0x28
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033f0:	2301      	movs	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_SPI_TransmitReceive+0x26>
 8003404:	2302      	movs	r3, #2
 8003406:	e1fb      	b.n	8003800 <HAL_SPI_TransmitReceive+0x41e>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003410:	f7fd fe74 	bl	80010fc <HAL_GetTick>
 8003414:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800341c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003424:	887b      	ldrh	r3, [r7, #2]
 8003426:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800342c:	7efb      	ldrb	r3, [r7, #27]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d00e      	beq.n	8003450 <HAL_SPI_TransmitReceive+0x6e>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003438:	d106      	bne.n	8003448 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d102      	bne.n	8003448 <HAL_SPI_TransmitReceive+0x66>
 8003442:	7efb      	ldrb	r3, [r7, #27]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d003      	beq.n	8003450 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003448:	2302      	movs	r3, #2
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800344e:	e1cd      	b.n	80037ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_SPI_TransmitReceive+0x80>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_SPI_TransmitReceive+0x80>
 800345c:	887b      	ldrh	r3, [r7, #2]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003468:	e1c0      	b.n	80037ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b04      	cmp	r3, #4
 8003474:	d003      	beq.n	800347e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2205      	movs	r2, #5
 800347a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	887a      	ldrh	r2, [r7, #2]
 800348e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	887a      	ldrh	r2, [r7, #2]
 8003496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	887a      	ldrh	r2, [r7, #2]
 80034a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	887a      	ldrh	r2, [r7, #2]
 80034aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034c0:	d802      	bhi.n	80034c8 <HAL_SPI_TransmitReceive+0xe6>
 80034c2:	8a3b      	ldrh	r3, [r7, #16]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d908      	bls.n	80034da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	e007      	b.n	80034ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d007      	beq.n	8003508 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003510:	d97c      	bls.n	800360c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_SPI_TransmitReceive+0x13e>
 800351a:	8a7b      	ldrh	r3, [r7, #18]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d169      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	881a      	ldrh	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	1c9a      	adds	r2, r3, #2
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003544:	e056      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d11b      	bne.n	800358c <HAL_SPI_TransmitReceive+0x1aa>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <HAL_SPI_TransmitReceive+0x1aa>
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	2b01      	cmp	r3, #1
 8003562:	d113      	bne.n	800358c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	881a      	ldrh	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	1c9a      	adds	r2, r3, #2
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d11c      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x1f2>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	b292      	uxth	r2, r2
 80035b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035d0:	2301      	movs	r3, #1
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035d4:	f7fd fd92 	bl	80010fc <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d807      	bhi.n	80035f4 <HAL_SPI_TransmitReceive+0x212>
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d003      	beq.n	80035f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80035f2:	e0fb      	b.n	80037ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1a3      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x164>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d19d      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x164>
 800360a:	e0df      	b.n	80037cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_SPI_TransmitReceive+0x23a>
 8003614:	8a7b      	ldrh	r3, [r7, #18]
 8003616:	2b01      	cmp	r3, #1
 8003618:	f040 80cb 	bne.w	80037b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d912      	bls.n	800364c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	881a      	ldrh	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	1c9a      	adds	r2, r3, #2
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b02      	subs	r3, #2
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	87da      	strh	r2, [r3, #62]	; 0x3e
 800364a:	e0b2      	b.n	80037b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	7812      	ldrb	r2, [r2, #0]
 8003658:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003672:	e09e      	b.n	80037b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b02      	cmp	r3, #2
 8003680:	d134      	bne.n	80036ec <HAL_SPI_TransmitReceive+0x30a>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d02f      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x30a>
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	2b01      	cmp	r3, #1
 8003690:	d12c      	bne.n	80036ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d912      	bls.n	80036c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	881a      	ldrh	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	1c9a      	adds	r2, r3, #2
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b02      	subs	r3, #2
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036c0:	e012      	b.n	80036e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d148      	bne.n	800378c <HAL_SPI_TransmitReceive+0x3aa>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d042      	beq.n	800378c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d923      	bls.n	800375a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	b292      	uxth	r2, r2
 800371e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	1c9a      	adds	r2, r3, #2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b02      	subs	r3, #2
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d81f      	bhi.n	8003788 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	e016      	b.n	8003788 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f103 020c 	add.w	r2, r3, #12
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	7812      	ldrb	r2, [r2, #0]
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003788:	2301      	movs	r3, #1
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800378c:	f7fd fcb6 	bl	80010fc <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003798:	429a      	cmp	r2, r3
 800379a:	d803      	bhi.n	80037a4 <HAL_SPI_TransmitReceive+0x3c2>
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d102      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x3c8>
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037b0:	e01c      	b.n	80037ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f af5b 	bne.w	8003674 <HAL_SPI_TransmitReceive+0x292>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f47f af54 	bne.w	8003674 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f937 	bl	8003a44 <SPI_EndRxTxTransaction>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d006      	beq.n	80037ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	661a      	str	r2, [r3, #96]	; 0x60
 80037e8:	e000      	b.n	80037ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80037ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003800:	4618      	mov	r0, r3
 8003802:	3728      	adds	r7, #40	; 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003818:	f7fd fc70 	bl	80010fc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003828:	f7fd fc68 	bl	80010fc <HAL_GetTick>
 800382c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	015b      	lsls	r3, r3, #5
 8003834:	0d1b      	lsrs	r3, r3, #20
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383e:	e054      	b.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d050      	beq.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003848:	f7fd fc58 	bl	80010fc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	d902      	bls.n	800385e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d13d      	bne.n	80038da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800386c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003876:	d111      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003880:	d004      	beq.n	800388c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d107      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800389a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a4:	d10f      	bne.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e017      	b.n	800390a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	429a      	cmp	r2, r3
 8003906:	d19b      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000000 	.word	0x20000000

08003918 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800392a:	f7fd fbe7 	bl	80010fc <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	4413      	add	r3, r2
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800393a:	f7fd fbdf 	bl	80010fc <HAL_GetTick>
 800393e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003948:	4b3d      	ldr	r3, [pc, #244]	; (8003a40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00da      	lsls	r2, r3, #3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	0d1b      	lsrs	r3, r3, #20
 8003958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003960:	e060      	b.n	8003a24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003968:	d107      	bne.n	800397a <SPI_WaitFifoStateUntilTimeout+0x62>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d104      	bne.n	800397a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003978:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d050      	beq.n	8003a24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003982:	f7fd fbbb 	bl	80010fc <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398e:	429a      	cmp	r2, r3
 8003990:	d902      	bls.n	8003998 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	2b00      	cmp	r3, #0
 8003996:	d13d      	bne.n	8003a14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039b0:	d111      	bne.n	80039d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ba:	d004      	beq.n	80039c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c4:	d107      	bne.n	80039d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039de:	d10f      	bne.n	8003a00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e010      	b.n	8003a36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d196      	bne.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3728      	adds	r7, #40	; 0x28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000000 	.word	0x20000000

08003a44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff ff5b 	bl	8003918 <SPI_WaitFifoStateUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e046      	b.n	8003b06 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <SPI_EndRxTxTransaction+0xcc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <SPI_EndRxTxTransaction+0xd0>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	0d5b      	lsrs	r3, r3, #21
 8003a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a96:	d112      	bne.n	8003abe <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff feb0 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e023      	b.n	8003b06 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d0f2      	beq.n	8003abe <SPI_EndRxTxTransaction+0x7a>
 8003ad8:	e000      	b.n	8003adc <SPI_EndRxTxTransaction+0x98>
        break;
 8003ada:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff ff15 	bl	8003918 <SPI_WaitFifoStateUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e000      	b.n	8003b06 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000000 	.word	0x20000000
 8003b14:	165e9f81 	.word	0x165e9f81

08003b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e040      	b.n	8003bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd f8ee 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2224      	movs	r2, #36	; 0x24
 8003b44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fbd6 	bl	8004308 <UART_SetConfig>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e022      	b.n	8003bac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fe2e 	bl	80047d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 feb5 	bl	8004914 <UART_CheckIdleState>
 8003baa:	4603      	mov	r3, r0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b08b      	sub	sp, #44	; 0x2c
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d147      	bne.n	8003c5a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_UART_Transmit_IT+0x22>
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e040      	b.n	8003c5c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2221      	movs	r2, #33	; 0x21
 8003c02:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0c:	d107      	bne.n	8003c1e <HAL_UART_Transmit_IT+0x6a>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <HAL_UART_Transmit_IT+0xb4>)
 8003c1a:	66da      	str	r2, [r3, #108]	; 0x6c
 8003c1c:	e002      	b.n	8003c24 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <HAL_UART_Transmit_IT+0xb8>)
 8003c22:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	613b      	str	r3, [r7, #16]
   return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	623b      	str	r3, [r7, #32]
 8003c44:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	69f9      	ldr	r1, [r7, #28]
 8003c48:	6a3a      	ldr	r2, [r7, #32]
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e6      	bne.n	8003c24 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
  }
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	372c      	adds	r7, #44	; 0x2c
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	08004e73 	.word	0x08004e73
 8003c6c:	08004dbd 	.word	0x08004dbd

08003c70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d132      	bne.n	8003cee <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_UART_Receive_IT+0x24>
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e02b      	b.n	8003cf0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d018      	beq.n	8003cde <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	69f9      	ldr	r1, [r7, #28]
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e6      	bne.n	8003cac <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 ff29 	bl	8004b3c <UART_Start_Receive_IT>
 8003cea:	4603      	mov	r3, r0
 8003cec:	e000      	b.n	8003cf0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3728      	adds	r7, #40	; 0x28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b0ba      	sub	sp, #232	; 0xe8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d22:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d26:	4013      	ands	r3, r2
 8003d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d115      	bne.n	8003d60 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00f      	beq.n	8003d60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 82ac 	beq.w	80042ae <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
      }
      return;
 8003d5e:	e2a6      	b.n	80042ae <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8117 	beq.w	8003f98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d7a:	4b85      	ldr	r3, [pc, #532]	; (8003f90 <HAL_UART_IRQHandler+0x298>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 810a 	beq.w	8003f98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d011      	beq.n	8003db4 <HAL_UART_IRQHandler+0xbc>
 8003d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2201      	movs	r2, #1
 8003da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d011      	beq.n	8003de4 <HAL_UART_IRQHandler+0xec>
 8003dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dda:	f043 0204 	orr.w	r2, r3, #4
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d011      	beq.n	8003e14 <HAL_UART_IRQHandler+0x11c>
 8003df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00b      	beq.n	8003e14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2204      	movs	r2, #4
 8003e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0a:	f043 0202 	orr.w	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d017      	beq.n	8003e50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d105      	bne.n	8003e38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00b      	beq.n	8003e50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e46:	f043 0208 	orr.w	r2, r3, #8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d012      	beq.n	8003e82 <HAL_UART_IRQHandler+0x18a>
 8003e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00c      	beq.n	8003e82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e78:	f043 0220 	orr.w	r2, r3, #32
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8212 	beq.w	80042b2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d005      	beq.n	8003eda <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ed2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04f      	beq.n	8003f7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fef4 	bl	8004cc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eea:	2b40      	cmp	r3, #64	; 0x40
 8003eec:	d141      	bne.n	8003f72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3308      	adds	r3, #8
 8003f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1d9      	bne.n	8003eee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d013      	beq.n	8003f6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f46:	4a13      	ldr	r2, [pc, #76]	; (8003f94 <HAL_UART_IRQHandler+0x29c>)
 8003f48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd fd19 	bl	8001986 <HAL_DMA_Abort_IT>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d017      	beq.n	8003f8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f64:	4610      	mov	r0, r2
 8003f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	e00f      	b.n	8003f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f9ac 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e00b      	b.n	8003f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f9a8 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	e007      	b.n	8003f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f9a4 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003f88:	e193      	b.n	80042b2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8a:	bf00      	nop
    return;
 8003f8c:	e191      	b.n	80042b2 <HAL_UART_IRQHandler+0x5ba>
 8003f8e:	bf00      	nop
 8003f90:	04000120 	.word	0x04000120
 8003f94:	08004d91 	.word	0x08004d91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	f040 814c 	bne.w	800423a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8145 	beq.w	800423a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 813e 	beq.w	800423a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	f040 80b6 	bne.w	8004142 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fe2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8165 	beq.w	80042b6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	f080 815d 	bcs.w	80042b6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004002:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004010:	f000 8086 	beq.w	8004120 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800402c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800403e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004042:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800404a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1da      	bne.n	8004014 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800406e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3308      	adds	r3, #8
 800407e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004082:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004086:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800408a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e1      	bne.n	800405e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3308      	adds	r3, #8
 80040a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3308      	adds	r3, #8
 80040ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e3      	bne.n	800409a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f0:	f023 0310 	bic.w	r3, r3, #16
 80040f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004102:	65bb      	str	r3, [r7, #88]	; 0x58
 8004104:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e4      	bne.n	80040e0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd fbc3 	bl	80018a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004132:	b29b      	uxth	r3, r3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	b29b      	uxth	r3, r3
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f8ce 	bl	80042dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004140:	e0b9      	b.n	80042b6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800414e:	b29b      	uxth	r3, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80ab 	beq.w	80042ba <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80a6 	beq.w	80042ba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800417c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
 8004192:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800419e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e4      	bne.n	800416e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3308      	adds	r3, #8
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	623b      	str	r3, [r7, #32]
   return(result);
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3308      	adds	r3, #8
 80041c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041c8:	633a      	str	r2, [r7, #48]	; 0x30
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e3      	bne.n	80041a4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f023 0310 	bic.w	r3, r3, #16
 8004204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	69b9      	ldr	r1, [r7, #24]
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	617b      	str	r3, [r7, #20]
   return(result);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e4      	bne.n	80041f0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800422c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f852 	bl	80042dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004238:	e03f      	b.n	80042ba <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00e      	beq.n	8004264 <HAL_UART_IRQHandler+0x56c>
 8004246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800425a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f849 	bl	80042f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004262:	e02d      	b.n	80042c0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00e      	beq.n	800428e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01c      	beq.n	80042be <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
    }
    return;
 800428c:	e017      	b.n	80042be <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <HAL_UART_IRQHandler+0x5c8>
 800429a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fe43 	bl	8004f32 <UART_EndTransmit_IT>
    return;
 80042ac:	e008      	b.n	80042c0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80042ae:	bf00      	nop
 80042b0:	e006      	b.n	80042c0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80042b2:	bf00      	nop
 80042b4:	e004      	b.n	80042c0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80042b6:	bf00      	nop
 80042b8:	e002      	b.n	80042c0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80042ba:	bf00      	nop
 80042bc:	e000      	b.n	80042c0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80042be:	bf00      	nop
  }

}
 80042c0:	37e8      	adds	r7, #232	; 0xe8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop

080042c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4ba6      	ldr	r3, [pc, #664]	; (80045cc <UART_SetConfig+0x2c4>)
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	6979      	ldr	r1, [r7, #20]
 800433c:	430b      	orrs	r3, r1
 800433e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a94      	ldr	r2, [pc, #592]	; (80045d0 <UART_SetConfig+0x2c8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d120      	bne.n	80043c6 <UART_SetConfig+0xbe>
 8004384:	4b93      	ldr	r3, [pc, #588]	; (80045d4 <UART_SetConfig+0x2cc>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b03      	cmp	r3, #3
 8004390:	d816      	bhi.n	80043c0 <UART_SetConfig+0xb8>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <UART_SetConfig+0x90>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043a9 	.word	0x080043a9
 800439c:	080043b5 	.word	0x080043b5
 80043a0:	080043af 	.word	0x080043af
 80043a4:	080043bb 	.word	0x080043bb
 80043a8:	2301      	movs	r3, #1
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e150      	b.n	8004650 <UART_SetConfig+0x348>
 80043ae:	2302      	movs	r3, #2
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e14d      	b.n	8004650 <UART_SetConfig+0x348>
 80043b4:	2304      	movs	r3, #4
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e14a      	b.n	8004650 <UART_SetConfig+0x348>
 80043ba:	2308      	movs	r3, #8
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e147      	b.n	8004650 <UART_SetConfig+0x348>
 80043c0:	2310      	movs	r3, #16
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e144      	b.n	8004650 <UART_SetConfig+0x348>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a83      	ldr	r2, [pc, #524]	; (80045d8 <UART_SetConfig+0x2d0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d132      	bne.n	8004436 <UART_SetConfig+0x12e>
 80043d0:	4b80      	ldr	r3, [pc, #512]	; (80045d4 <UART_SetConfig+0x2cc>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d828      	bhi.n	8004430 <UART_SetConfig+0x128>
 80043de:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <UART_SetConfig+0xdc>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	08004419 	.word	0x08004419
 80043e8:	08004431 	.word	0x08004431
 80043ec:	08004431 	.word	0x08004431
 80043f0:	08004431 	.word	0x08004431
 80043f4:	08004425 	.word	0x08004425
 80043f8:	08004431 	.word	0x08004431
 80043fc:	08004431 	.word	0x08004431
 8004400:	08004431 	.word	0x08004431
 8004404:	0800441f 	.word	0x0800441f
 8004408:	08004431 	.word	0x08004431
 800440c:	08004431 	.word	0x08004431
 8004410:	08004431 	.word	0x08004431
 8004414:	0800442b 	.word	0x0800442b
 8004418:	2300      	movs	r3, #0
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e118      	b.n	8004650 <UART_SetConfig+0x348>
 800441e:	2302      	movs	r3, #2
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e115      	b.n	8004650 <UART_SetConfig+0x348>
 8004424:	2304      	movs	r3, #4
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e112      	b.n	8004650 <UART_SetConfig+0x348>
 800442a:	2308      	movs	r3, #8
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e10f      	b.n	8004650 <UART_SetConfig+0x348>
 8004430:	2310      	movs	r3, #16
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e10c      	b.n	8004650 <UART_SetConfig+0x348>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a68      	ldr	r2, [pc, #416]	; (80045dc <UART_SetConfig+0x2d4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d120      	bne.n	8004482 <UART_SetConfig+0x17a>
 8004440:	4b64      	ldr	r3, [pc, #400]	; (80045d4 <UART_SetConfig+0x2cc>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800444a:	2b30      	cmp	r3, #48	; 0x30
 800444c:	d013      	beq.n	8004476 <UART_SetConfig+0x16e>
 800444e:	2b30      	cmp	r3, #48	; 0x30
 8004450:	d814      	bhi.n	800447c <UART_SetConfig+0x174>
 8004452:	2b20      	cmp	r3, #32
 8004454:	d009      	beq.n	800446a <UART_SetConfig+0x162>
 8004456:	2b20      	cmp	r3, #32
 8004458:	d810      	bhi.n	800447c <UART_SetConfig+0x174>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <UART_SetConfig+0x15c>
 800445e:	2b10      	cmp	r3, #16
 8004460:	d006      	beq.n	8004470 <UART_SetConfig+0x168>
 8004462:	e00b      	b.n	800447c <UART_SetConfig+0x174>
 8004464:	2300      	movs	r3, #0
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e0f2      	b.n	8004650 <UART_SetConfig+0x348>
 800446a:	2302      	movs	r3, #2
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	e0ef      	b.n	8004650 <UART_SetConfig+0x348>
 8004470:	2304      	movs	r3, #4
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e0ec      	b.n	8004650 <UART_SetConfig+0x348>
 8004476:	2308      	movs	r3, #8
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e0e9      	b.n	8004650 <UART_SetConfig+0x348>
 800447c:	2310      	movs	r3, #16
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e0e6      	b.n	8004650 <UART_SetConfig+0x348>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a56      	ldr	r2, [pc, #344]	; (80045e0 <UART_SetConfig+0x2d8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d120      	bne.n	80044ce <UART_SetConfig+0x1c6>
 800448c:	4b51      	ldr	r3, [pc, #324]	; (80045d4 <UART_SetConfig+0x2cc>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004496:	2bc0      	cmp	r3, #192	; 0xc0
 8004498:	d013      	beq.n	80044c2 <UART_SetConfig+0x1ba>
 800449a:	2bc0      	cmp	r3, #192	; 0xc0
 800449c:	d814      	bhi.n	80044c8 <UART_SetConfig+0x1c0>
 800449e:	2b80      	cmp	r3, #128	; 0x80
 80044a0:	d009      	beq.n	80044b6 <UART_SetConfig+0x1ae>
 80044a2:	2b80      	cmp	r3, #128	; 0x80
 80044a4:	d810      	bhi.n	80044c8 <UART_SetConfig+0x1c0>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <UART_SetConfig+0x1a8>
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d006      	beq.n	80044bc <UART_SetConfig+0x1b4>
 80044ae:	e00b      	b.n	80044c8 <UART_SetConfig+0x1c0>
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e0cc      	b.n	8004650 <UART_SetConfig+0x348>
 80044b6:	2302      	movs	r3, #2
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e0c9      	b.n	8004650 <UART_SetConfig+0x348>
 80044bc:	2304      	movs	r3, #4
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e0c6      	b.n	8004650 <UART_SetConfig+0x348>
 80044c2:	2308      	movs	r3, #8
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e0c3      	b.n	8004650 <UART_SetConfig+0x348>
 80044c8:	2310      	movs	r3, #16
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e0c0      	b.n	8004650 <UART_SetConfig+0x348>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a44      	ldr	r2, [pc, #272]	; (80045e4 <UART_SetConfig+0x2dc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d125      	bne.n	8004524 <UART_SetConfig+0x21c>
 80044d8:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <UART_SetConfig+0x2cc>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e6:	d017      	beq.n	8004518 <UART_SetConfig+0x210>
 80044e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ec:	d817      	bhi.n	800451e <UART_SetConfig+0x216>
 80044ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f2:	d00b      	beq.n	800450c <UART_SetConfig+0x204>
 80044f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f8:	d811      	bhi.n	800451e <UART_SetConfig+0x216>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <UART_SetConfig+0x1fe>
 80044fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004502:	d006      	beq.n	8004512 <UART_SetConfig+0x20a>
 8004504:	e00b      	b.n	800451e <UART_SetConfig+0x216>
 8004506:	2300      	movs	r3, #0
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e0a1      	b.n	8004650 <UART_SetConfig+0x348>
 800450c:	2302      	movs	r3, #2
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e09e      	b.n	8004650 <UART_SetConfig+0x348>
 8004512:	2304      	movs	r3, #4
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e09b      	b.n	8004650 <UART_SetConfig+0x348>
 8004518:	2308      	movs	r3, #8
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e098      	b.n	8004650 <UART_SetConfig+0x348>
 800451e:	2310      	movs	r3, #16
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e095      	b.n	8004650 <UART_SetConfig+0x348>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2f      	ldr	r2, [pc, #188]	; (80045e8 <UART_SetConfig+0x2e0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d125      	bne.n	800457a <UART_SetConfig+0x272>
 800452e:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <UART_SetConfig+0x2cc>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004538:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800453c:	d017      	beq.n	800456e <UART_SetConfig+0x266>
 800453e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004542:	d817      	bhi.n	8004574 <UART_SetConfig+0x26c>
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004548:	d00b      	beq.n	8004562 <UART_SetConfig+0x25a>
 800454a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454e:	d811      	bhi.n	8004574 <UART_SetConfig+0x26c>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <UART_SetConfig+0x254>
 8004554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004558:	d006      	beq.n	8004568 <UART_SetConfig+0x260>
 800455a:	e00b      	b.n	8004574 <UART_SetConfig+0x26c>
 800455c:	2301      	movs	r3, #1
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	e076      	b.n	8004650 <UART_SetConfig+0x348>
 8004562:	2302      	movs	r3, #2
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e073      	b.n	8004650 <UART_SetConfig+0x348>
 8004568:	2304      	movs	r3, #4
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e070      	b.n	8004650 <UART_SetConfig+0x348>
 800456e:	2308      	movs	r3, #8
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e06d      	b.n	8004650 <UART_SetConfig+0x348>
 8004574:	2310      	movs	r3, #16
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e06a      	b.n	8004650 <UART_SetConfig+0x348>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <UART_SetConfig+0x2e4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d138      	bne.n	80045f6 <UART_SetConfig+0x2ee>
 8004584:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <UART_SetConfig+0x2cc>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800458e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004592:	d017      	beq.n	80045c4 <UART_SetConfig+0x2bc>
 8004594:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004598:	d82a      	bhi.n	80045f0 <UART_SetConfig+0x2e8>
 800459a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459e:	d00b      	beq.n	80045b8 <UART_SetConfig+0x2b0>
 80045a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a4:	d824      	bhi.n	80045f0 <UART_SetConfig+0x2e8>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <UART_SetConfig+0x2aa>
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ae:	d006      	beq.n	80045be <UART_SetConfig+0x2b6>
 80045b0:	e01e      	b.n	80045f0 <UART_SetConfig+0x2e8>
 80045b2:	2300      	movs	r3, #0
 80045b4:	77fb      	strb	r3, [r7, #31]
 80045b6:	e04b      	b.n	8004650 <UART_SetConfig+0x348>
 80045b8:	2302      	movs	r3, #2
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e048      	b.n	8004650 <UART_SetConfig+0x348>
 80045be:	2304      	movs	r3, #4
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e045      	b.n	8004650 <UART_SetConfig+0x348>
 80045c4:	2308      	movs	r3, #8
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e042      	b.n	8004650 <UART_SetConfig+0x348>
 80045ca:	bf00      	nop
 80045cc:	efff69f3 	.word	0xefff69f3
 80045d0:	40011000 	.word	0x40011000
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40004400 	.word	0x40004400
 80045dc:	40004800 	.word	0x40004800
 80045e0:	40004c00 	.word	0x40004c00
 80045e4:	40005000 	.word	0x40005000
 80045e8:	40011400 	.word	0x40011400
 80045ec:	40007800 	.word	0x40007800
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e02c      	b.n	8004650 <UART_SetConfig+0x348>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a72      	ldr	r2, [pc, #456]	; (80047c4 <UART_SetConfig+0x4bc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d125      	bne.n	800464c <UART_SetConfig+0x344>
 8004600:	4b71      	ldr	r3, [pc, #452]	; (80047c8 <UART_SetConfig+0x4c0>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800460a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800460e:	d017      	beq.n	8004640 <UART_SetConfig+0x338>
 8004610:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004614:	d817      	bhi.n	8004646 <UART_SetConfig+0x33e>
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461a:	d00b      	beq.n	8004634 <UART_SetConfig+0x32c>
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004620:	d811      	bhi.n	8004646 <UART_SetConfig+0x33e>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <UART_SetConfig+0x326>
 8004626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800462a:	d006      	beq.n	800463a <UART_SetConfig+0x332>
 800462c:	e00b      	b.n	8004646 <UART_SetConfig+0x33e>
 800462e:	2300      	movs	r3, #0
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e00d      	b.n	8004650 <UART_SetConfig+0x348>
 8004634:	2302      	movs	r3, #2
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e00a      	b.n	8004650 <UART_SetConfig+0x348>
 800463a:	2304      	movs	r3, #4
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e007      	b.n	8004650 <UART_SetConfig+0x348>
 8004640:	2308      	movs	r3, #8
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e004      	b.n	8004650 <UART_SetConfig+0x348>
 8004646:	2310      	movs	r3, #16
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e001      	b.n	8004650 <UART_SetConfig+0x348>
 800464c:	2310      	movs	r3, #16
 800464e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004658:	d15b      	bne.n	8004712 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800465a:	7ffb      	ldrb	r3, [r7, #31]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d828      	bhi.n	80046b2 <UART_SetConfig+0x3aa>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <UART_SetConfig+0x360>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046b3 	.word	0x080046b3
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
 8004688:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7fe f840 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8004690:	61b8      	str	r0, [r7, #24]
        break;
 8004692:	e013      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe f850 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 8004698:	61b8      	str	r0, [r7, #24]
        break;
 800469a:	e00f      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b4b      	ldr	r3, [pc, #300]	; (80047cc <UART_SetConfig+0x4c4>)
 800469e:	61bb      	str	r3, [r7, #24]
        break;
 80046a0:	e00c      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fd ff25 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80046a6:	61b8      	str	r0, [r7, #24]
        break;
 80046a8:	e008      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ae:	61bb      	str	r3, [r7, #24]
        break;
 80046b0:	e004      	b.n	80046bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	77bb      	strb	r3, [r7, #30]
        break;
 80046ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d074      	beq.n	80047ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	005a      	lsls	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	d916      	bls.n	800470c <UART_SetConfig+0x404>
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d212      	bcs.n	800470c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f023 030f 	bic.w	r3, r3, #15
 80046ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	89fb      	ldrh	r3, [r7, #14]
 80046fe:	4313      	orrs	r3, r2
 8004700:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	89fa      	ldrh	r2, [r7, #14]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e04f      	b.n	80047ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	77bb      	strb	r3, [r7, #30]
 8004710:	e04c      	b.n	80047ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004712:	7ffb      	ldrb	r3, [r7, #31]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d828      	bhi.n	800476a <UART_SetConfig+0x462>
 8004718:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <UART_SetConfig+0x418>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004745 	.word	0x08004745
 8004724:	0800474d 	.word	0x0800474d
 8004728:	08004755 	.word	0x08004755
 800472c:	0800476b 	.word	0x0800476b
 8004730:	0800475b 	.word	0x0800475b
 8004734:	0800476b 	.word	0x0800476b
 8004738:	0800476b 	.word	0x0800476b
 800473c:	0800476b 	.word	0x0800476b
 8004740:	08004763 	.word	0x08004763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004744:	f7fd ffe4 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8004748:	61b8      	str	r0, [r7, #24]
        break;
 800474a:	e013      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800474c:	f7fd fff4 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 8004750:	61b8      	str	r0, [r7, #24]
        break;
 8004752:	e00f      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004754:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <UART_SetConfig+0x4c4>)
 8004756:	61bb      	str	r3, [r7, #24]
        break;
 8004758:	e00c      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475a:	f7fd fec9 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 800475e:	61b8      	str	r0, [r7, #24]
        break;
 8004760:	e008      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004766:	61bb      	str	r3, [r7, #24]
        break;
 8004768:	e004      	b.n	8004774 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	77bb      	strb	r3, [r7, #30]
        break;
 8004772:	bf00      	nop
    }

    if (pclk != 0U)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d018      	beq.n	80047ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	085a      	lsrs	r2, r3, #1
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	441a      	add	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b0f      	cmp	r3, #15
 8004792:	d909      	bls.n	80047a8 <UART_SetConfig+0x4a0>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479a:	d205      	bcs.n	80047a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	b29a      	uxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	e001      	b.n	80047ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80047b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40007c00 	.word	0x40007c00
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00f42400 	.word	0x00f42400

080047d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01a      	beq.n	80048e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ce:	d10a      	bne.n	80048e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
  }
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af02      	add	r7, sp, #8
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004924:	f7fc fbea 	bl	80010fc <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b08      	cmp	r3, #8
 8004936:	d10e      	bne.n	8004956 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f831 	bl	80049ae <UART_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e027      	b.n	80049a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b04      	cmp	r3, #4
 8004962:	d10e      	bne.n	8004982 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f81b 	bl	80049ae <UART_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e011      	b.n	80049a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b09c      	sub	sp, #112	; 0x70
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049be:	e0a7      	b.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	f000 80a3 	beq.w	8004b10 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7fc fb97 	bl	80010fc <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80049da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d13f      	bne.n	8004a60 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049f4:	667b      	str	r3, [r7, #100]	; 0x64
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e6      	bne.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3308      	adds	r3, #8
 8004a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	663b      	str	r3, [r7, #96]	; 0x60
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a32:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e068      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d050      	beq.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7c:	d148      	bne.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a86:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e6      	bne.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ada:	623a      	str	r2, [r7, #32]
 8004adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	69f9      	ldr	r1, [r7, #28]
 8004ae0:	6a3a      	ldr	r2, [r7, #32]
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e5      	bne.n	8004aba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e010      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69da      	ldr	r2, [r3, #28]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	461a      	mov	r2, r3
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	f43f af48 	beq.w	80049c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3770      	adds	r7, #112	; 0x70
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b097      	sub	sp, #92	; 0x5c
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	88fa      	ldrh	r2, [r7, #6]
 8004b54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6e:	d10e      	bne.n	8004b8e <UART_Start_Receive_IT+0x52>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <UART_Start_Receive_IT+0x48>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b82:	e02d      	b.n	8004be0 <UART_Start_Receive_IT+0xa4>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	22ff      	movs	r2, #255	; 0xff
 8004b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b8c:	e028      	b.n	8004be0 <UART_Start_Receive_IT+0xa4>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10d      	bne.n	8004bb2 <UART_Start_Receive_IT+0x76>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <UART_Start_Receive_IT+0x6c>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ba6:	e01b      	b.n	8004be0 <UART_Start_Receive_IT+0xa4>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	227f      	movs	r2, #127	; 0x7f
 8004bac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bb0:	e016      	b.n	8004be0 <UART_Start_Receive_IT+0xa4>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bba:	d10d      	bne.n	8004bd8 <UART_Start_Receive_IT+0x9c>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <UART_Start_Receive_IT+0x92>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	227f      	movs	r2, #127	; 0x7f
 8004bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bcc:	e008      	b.n	8004be0 <UART_Start_Receive_IT+0xa4>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	223f      	movs	r2, #63	; 0x3f
 8004bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bd6:	e003      	b.n	8004be0 <UART_Start_Receive_IT+0xa4>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2222      	movs	r2, #34	; 0x22
 8004bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	657b      	str	r3, [r7, #84]	; 0x54
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c10:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2c:	d107      	bne.n	8004c3e <UART_Start_Receive_IT+0x102>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d103      	bne.n	8004c3e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <UART_Start_Receive_IT+0x184>)
 8004c3a:	669a      	str	r2, [r3, #104]	; 0x68
 8004c3c:	e002      	b.n	8004c44 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a20      	ldr	r2, [pc, #128]	; (8004cc4 <UART_Start_Receive_IT+0x188>)
 8004c42:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d019      	beq.n	8004c80 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004c60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e6      	bne.n	8004c4c <UART_Start_Receive_IT+0x110>
 8004c7e:	e018      	b.n	8004cb2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f043 0320 	orr.w	r3, r3, #32
 8004c94:	653b      	str	r3, [r7, #80]	; 0x50
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9e:	623b      	str	r3, [r7, #32]
 8004ca0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	69f9      	ldr	r1, [r7, #28]
 8004ca4:	6a3a      	ldr	r2, [r7, #32]
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e6      	bne.n	8004c80 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	375c      	adds	r7, #92	; 0x5c
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	080050ed 	.word	0x080050ed
 8004cc4:	08004f87 	.word	0x08004f87

08004cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b095      	sub	sp, #84	; 0x54
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cee:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e6      	bne.n	8004cd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3308      	adds	r3, #8
 8004d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d118      	bne.n	8004d70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f023 0310 	bic.w	r3, r3, #16
 8004d52:	647b      	str	r3, [r7, #68]	; 0x44
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6979      	ldr	r1, [r7, #20]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e6      	bne.n	8004d3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d84:	bf00      	nop
 8004d86:	3754      	adds	r7, #84	; 0x54
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff fa8a 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b08f      	sub	sp, #60	; 0x3c
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dc8:	2b21      	cmp	r3, #33	; 0x21
 8004dca:	d14c      	bne.n	8004e66 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d132      	bne.n	8004e3e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e6      	bne.n	8004dd8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	6979      	ldr	r1, [r7, #20]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	613b      	str	r3, [r7, #16]
   return(result);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e6      	bne.n	8004e0a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004e3c:	e013      	b.n	8004e66 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	781a      	ldrb	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004e66:	bf00      	nop
 8004e68:	373c      	adds	r7, #60	; 0x3c
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b091      	sub	sp, #68	; 0x44
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7e:	2b21      	cmp	r3, #33	; 0x21
 8004e80:	d151      	bne.n	8004f26 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d132      	bne.n	8004ef4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	633b      	str	r3, [r7, #48]	; 0x30
 8004eae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	69b9      	ldr	r1, [r7, #24]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	617b      	str	r3, [r7, #20]
   return(result);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e6      	bne.n	8004ec0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004ef2:	e018      	b.n	8004f26 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0e:	1c9a      	adds	r2, r3, #2
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004f26:	bf00      	nop
 8004f28:	3744      	adds	r7, #68	; 0x44
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b088      	sub	sp, #32
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6979      	ldr	r1, [r7, #20]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	613b      	str	r3, [r7, #16]
   return(result);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e6      	bne.n	8004f3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fc f80b 	bl	8000f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f7e:	bf00      	nop
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b096      	sub	sp, #88	; 0x58
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9e:	2b22      	cmp	r3, #34	; 0x22
 8004fa0:	f040 8098 	bne.w	80050d4 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004fb2:	b2d9      	uxtb	r1, r3
 8004fb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d17b      	bne.n	80050e4 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005000:	653b      	str	r3, [r7, #80]	; 0x50
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500a:	647b      	str	r3, [r7, #68]	; 0x44
 800500c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e6      	bne.n	8004fec <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3308      	adds	r3, #8
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	623b      	str	r3, [r7, #32]
   return(result);
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3308      	adds	r3, #8
 800503c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800503e:	633a      	str	r2, [r7, #48]	; 0x30
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e5      	bne.n	800501e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506a:	2b01      	cmp	r3, #1
 800506c:	d12e      	bne.n	80050cc <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	60fb      	str	r3, [r7, #12]
   return(result);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f023 0310 	bic.w	r3, r3, #16
 8005088:	64bb      	str	r3, [r7, #72]	; 0x48
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	69b9      	ldr	r1, [r7, #24]
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	617b      	str	r3, [r7, #20]
   return(result);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e6      	bne.n	8005074 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d103      	bne.n	80050bc <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2210      	movs	r2, #16
 80050ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff f909 	bl	80042dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050ca:	e00b      	b.n	80050e4 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fb fef7 	bl	8000ec0 <HAL_UART_RxCpltCallback>
}
 80050d2:	e007      	b.n	80050e4 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0208 	orr.w	r2, r2, #8
 80050e2:	619a      	str	r2, [r3, #24]
}
 80050e4:	bf00      	nop
 80050e6:	3758      	adds	r7, #88	; 0x58
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b096      	sub	sp, #88	; 0x58
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005104:	2b22      	cmp	r3, #34	; 0x22
 8005106:	f040 8098 	bne.w	800523a <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800511a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800511e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005122:	4013      	ands	r3, r2
 8005124:	b29a      	uxth	r2, r3
 8005126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005128:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d17b      	bne.n	800524a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005170:	643b      	str	r3, [r7, #64]	; 0x40
 8005172:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e6      	bne.n	8005152 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3308      	adds	r3, #8
 800518a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	61fb      	str	r3, [r7, #28]
   return(result);
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	64bb      	str	r3, [r7, #72]	; 0x48
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3308      	adds	r3, #8
 80051a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e5      	bne.n	8005184 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d12e      	bne.n	8005232 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f023 0310 	bic.w	r3, r3, #16
 80051ee:	647b      	str	r3, [r7, #68]	; 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6979      	ldr	r1, [r7, #20]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	613b      	str	r3, [r7, #16]
   return(result);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e6      	bne.n	80051da <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b10      	cmp	r3, #16
 8005218:	d103      	bne.n	8005222 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2210      	movs	r2, #16
 8005220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005228:	4619      	mov	r1, r3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff f856 	bl	80042dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005230:	e00b      	b.n	800524a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fb fe44 	bl	8000ec0 <HAL_UART_RxCpltCallback>
}
 8005238:	e007      	b.n	800524a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0208 	orr.w	r2, r2, #8
 8005248:	619a      	str	r2, [r3, #24]
}
 800524a:	bf00      	nop
 800524c:	3758      	adds	r7, #88	; 0x58
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005258:	4904      	ldr	r1, [pc, #16]	; (800526c <MX_FATFS_Init+0x18>)
 800525a:	4805      	ldr	r0, [pc, #20]	; (8005270 <MX_FATFS_Init+0x1c>)
 800525c:	f003 fc48 	bl	8008af0 <FATFS_LinkDriver>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <MX_FATFS_Init+0x20>)
 8005266:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005268:	bf00      	nop
 800526a:	bd80      	pop	{r7, pc}
 800526c:	200025fc 	.word	0x200025fc
 8005270:	2000000c 	.word	0x2000000c
 8005274:	200025f8 	.word	0x200025f8

08005278 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800527c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800527e:	4618      	mov	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	4618      	mov	r0, r3
 8005296:	f000 faa3 	bl	80057e0 <SD_disk_initialize>
 800529a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fb7b 	bl	80059ac <SD_disk_status>
 80052b6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80052d0:	7bf8      	ldrb	r0, [r7, #15]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	f000 fb7e 	bl	80059d8 <SD_disk_read>
 80052dc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4603      	mov	r3, r0
 80052f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80052f6:	7bf8      	ldrb	r0, [r7, #15]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	f000 fbd5 	bl	8005aac <SD_disk_write>
 8005302:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	603a      	str	r2, [r7, #0]
 8005316:	71fb      	strb	r3, [r7, #7]
 8005318:	460b      	mov	r3, r1
 800531a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800531c:	79b9      	ldrb	r1, [r7, #6]
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fc46 	bl	8005bb4 <SD_disk_ioctl>
 8005328:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <disk_status+0x30>)
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	79fa      	ldrb	r2, [r7, #7]
 800534c:	4905      	ldr	r1, [pc, #20]	; (8005364 <disk_status+0x30>)
 800534e:	440a      	add	r2, r1
 8005350:	7a12      	ldrb	r2, [r2, #8]
 8005352:	4610      	mov	r0, r2
 8005354:	4798      	blx	r3
 8005356:	4603      	mov	r3, r0
 8005358:	73fb      	strb	r3, [r7, #15]
  return stat;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	2000282c 	.word	0x2000282c

08005368 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <disk_initialize+0x48>)
 800537a:	5cd3      	ldrb	r3, [r2, r3]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d111      	bne.n	80053a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	4a0b      	ldr	r2, [pc, #44]	; (80053b0 <disk_initialize+0x48>)
 8005384:	2101      	movs	r1, #1
 8005386:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <disk_initialize+0x48>)
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	79fa      	ldrb	r2, [r7, #7]
 8005396:	4906      	ldr	r1, [pc, #24]	; (80053b0 <disk_initialize+0x48>)
 8005398:	440a      	add	r2, r1
 800539a:	7a12      	ldrb	r2, [r2, #8]
 800539c:	4610      	mov	r0, r2
 800539e:	4798      	blx	r3
 80053a0:	4603      	mov	r3, r0
 80053a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	2000282c 	.word	0x2000282c

080053b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4603      	mov	r3, r0
 80053c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <disk_read+0x3c>)
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	689c      	ldr	r4, [r3, #8]
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	4a07      	ldr	r2, [pc, #28]	; (80053f0 <disk_read+0x3c>)
 80053d4:	4413      	add	r3, r2
 80053d6:	7a18      	ldrb	r0, [r3, #8]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	47a0      	blx	r4
 80053e0:	4603      	mov	r3, r0
 80053e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd90      	pop	{r4, r7, pc}
 80053ee:	bf00      	nop
 80053f0:	2000282c 	.word	0x2000282c

080053f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4603      	mov	r3, r0
 8005402:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <disk_write+0x3c>)
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68dc      	ldr	r4, [r3, #12]
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	4a07      	ldr	r2, [pc, #28]	; (8005430 <disk_write+0x3c>)
 8005414:	4413      	add	r3, r2
 8005416:	7a18      	ldrb	r0, [r3, #8]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	47a0      	blx	r4
 8005420:	4603      	mov	r3, r0
 8005422:	75fb      	strb	r3, [r7, #23]
  return res;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
}
 8005426:	4618      	mov	r0, r3
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	bd90      	pop	{r4, r7, pc}
 800542e:	bf00      	nop
 8005430:	2000282c 	.word	0x2000282c

08005434 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	603a      	str	r2, [r7, #0]
 800543e:	71fb      	strb	r3, [r7, #7]
 8005440:	460b      	mov	r3, r1
 8005442:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	4a09      	ldr	r2, [pc, #36]	; (800546c <disk_ioctl+0x38>)
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	79fa      	ldrb	r2, [r7, #7]
 8005452:	4906      	ldr	r1, [pc, #24]	; (800546c <disk_ioctl+0x38>)
 8005454:	440a      	add	r2, r1
 8005456:	7a10      	ldrb	r0, [r2, #8]
 8005458:	79b9      	ldrb	r1, [r7, #6]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	4798      	blx	r3
 800545e:	4603      	mov	r3, r0
 8005460:	73fb      	strb	r3, [r7, #15]
  return res;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	2000282c 	.word	0x2000282c

08005470 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8005474:	2200      	movs	r2, #0
 8005476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800547a:	4804      	ldr	r0, [pc, #16]	; (800548c <SELECT+0x1c>)
 800547c:	f7fc fc52 	bl	8001d24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005480:	2001      	movs	r0, #1
 8005482:	f7fb fe47 	bl	8001114 <HAL_Delay>
}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40020c00 	.word	0x40020c00

08005490 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8005494:	2201      	movs	r2, #1
 8005496:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800549a:	4804      	ldr	r0, [pc, #16]	; (80054ac <DESELECT+0x1c>)
 800549c:	f7fc fc42 	bl	8001d24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80054a0:	2001      	movs	r0, #1
 80054a2:	f7fb fe37 	bl	8001114 <HAL_Delay>
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40020c00 	.word	0x40020c00

080054b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80054ba:	bf00      	nop
 80054bc:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <SPI_TxByte+0x30>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d1f8      	bne.n	80054bc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80054ca:	1df9      	adds	r1, r7, #7
 80054cc:	2364      	movs	r3, #100	; 0x64
 80054ce:	2201      	movs	r2, #1
 80054d0:	4803      	ldr	r0, [pc, #12]	; (80054e0 <SPI_TxByte+0x30>)
 80054d2:	f7fd fe18 	bl	8003106 <HAL_SPI_Transmit>
}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200020f4 	.word	0x200020f4

080054e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80054f0:	bf00      	nop
 80054f2:	4b08      	ldr	r3, [pc, #32]	; (8005514 <SPI_TxBuffer+0x30>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d1f8      	bne.n	80054f2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8005500:	887a      	ldrh	r2, [r7, #2]
 8005502:	2364      	movs	r3, #100	; 0x64
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	4803      	ldr	r0, [pc, #12]	; (8005514 <SPI_TxBuffer+0x30>)
 8005508:	f7fd fdfd 	bl	8003106 <HAL_SPI_Transmit>
}
 800550c:	bf00      	nop
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	200020f4 	.word	0x200020f4

08005518 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800551e:	23ff      	movs	r3, #255	; 0xff
 8005520:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005522:	bf00      	nop
 8005524:	4b09      	ldr	r3, [pc, #36]	; (800554c <SPI_RxByte+0x34>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b02      	cmp	r3, #2
 8005530:	d1f8      	bne.n	8005524 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005532:	1dba      	adds	r2, r7, #6
 8005534:	1df9      	adds	r1, r7, #7
 8005536:	2364      	movs	r3, #100	; 0x64
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	2301      	movs	r3, #1
 800553c:	4803      	ldr	r0, [pc, #12]	; (800554c <SPI_RxByte+0x34>)
 800553e:	f7fd ff50 	bl	80033e2 <HAL_SPI_TransmitReceive>

	return data;
 8005542:	79bb      	ldrb	r3, [r7, #6]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	200020f4 	.word	0x200020f4

08005550 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8005558:	f7ff ffde 	bl	8005518 <SPI_RxByte>
 800555c:	4603      	mov	r3, r0
 800555e:	461a      	mov	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	701a      	strb	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <SD_ReadyWait+0x30>)
 8005574:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005578:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800557a:	f7ff ffcd 	bl	8005518 <SPI_RxByte>
 800557e:	4603      	mov	r3, r0
 8005580:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2bff      	cmp	r3, #255	; 0xff
 8005586:	d003      	beq.n	8005590 <SD_ReadyWait+0x24>
 8005588:	4b04      	ldr	r3, [pc, #16]	; (800559c <SD_ReadyWait+0x30>)
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f4      	bne.n	800557a <SD_ReadyWait+0xe>

	return res;
 8005590:	79fb      	ldrb	r3, [r7, #7]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	2000215c 	.word	0x2000215c

080055a0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80055a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80055aa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80055ac:	f7ff ff70 	bl	8005490 <DESELECT>
	for(int i = 0; i < 10; i++)
 80055b0:	2300      	movs	r3, #0
 80055b2:	60bb      	str	r3, [r7, #8]
 80055b4:	e005      	b.n	80055c2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80055b6:	20ff      	movs	r0, #255	; 0xff
 80055b8:	f7ff ff7a 	bl	80054b0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	3301      	adds	r3, #1
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b09      	cmp	r3, #9
 80055c6:	ddf6      	ble.n	80055b6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80055c8:	f7ff ff52 	bl	8005470 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80055cc:	2340      	movs	r3, #64	; 0x40
 80055ce:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80055e0:	2395      	movs	r3, #149	; 0x95
 80055e2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80055e4:	463b      	mov	r3, r7
 80055e6:	2106      	movs	r1, #6
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff ff7b 	bl	80054e4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80055ee:	e002      	b.n	80055f6 <SD_PowerOn+0x56>
	{
		cnt--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80055f6:	f7ff ff8f 	bl	8005518 <SPI_RxByte>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d002      	beq.n	8005606 <SD_PowerOn+0x66>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f4      	bne.n	80055f0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8005606:	f7ff ff43 	bl	8005490 <DESELECT>
	SPI_TxByte(0XFF);
 800560a:	20ff      	movs	r0, #255	; 0xff
 800560c:	f7ff ff50 	bl	80054b0 <SPI_TxByte>

	PowerFlag = 1;
 8005610:	4b03      	ldr	r3, [pc, #12]	; (8005620 <SD_PowerOn+0x80>)
 8005612:	2201      	movs	r2, #1
 8005614:	701a      	strb	r2, [r3, #0]
}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20002601 	.word	0x20002601

08005624 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8005628:	4b03      	ldr	r3, [pc, #12]	; (8005638 <SD_PowerOff+0x14>)
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
}
 800562e:	bf00      	nop
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	20002601 	.word	0x20002601

0800563c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8005640:	4b03      	ldr	r3, [pc, #12]	; (8005650 <SD_CheckPower+0x14>)
 8005642:	781b      	ldrb	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20002601 	.word	0x20002601

08005654 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800565e:	4b13      	ldr	r3, [pc, #76]	; (80056ac <SD_RxDataBlock+0x58>)
 8005660:	22c8      	movs	r2, #200	; 0xc8
 8005662:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8005664:	f7ff ff58 	bl	8005518 <SPI_RxByte>
 8005668:	4603      	mov	r3, r0
 800566a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2bff      	cmp	r3, #255	; 0xff
 8005670:	d103      	bne.n	800567a <SD_RxDataBlock+0x26>
 8005672:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <SD_RxDataBlock+0x58>)
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f4      	bne.n	8005664 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2bfe      	cmp	r3, #254	; 0xfe
 800567e:	d001      	beq.n	8005684 <SD_RxDataBlock+0x30>
 8005680:	2300      	movs	r3, #0
 8005682:	e00f      	b.n	80056a4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff ff60 	bl	8005550 <SPI_RxBytePtr>
	} while(len--);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	1e5a      	subs	r2, r3, #1
 8005694:	603a      	str	r2, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f4      	bne.n	8005684 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800569a:	f7ff ff3d 	bl	8005518 <SPI_RxByte>
	SPI_RxByte();
 800569e:	f7ff ff3b 	bl	8005518 <SPI_RxByte>

	return TRUE;
 80056a2:	2301      	movs	r3, #1
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	2000215a 	.word	0x2000215a

080056b0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80056c0:	f7ff ff54 	bl	800556c <SD_ReadyWait>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2bff      	cmp	r3, #255	; 0xff
 80056c8:	d001      	beq.n	80056ce <SD_TxDataBlock+0x1e>
 80056ca:	2300      	movs	r3, #0
 80056cc:	e02f      	b.n	800572e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff feed 	bl	80054b0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	2bfd      	cmp	r3, #253	; 0xfd
 80056da:	d020      	beq.n	800571e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80056dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff feff 	bl	80054e4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80056e6:	f7ff ff17 	bl	8005518 <SPI_RxByte>
		SPI_RxByte();
 80056ea:	f7ff ff15 	bl	8005518 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80056ee:	e00b      	b.n	8005708 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80056f0:	f7ff ff12 	bl	8005518 <SPI_RxByte>
 80056f4:	4603      	mov	r3, r0
 80056f6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d006      	beq.n	8005710 <SD_TxDataBlock+0x60>
			i++;
 8005702:	7bbb      	ldrb	r3, [r7, #14]
 8005704:	3301      	adds	r3, #1
 8005706:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8005708:	7bbb      	ldrb	r3, [r7, #14]
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d9f0      	bls.n	80056f0 <SD_TxDataBlock+0x40>
 800570e:	e000      	b.n	8005712 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8005710:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8005712:	bf00      	nop
 8005714:	f7ff ff00 	bl	8005518 <SPI_RxByte>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0fa      	beq.n	8005714 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	2b05      	cmp	r3, #5
 8005726:	d101      	bne.n	800572c <SD_TxDataBlock+0x7c>
 8005728:	2301      	movs	r3, #1
 800572a:	e000      	b.n	800572e <SD_TxDataBlock+0x7e>

	return FALSE;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	4603      	mov	r3, r0
 800573e:	6039      	str	r1, [r7, #0]
 8005740:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8005742:	f7ff ff13 	bl	800556c <SD_ReadyWait>
 8005746:	4603      	mov	r3, r0
 8005748:	2bff      	cmp	r3, #255	; 0xff
 800574a:	d001      	beq.n	8005750 <SD_SendCmd+0x1a>
 800574c:	23ff      	movs	r3, #255	; 0xff
 800574e:	e042      	b.n	80057d6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff feac 	bl	80054b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	0e1b      	lsrs	r3, r3, #24
 800575c:	b2db      	uxtb	r3, r3
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff fea6 	bl	80054b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	0c1b      	lsrs	r3, r3, #16
 8005768:	b2db      	uxtb	r3, r3
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fea0 	bl	80054b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	b2db      	uxtb	r3, r3
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff fe9a 	bl	80054b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff fe95 	bl	80054b0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	2b40      	cmp	r3, #64	; 0x40
 800578a:	d102      	bne.n	8005792 <SD_SendCmd+0x5c>
 800578c:	2395      	movs	r3, #149	; 0x95
 800578e:	73fb      	strb	r3, [r7, #15]
 8005790:	e007      	b.n	80057a2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	2b48      	cmp	r3, #72	; 0x48
 8005796:	d102      	bne.n	800579e <SD_SendCmd+0x68>
 8005798:	2387      	movs	r3, #135	; 0x87
 800579a:	73fb      	strb	r3, [r7, #15]
 800579c:	e001      	b.n	80057a2 <SD_SendCmd+0x6c>
	else crc = 1;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fe83 	bl	80054b0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	2b4c      	cmp	r3, #76	; 0x4c
 80057ae:	d101      	bne.n	80057b4 <SD_SendCmd+0x7e>
 80057b0:	f7ff feb2 	bl	8005518 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80057b4:	230a      	movs	r3, #10
 80057b6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80057b8:	f7ff feae 	bl	8005518 <SPI_RxByte>
 80057bc:	4603      	mov	r3, r0
 80057be:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80057c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	da05      	bge.n	80057d4 <SD_SendCmd+0x9e>
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	73bb      	strb	r3, [r7, #14]
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f1      	bne.n	80057b8 <SD_SendCmd+0x82>

	return res;
 80057d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <SD_disk_initialize+0x14>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0d1      	b.n	8005998 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80057f4:	4b6a      	ldr	r3, [pc, #424]	; (80059a0 <SD_disk_initialize+0x1c0>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <SD_disk_initialize+0x2a>
 8005802:	4b67      	ldr	r3, [pc, #412]	; (80059a0 <SD_disk_initialize+0x1c0>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	e0c6      	b.n	8005998 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800580a:	f7ff fec9 	bl	80055a0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800580e:	f7ff fe2f 	bl	8005470 <SELECT>

	/* check disk type */
	type = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8005816:	2100      	movs	r1, #0
 8005818:	2040      	movs	r0, #64	; 0x40
 800581a:	f7ff ff8c 	bl	8005736 <SD_SendCmd>
 800581e:	4603      	mov	r3, r0
 8005820:	2b01      	cmp	r3, #1
 8005822:	f040 80a1 	bne.w	8005968 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8005826:	4b5f      	ldr	r3, [pc, #380]	; (80059a4 <SD_disk_initialize+0x1c4>)
 8005828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800582c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800582e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005832:	2048      	movs	r0, #72	; 0x48
 8005834:	f7ff ff7f 	bl	8005736 <SD_SendCmd>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d155      	bne.n	80058ea <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800583e:	2300      	movs	r3, #0
 8005840:	73fb      	strb	r3, [r7, #15]
 8005842:	e00c      	b.n	800585e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8005844:	7bfc      	ldrb	r4, [r7, #15]
 8005846:	f7ff fe67 	bl	8005518 <SPI_RxByte>
 800584a:	4603      	mov	r3, r0
 800584c:	461a      	mov	r2, r3
 800584e:	f104 0310 	add.w	r3, r4, #16
 8005852:	443b      	add	r3, r7
 8005854:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	3301      	adds	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d9ef      	bls.n	8005844 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8005864:	7abb      	ldrb	r3, [r7, #10]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d17e      	bne.n	8005968 <SD_disk_initialize+0x188>
 800586a:	7afb      	ldrb	r3, [r7, #11]
 800586c:	2baa      	cmp	r3, #170	; 0xaa
 800586e:	d17b      	bne.n	8005968 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005870:	2100      	movs	r1, #0
 8005872:	2077      	movs	r0, #119	; 0x77
 8005874:	f7ff ff5f 	bl	8005736 <SD_SendCmd>
 8005878:	4603      	mov	r3, r0
 800587a:	2b01      	cmp	r3, #1
 800587c:	d807      	bhi.n	800588e <SD_disk_initialize+0xae>
 800587e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005882:	2069      	movs	r0, #105	; 0x69
 8005884:	f7ff ff57 	bl	8005736 <SD_SendCmd>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800588e:	4b45      	ldr	r3, [pc, #276]	; (80059a4 <SD_disk_initialize+0x1c4>)
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1ec      	bne.n	8005870 <SD_disk_initialize+0x90>
 8005896:	e000      	b.n	800589a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005898:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800589a:	4b42      	ldr	r3, [pc, #264]	; (80059a4 <SD_disk_initialize+0x1c4>)
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d062      	beq.n	8005968 <SD_disk_initialize+0x188>
 80058a2:	2100      	movs	r1, #0
 80058a4:	207a      	movs	r0, #122	; 0x7a
 80058a6:	f7ff ff46 	bl	8005736 <SD_SendCmd>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d15b      	bne.n	8005968 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80058b0:	2300      	movs	r3, #0
 80058b2:	73fb      	strb	r3, [r7, #15]
 80058b4:	e00c      	b.n	80058d0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80058b6:	7bfc      	ldrb	r4, [r7, #15]
 80058b8:	f7ff fe2e 	bl	8005518 <SPI_RxByte>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	f104 0310 	add.w	r3, r4, #16
 80058c4:	443b      	add	r3, r7
 80058c6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	3301      	adds	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d9ef      	bls.n	80058b6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80058d6:	7a3b      	ldrb	r3, [r7, #8]
 80058d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <SD_disk_initialize+0x104>
 80058e0:	230c      	movs	r3, #12
 80058e2:	e000      	b.n	80058e6 <SD_disk_initialize+0x106>
 80058e4:	2304      	movs	r3, #4
 80058e6:	73bb      	strb	r3, [r7, #14]
 80058e8:	e03e      	b.n	8005968 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80058ea:	2100      	movs	r1, #0
 80058ec:	2077      	movs	r0, #119	; 0x77
 80058ee:	f7ff ff22 	bl	8005736 <SD_SendCmd>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d808      	bhi.n	800590a <SD_disk_initialize+0x12a>
 80058f8:	2100      	movs	r1, #0
 80058fa:	2069      	movs	r0, #105	; 0x69
 80058fc:	f7ff ff1b 	bl	8005736 <SD_SendCmd>
 8005900:	4603      	mov	r3, r0
 8005902:	2b01      	cmp	r3, #1
 8005904:	d801      	bhi.n	800590a <SD_disk_initialize+0x12a>
 8005906:	2302      	movs	r3, #2
 8005908:	e000      	b.n	800590c <SD_disk_initialize+0x12c>
 800590a:	2301      	movs	r3, #1
 800590c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d10e      	bne.n	8005932 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8005914:	2100      	movs	r1, #0
 8005916:	2077      	movs	r0, #119	; 0x77
 8005918:	f7ff ff0d 	bl	8005736 <SD_SendCmd>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d80e      	bhi.n	8005940 <SD_disk_initialize+0x160>
 8005922:	2100      	movs	r1, #0
 8005924:	2069      	movs	r0, #105	; 0x69
 8005926:	f7ff ff06 	bl	8005736 <SD_SendCmd>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d107      	bne.n	8005940 <SD_disk_initialize+0x160>
 8005930:	e00c      	b.n	800594c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005932:	2100      	movs	r1, #0
 8005934:	2041      	movs	r0, #65	; 0x41
 8005936:	f7ff fefe 	bl	8005736 <SD_SendCmd>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8005940:	4b18      	ldr	r3, [pc, #96]	; (80059a4 <SD_disk_initialize+0x1c4>)
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e2      	bne.n	800590e <SD_disk_initialize+0x12e>
 8005948:	e000      	b.n	800594c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800594a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800594c:	4b15      	ldr	r3, [pc, #84]	; (80059a4 <SD_disk_initialize+0x1c4>)
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <SD_disk_initialize+0x184>
 8005954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005958:	2050      	movs	r0, #80	; 0x50
 800595a:	f7ff feec 	bl	8005736 <SD_SendCmd>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <SD_disk_initialize+0x188>
 8005964:	2300      	movs	r3, #0
 8005966:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8005968:	4a0f      	ldr	r2, [pc, #60]	; (80059a8 <SD_disk_initialize+0x1c8>)
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800596e:	f7ff fd8f 	bl	8005490 <DESELECT>
	SPI_RxByte();
 8005972:	f7ff fdd1 	bl	8005518 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8005976:	7bbb      	ldrb	r3, [r7, #14]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800597c:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <SD_disk_initialize+0x1c0>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	b2da      	uxtb	r2, r3
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <SD_disk_initialize+0x1c0>)
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	e001      	b.n	8005992 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800598e:	f7ff fe49 	bl	8005624 <SD_PowerOff>
	}

	return Stat;
 8005992:	4b03      	ldr	r3, [pc, #12]	; (80059a0 <SD_disk_initialize+0x1c0>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b2db      	uxtb	r3, r3
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	bd90      	pop	{r4, r7, pc}
 80059a0:	20000020 	.word	0x20000020
 80059a4:	2000215a 	.word	0x2000215a
 80059a8:	20002600 	.word	0x20002600

080059ac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <SD_disk_status+0x14>
 80059bc:	2301      	movs	r3, #1
 80059be:	e002      	b.n	80059c6 <SD_disk_status+0x1a>
	return Stat;
 80059c0:	4b04      	ldr	r3, [pc, #16]	; (80059d4 <SD_disk_status+0x28>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	b2db      	uxtb	r3, r3
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000020 	.word	0x20000020

080059d8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d102      	bne.n	80059f4 <SD_disk_read+0x1c>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <SD_disk_read+0x20>
 80059f4:	2304      	movs	r3, #4
 80059f6:	e051      	b.n	8005a9c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80059f8:	4b2a      	ldr	r3, [pc, #168]	; (8005aa4 <SD_disk_read+0xcc>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <SD_disk_read+0x32>
 8005a06:	2303      	movs	r3, #3
 8005a08:	e048      	b.n	8005a9c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8005a0a:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <SD_disk_read+0xd0>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <SD_disk_read+0x44>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	025b      	lsls	r3, r3, #9
 8005a1a:	607b      	str	r3, [r7, #4]

	SELECT();
 8005a1c:	f7ff fd28 	bl	8005470 <SELECT>

	if (count == 1)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d111      	bne.n	8005a4a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	2051      	movs	r0, #81	; 0x51
 8005a2a:	f7ff fe84 	bl	8005736 <SD_SendCmd>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d129      	bne.n	8005a88 <SD_disk_read+0xb0>
 8005a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a38:	68b8      	ldr	r0, [r7, #8]
 8005a3a:	f7ff fe0b 	bl	8005654 <SD_RxDataBlock>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d021      	beq.n	8005a88 <SD_disk_read+0xb0>
 8005a44:	2300      	movs	r3, #0
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	e01e      	b.n	8005a88 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	2052      	movs	r0, #82	; 0x52
 8005a4e:	f7ff fe72 	bl	8005736 <SD_SendCmd>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d117      	bne.n	8005a88 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8005a58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a5c:	68b8      	ldr	r0, [r7, #8]
 8005a5e:	f7ff fdf9 	bl	8005654 <SD_RxDataBlock>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <SD_disk_read+0xa6>
				buff += 512;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005a6e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1ed      	bne.n	8005a58 <SD_disk_read+0x80>
 8005a7c:	e000      	b.n	8005a80 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8005a7e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8005a80:	2100      	movs	r1, #0
 8005a82:	204c      	movs	r0, #76	; 0x4c
 8005a84:	f7ff fe57 	bl	8005736 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8005a88:	f7ff fd02 	bl	8005490 <DESELECT>
	SPI_RxByte();
 8005a8c:	f7ff fd44 	bl	8005518 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	bf14      	ite	ne
 8005a96:	2301      	movne	r3, #1
 8005a98:	2300      	moveq	r3, #0
 8005a9a:	b2db      	uxtb	r3, r3
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000020 	.word	0x20000020
 8005aa8:	20002600 	.word	0x20002600

08005aac <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <SD_disk_write+0x1c>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <SD_disk_write+0x20>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	e06b      	b.n	8005ba4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005acc:	4b37      	ldr	r3, [pc, #220]	; (8005bac <SD_disk_write+0x100>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <SD_disk_write+0x32>
 8005ada:	2303      	movs	r3, #3
 8005adc:	e062      	b.n	8005ba4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8005ade:	4b33      	ldr	r3, [pc, #204]	; (8005bac <SD_disk_write+0x100>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <SD_disk_write+0x44>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e059      	b.n	8005ba4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8005af0:	4b2f      	ldr	r3, [pc, #188]	; (8005bb0 <SD_disk_write+0x104>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <SD_disk_write+0x56>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	025b      	lsls	r3, r3, #9
 8005b00:	607b      	str	r3, [r7, #4]

	SELECT();
 8005b02:	f7ff fcb5 	bl	8005470 <SELECT>

	if (count == 1)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d110      	bne.n	8005b2e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	2058      	movs	r0, #88	; 0x58
 8005b10:	f7ff fe11 	bl	8005736 <SD_SendCmd>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d13a      	bne.n	8005b90 <SD_disk_write+0xe4>
 8005b1a:	21fe      	movs	r1, #254	; 0xfe
 8005b1c:	68b8      	ldr	r0, [r7, #8]
 8005b1e:	f7ff fdc7 	bl	80056b0 <SD_TxDataBlock>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d033      	beq.n	8005b90 <SD_disk_write+0xe4>
			count = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	e030      	b.n	8005b90 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8005b2e:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <SD_disk_write+0x104>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	2077      	movs	r0, #119	; 0x77
 8005b3e:	f7ff fdfa 	bl	8005736 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	2057      	movs	r0, #87	; 0x57
 8005b46:	f7ff fdf6 	bl	8005736 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	2059      	movs	r0, #89	; 0x59
 8005b4e:	f7ff fdf2 	bl	8005736 <SD_SendCmd>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11b      	bne.n	8005b90 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005b58:	21fc      	movs	r1, #252	; 0xfc
 8005b5a:	68b8      	ldr	r0, [r7, #8]
 8005b5c:	f7ff fda8 	bl	80056b0 <SD_TxDataBlock>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <SD_disk_write+0xd0>
				buff += 512;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005b6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1ee      	bne.n	8005b58 <SD_disk_write+0xac>
 8005b7a:	e000      	b.n	8005b7e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005b7c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8005b7e:	21fd      	movs	r1, #253	; 0xfd
 8005b80:	2000      	movs	r0, #0
 8005b82:	f7ff fd95 	bl	80056b0 <SD_TxDataBlock>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <SD_disk_write+0xe4>
			{
				count = 1;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8005b90:	f7ff fc7e 	bl	8005490 <DESELECT>
	SPI_RxByte();
 8005b94:	f7ff fcc0 	bl	8005518 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	bf14      	ite	ne
 8005b9e:	2301      	movne	r3, #1
 8005ba0:	2300      	moveq	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20000020 	.word	0x20000020
 8005bb0:	20002600 	.word	0x20002600

08005bb4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8005bb4:	b590      	push	{r4, r7, lr}
 8005bb6:	b08b      	sub	sp, #44	; 0x2c
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	603a      	str	r2, [r7, #0]
 8005bbe:	71fb      	strb	r3, [r7, #7]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <SD_disk_ioctl+0x1e>
 8005bce:	2304      	movs	r3, #4
 8005bd0:	e115      	b.n	8005dfe <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8005bd8:	79bb      	ldrb	r3, [r7, #6]
 8005bda:	2b05      	cmp	r3, #5
 8005bdc:	d124      	bne.n	8005c28 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d012      	beq.n	8005c0c <SD_disk_ioctl+0x58>
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	dc1a      	bgt.n	8005c20 <SD_disk_ioctl+0x6c>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <SD_disk_ioctl+0x40>
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d006      	beq.n	8005c00 <SD_disk_ioctl+0x4c>
 8005bf2:	e015      	b.n	8005c20 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8005bf4:	f7ff fd16 	bl	8005624 <SD_PowerOff>
			res = RES_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005bfe:	e0fc      	b.n	8005dfa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8005c00:	f7ff fcce 	bl	80055a0 <SD_PowerOn>
			res = RES_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005c0a:	e0f6      	b.n	8005dfa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	1c5c      	adds	r4, r3, #1
 8005c10:	f7ff fd14 	bl	800563c <SD_CheckPower>
 8005c14:	4603      	mov	r3, r0
 8005c16:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005c1e:	e0ec      	b.n	8005dfa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8005c20:	2304      	movs	r3, #4
 8005c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c26:	e0e8      	b.n	8005dfa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005c28:	4b77      	ldr	r3, [pc, #476]	; (8005e08 <SD_disk_ioctl+0x254>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <SD_disk_ioctl+0x86>
 8005c36:	2303      	movs	r3, #3
 8005c38:	e0e1      	b.n	8005dfe <SD_disk_ioctl+0x24a>

		SELECT();
 8005c3a:	f7ff fc19 	bl	8005470 <SELECT>

		switch (ctrl)
 8005c3e:	79bb      	ldrb	r3, [r7, #6]
 8005c40:	2b0d      	cmp	r3, #13
 8005c42:	f200 80cb 	bhi.w	8005ddc <SD_disk_ioctl+0x228>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <SD_disk_ioctl+0x98>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005d47 	.word	0x08005d47
 8005c50:	08005c85 	.word	0x08005c85
 8005c54:	08005d37 	.word	0x08005d37
 8005c58:	08005ddd 	.word	0x08005ddd
 8005c5c:	08005ddd 	.word	0x08005ddd
 8005c60:	08005ddd 	.word	0x08005ddd
 8005c64:	08005ddd 	.word	0x08005ddd
 8005c68:	08005ddd 	.word	0x08005ddd
 8005c6c:	08005ddd 	.word	0x08005ddd
 8005c70:	08005ddd 	.word	0x08005ddd
 8005c74:	08005ddd 	.word	0x08005ddd
 8005c78:	08005d59 	.word	0x08005d59
 8005c7c:	08005d7d 	.word	0x08005d7d
 8005c80:	08005da1 	.word	0x08005da1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8005c84:	2100      	movs	r1, #0
 8005c86:	2049      	movs	r0, #73	; 0x49
 8005c88:	f7ff fd55 	bl	8005736 <SD_SendCmd>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f040 80a8 	bne.w	8005de4 <SD_disk_ioctl+0x230>
 8005c94:	f107 030c 	add.w	r3, r7, #12
 8005c98:	2110      	movs	r1, #16
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fcda 	bl	8005654 <SD_RxDataBlock>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 809e 	beq.w	8005de4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8005ca8:	7b3b      	ldrb	r3, [r7, #12]
 8005caa:	099b      	lsrs	r3, r3, #6
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d10e      	bne.n	8005cd0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8005cb2:	7d7b      	ldrb	r3, [r7, #21]
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	7d3b      	ldrb	r3, [r7, #20]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8005cc6:	8bfb      	ldrh	r3, [r7, #30]
 8005cc8:	029a      	lsls	r2, r3, #10
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e02e      	b.n	8005d2e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005cd0:	7c7b      	ldrb	r3, [r7, #17]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	7dbb      	ldrb	r3, [r7, #22]
 8005cda:	09db      	lsrs	r3, r3, #7
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	7d7b      	ldrb	r3, [r7, #21]
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 0306 	and.w	r3, r3, #6
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	3302      	adds	r3, #2
 8005cf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005cf8:	7d3b      	ldrb	r3, [r7, #20]
 8005cfa:	099b      	lsrs	r3, r3, #6
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	7cfb      	ldrb	r3, [r7, #19]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	7cbb      	ldrb	r3, [r7, #18]
 8005d0e:	029b      	lsls	r3, r3, #10
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	4413      	add	r3, r2
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8005d20:	8bfa      	ldrh	r2, [r7, #30]
 8005d22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d26:	3b09      	subs	r3, #9
 8005d28:	409a      	lsls	r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8005d34:	e056      	b.n	8005de4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d3c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005d44:	e055      	b.n	8005df2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8005d46:	f7ff fc11 	bl	800556c <SD_ReadyWait>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2bff      	cmp	r3, #255	; 0xff
 8005d4e:	d14b      	bne.n	8005de8 <SD_disk_ioctl+0x234>
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005d56:	e047      	b.n	8005de8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8005d58:	2100      	movs	r1, #0
 8005d5a:	2049      	movs	r0, #73	; 0x49
 8005d5c:	f7ff fceb 	bl	8005736 <SD_SendCmd>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d142      	bne.n	8005dec <SD_disk_ioctl+0x238>
 8005d66:	2110      	movs	r1, #16
 8005d68:	6a38      	ldr	r0, [r7, #32]
 8005d6a:	f7ff fc73 	bl	8005654 <SD_RxDataBlock>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d03b      	beq.n	8005dec <SD_disk_ioctl+0x238>
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005d7a:	e037      	b.n	8005dec <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	204a      	movs	r0, #74	; 0x4a
 8005d80:	f7ff fcd9 	bl	8005736 <SD_SendCmd>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d132      	bne.n	8005df0 <SD_disk_ioctl+0x23c>
 8005d8a:	2110      	movs	r1, #16
 8005d8c:	6a38      	ldr	r0, [r7, #32]
 8005d8e:	f7ff fc61 	bl	8005654 <SD_RxDataBlock>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02b      	beq.n	8005df0 <SD_disk_ioctl+0x23c>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005d9e:	e027      	b.n	8005df0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8005da0:	2100      	movs	r1, #0
 8005da2:	207a      	movs	r0, #122	; 0x7a
 8005da4:	f7ff fcc7 	bl	8005736 <SD_SendCmd>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d116      	bne.n	8005ddc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005db4:	e00b      	b.n	8005dce <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8005db6:	6a3c      	ldr	r4, [r7, #32]
 8005db8:	1c63      	adds	r3, r4, #1
 8005dba:	623b      	str	r3, [r7, #32]
 8005dbc:	f7ff fbac 	bl	8005518 <SPI_RxByte>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8005dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dc8:	3301      	adds	r3, #1
 8005dca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005dce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d9ef      	bls.n	8005db6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005de2:	e006      	b.n	8005df2 <SD_disk_ioctl+0x23e>
			break;
 8005de4:	bf00      	nop
 8005de6:	e004      	b.n	8005df2 <SD_disk_ioctl+0x23e>
			break;
 8005de8:	bf00      	nop
 8005dea:	e002      	b.n	8005df2 <SD_disk_ioctl+0x23e>
			break;
 8005dec:	bf00      	nop
 8005dee:	e000      	b.n	8005df2 <SD_disk_ioctl+0x23e>
			break;
 8005df0:	bf00      	nop
		}

		DESELECT();
 8005df2:	f7ff fb4d 	bl	8005490 <DESELECT>
		SPI_RxByte();
 8005df6:	f7ff fb8f 	bl	8005518 <SPI_RxByte>
	}

	return res;
 8005dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	372c      	adds	r7, #44	; 0x2c
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd90      	pop	{r4, r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000020 	.word	0x20000020

08005e0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3301      	adds	r3, #1
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005e1c:	89fb      	ldrh	r3, [r7, #14]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	b21a      	sxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b21b      	sxth	r3, r3
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	b21b      	sxth	r3, r3
 8005e2c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e2e:	89fb      	ldrh	r3, [r7, #14]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3303      	adds	r3, #3
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	3202      	adds	r2, #2
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	3201      	adds	r2, #1
 8005e62:	7812      	ldrb	r2, [r2, #0]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	7812      	ldrb	r2, [r2, #0]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
	return rv;
 8005e74:	68fb      	ldr	r3, [r7, #12]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	887a      	ldrh	r2, [r7, #2]
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	887b      	ldrh	r3, [r7, #2]
 8005e9c:	0a1b      	lsrs	r3, r3, #8
 8005e9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	607a      	str	r2, [r7, #4]
 8005ea6:	887a      	ldrh	r2, [r7, #2]
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	0a1b      	lsrs	r3, r3, #8
 8005ed2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	0a1b      	lsrs	r3, r3, #8
 8005ee4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	0a1b      	lsrs	r3, r3, #8
 8005ef6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00d      	beq.n	8005f46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	1c53      	adds	r3, r2, #1
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	1c59      	adds	r1, r3, #1
 8005f34:	6179      	str	r1, [r7, #20]
 8005f36:	7812      	ldrb	r2, [r2, #0]
 8005f38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	607b      	str	r3, [r7, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f1      	bne.n	8005f2a <mem_cpy+0x1a>
	}
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005f52:	b480      	push	{r7}
 8005f54:	b087      	sub	sp, #28
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	617a      	str	r2, [r7, #20]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f3      	bne.n	8005f62 <mem_set+0x10>
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005f88:	b480      	push	{r7}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	61fa      	str	r2, [r7, #28]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	61ba      	str	r2, [r7, #24]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	1acb      	subs	r3, r1, r3
 8005fb4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <mem_cmp+0x40>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0eb      	beq.n	8005fa0 <mem_cmp+0x18>

	return r;
 8005fc8:	697b      	ldr	r3, [r7, #20]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3724      	adds	r7, #36	; 0x24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005fe0:	e002      	b.n	8005fe8 <chk_chr+0x12>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	607b      	str	r3, [r7, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <chk_chr+0x26>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d1f2      	bne.n	8005fe2 <chk_chr+0xc>
	return *str;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006016:	2300      	movs	r3, #0
 8006018:	60bb      	str	r3, [r7, #8]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e029      	b.n	8006074 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006020:	4a27      	ldr	r2, [pc, #156]	; (80060c0 <chk_lock+0xb4>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	4413      	add	r3, r2
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d01d      	beq.n	800606a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800602e:	4a24      	ldr	r2, [pc, #144]	; (80060c0 <chk_lock+0xb4>)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	4413      	add	r3, r2
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d116      	bne.n	800606e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006040:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <chk_lock+0xb4>)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	4413      	add	r3, r2
 8006048:	3304      	adds	r3, #4
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006050:	429a      	cmp	r2, r3
 8006052:	d10c      	bne.n	800606e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006054:	4a1a      	ldr	r2, [pc, #104]	; (80060c0 <chk_lock+0xb4>)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	4413      	add	r3, r2
 800605c:	3308      	adds	r3, #8
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006064:	429a      	cmp	r2, r3
 8006066:	d102      	bne.n	800606e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006068:	e007      	b.n	800607a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800606a:	2301      	movs	r3, #1
 800606c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d9d2      	bls.n	8006020 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d109      	bne.n	8006094 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d102      	bne.n	800608c <chk_lock+0x80>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b02      	cmp	r3, #2
 800608a:	d101      	bne.n	8006090 <chk_lock+0x84>
 800608c:	2300      	movs	r3, #0
 800608e:	e010      	b.n	80060b2 <chk_lock+0xa6>
 8006090:	2312      	movs	r3, #18
 8006092:	e00e      	b.n	80060b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d108      	bne.n	80060ac <chk_lock+0xa0>
 800609a:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <chk_lock+0xb4>)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	4413      	add	r3, r2
 80060a2:	330c      	adds	r3, #12
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060aa:	d101      	bne.n	80060b0 <chk_lock+0xa4>
 80060ac:	2310      	movs	r3, #16
 80060ae:	e000      	b.n	80060b2 <chk_lock+0xa6>
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	2000260c 	.word	0x2000260c

080060c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80060ca:	2300      	movs	r3, #0
 80060cc:	607b      	str	r3, [r7, #4]
 80060ce:	e002      	b.n	80060d6 <enq_lock+0x12>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3301      	adds	r3, #1
 80060d4:	607b      	str	r3, [r7, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d806      	bhi.n	80060ea <enq_lock+0x26>
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <enq_lock+0x40>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	4413      	add	r3, r2
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f2      	bne.n	80060d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	2000260c 	.word	0x2000260c

08006108 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	e01f      	b.n	8006158 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006118:	4a41      	ldr	r2, [pc, #260]	; (8006220 <inc_lock+0x118>)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	4413      	add	r3, r2
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d113      	bne.n	8006152 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800612a:	4a3d      	ldr	r2, [pc, #244]	; (8006220 <inc_lock+0x118>)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	4413      	add	r3, r2
 8006132:	3304      	adds	r3, #4
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800613a:	429a      	cmp	r2, r3
 800613c:	d109      	bne.n	8006152 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800613e:	4a38      	ldr	r2, [pc, #224]	; (8006220 <inc_lock+0x118>)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	4413      	add	r3, r2
 8006146:	3308      	adds	r3, #8
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800614e:	429a      	cmp	r2, r3
 8006150:	d006      	beq.n	8006160 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d9dc      	bls.n	8006118 <inc_lock+0x10>
 800615e:	e000      	b.n	8006162 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006160:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d132      	bne.n	80061ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e002      	b.n	8006174 <inc_lock+0x6c>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d806      	bhi.n	8006188 <inc_lock+0x80>
 800617a:	4a29      	ldr	r2, [pc, #164]	; (8006220 <inc_lock+0x118>)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	4413      	add	r3, r2
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f2      	bne.n	800616e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d101      	bne.n	8006192 <inc_lock+0x8a>
 800618e:	2300      	movs	r3, #0
 8006190:	e040      	b.n	8006214 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4922      	ldr	r1, [pc, #136]	; (8006220 <inc_lock+0x118>)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	440b      	add	r3, r1
 800619e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	491e      	ldr	r1, [pc, #120]	; (8006220 <inc_lock+0x118>)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	440b      	add	r3, r1
 80061ac:	3304      	adds	r3, #4
 80061ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	695a      	ldr	r2, [r3, #20]
 80061b4:	491a      	ldr	r1, [pc, #104]	; (8006220 <inc_lock+0x118>)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	440b      	add	r3, r1
 80061bc:	3308      	adds	r3, #8
 80061be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80061c0:	4a17      	ldr	r2, [pc, #92]	; (8006220 <inc_lock+0x118>)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	4413      	add	r3, r2
 80061c8:	330c      	adds	r3, #12
 80061ca:	2200      	movs	r2, #0
 80061cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <inc_lock+0xe0>
 80061d4:	4a12      	ldr	r2, [pc, #72]	; (8006220 <inc_lock+0x118>)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	4413      	add	r3, r2
 80061dc:	330c      	adds	r3, #12
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <inc_lock+0xe0>
 80061e4:	2300      	movs	r3, #0
 80061e6:	e015      	b.n	8006214 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d108      	bne.n	8006200 <inc_lock+0xf8>
 80061ee:	4a0c      	ldr	r2, [pc, #48]	; (8006220 <inc_lock+0x118>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	4413      	add	r3, r2
 80061f6:	330c      	adds	r3, #12
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	3301      	adds	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	e001      	b.n	8006204 <inc_lock+0xfc>
 8006200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006204:	4906      	ldr	r1, [pc, #24]	; (8006220 <inc_lock+0x118>)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	440b      	add	r3, r1
 800620c:	330c      	adds	r3, #12
 800620e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	2000260c 	.word	0x2000260c

08006224 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3b01      	subs	r3, #1
 8006230:	607b      	str	r3, [r7, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d825      	bhi.n	8006284 <dec_lock+0x60>
		n = Files[i].ctr;
 8006238:	4a17      	ldr	r2, [pc, #92]	; (8006298 <dec_lock+0x74>)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	4413      	add	r3, r2
 8006240:	330c      	adds	r3, #12
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006246:	89fb      	ldrh	r3, [r7, #14]
 8006248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624c:	d101      	bne.n	8006252 <dec_lock+0x2e>
 800624e:	2300      	movs	r3, #0
 8006250:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006252:	89fb      	ldrh	r3, [r7, #14]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <dec_lock+0x3a>
 8006258:	89fb      	ldrh	r3, [r7, #14]
 800625a:	3b01      	subs	r3, #1
 800625c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800625e:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <dec_lock+0x74>)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	4413      	add	r3, r2
 8006266:	330c      	adds	r3, #12
 8006268:	89fa      	ldrh	r2, [r7, #14]
 800626a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800626c:	89fb      	ldrh	r3, [r7, #14]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d105      	bne.n	800627e <dec_lock+0x5a>
 8006272:	4a09      	ldr	r2, [pc, #36]	; (8006298 <dec_lock+0x74>)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	4413      	add	r3, r2
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	737b      	strb	r3, [r7, #13]
 8006282:	e001      	b.n	8006288 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006284:	2302      	movs	r3, #2
 8006286:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006288:	7b7b      	ldrb	r3, [r7, #13]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	2000260c 	.word	0x2000260c

0800629c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	e010      	b.n	80062cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80062aa:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <clear_lock+0x44>)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	4413      	add	r3, r2
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d105      	bne.n	80062c6 <clear_lock+0x2a>
 80062ba:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <clear_lock+0x44>)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	4413      	add	r3, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d9eb      	bls.n	80062aa <clear_lock+0xe>
	}
}
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	2000260c 	.word	0x2000260c

080062e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	78db      	ldrb	r3, [r3, #3]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d034      	beq.n	8006362 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	7858      	ldrb	r0, [r3, #1]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006308:	2301      	movs	r3, #1
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	f7ff f872 	bl	80053f4 <disk_write>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
 800631a:	e022      	b.n	8006362 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	1ad2      	subs	r2, r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	429a      	cmp	r2, r3
 8006330:	d217      	bcs.n	8006362 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	789b      	ldrb	r3, [r3, #2]
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	e010      	b.n	800635c <sync_window+0x78>
					wsect += fs->fsize;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	7858      	ldrb	r0, [r3, #1]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800634e:	2301      	movs	r3, #1
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	f7ff f84f 	bl	80053f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	3b01      	subs	r3, #1
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d8eb      	bhi.n	800633a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d01b      	beq.n	80063bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff ffad 	bl	80062e4 <sync_window>
 800638a:	4603      	mov	r3, r0
 800638c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d113      	bne.n	80063bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	7858      	ldrb	r0, [r3, #1]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800639e:	2301      	movs	r3, #1
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	f7ff f807 	bl	80053b4 <disk_read>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80063ac:	f04f 33ff 	mov.w	r3, #4294967295
 80063b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff ff87 	bl	80062e4 <sync_window>
 80063d6:	4603      	mov	r3, r0
 80063d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d159      	bne.n	8006494 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d149      	bne.n	800647c <sync_fs+0xb4>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	791b      	ldrb	r3, [r3, #4]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d145      	bne.n	800647c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	899b      	ldrh	r3, [r3, #12]
 80063fa:	461a      	mov	r2, r3
 80063fc:	2100      	movs	r1, #0
 80063fe:	f7ff fda8 	bl	8005f52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3338      	adds	r3, #56	; 0x38
 8006406:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800640a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fd37 	bl	8005e82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3338      	adds	r3, #56	; 0x38
 8006418:	4921      	ldr	r1, [pc, #132]	; (80064a0 <sync_fs+0xd8>)
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff fd4c 	bl	8005eb8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3338      	adds	r3, #56	; 0x38
 8006424:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006428:	491e      	ldr	r1, [pc, #120]	; (80064a4 <sync_fs+0xdc>)
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fd44 	bl	8005eb8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3338      	adds	r3, #56	; 0x38
 8006434:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7ff fd3a 	bl	8005eb8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3338      	adds	r3, #56	; 0x38
 8006448:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f7ff fd30 	bl	8005eb8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	7858      	ldrb	r0, [r3, #1]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006470:	2301      	movs	r3, #1
 8006472:	f7fe ffbf 	bl	80053f4 <disk_write>
			fs->fsi_flag = 0;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2200      	movs	r2, #0
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe ffd5 	bl	8005434 <disk_ioctl>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <sync_fs+0xcc>
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	41615252 	.word	0x41615252
 80064a4:	61417272 	.word	0x61417272

080064a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	3b02      	subs	r3, #2
 80064b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	3b02      	subs	r3, #2
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d301      	bcc.n	80064c8 <clust2sect+0x20>
 80064c4:	2300      	movs	r3, #0
 80064c6:	e008      	b.n	80064da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	895b      	ldrh	r3, [r3, #10]
 80064cc:	461a      	mov	r2, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	fb03 f202 	mul.w	r2, r3, r2
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	4413      	add	r3, r2
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b086      	sub	sp, #24
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d904      	bls.n	8006506 <get_fat+0x20>
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d302      	bcc.n	800650c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006506:	2301      	movs	r3, #1
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	e0bb      	b.n	8006684 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800650c:	f04f 33ff 	mov.w	r3, #4294967295
 8006510:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b03      	cmp	r3, #3
 8006518:	f000 8083 	beq.w	8006622 <get_fat+0x13c>
 800651c:	2b03      	cmp	r3, #3
 800651e:	f300 80a7 	bgt.w	8006670 <get_fat+0x18a>
 8006522:	2b01      	cmp	r3, #1
 8006524:	d002      	beq.n	800652c <get_fat+0x46>
 8006526:	2b02      	cmp	r3, #2
 8006528:	d056      	beq.n	80065d8 <get_fat+0xf2>
 800652a:	e0a1      	b.n	8006670 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	085b      	lsrs	r3, r3, #1
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	899b      	ldrh	r3, [r3, #12]
 8006542:	4619      	mov	r1, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	fbb3 f3f1 	udiv	r3, r3, r1
 800654a:	4413      	add	r3, r2
 800654c:	4619      	mov	r1, r3
 800654e:	6938      	ldr	r0, [r7, #16]
 8006550:	f7ff ff0c 	bl	800636c <move_window>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	f040 808d 	bne.w	8006676 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	60fa      	str	r2, [r7, #12]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	8992      	ldrh	r2, [r2, #12]
 8006566:	fbb3 f1f2 	udiv	r1, r3, r2
 800656a:	fb01 f202 	mul.w	r2, r1, r2
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006578:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	899b      	ldrh	r3, [r3, #12]
 8006582:	4619      	mov	r1, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	fbb3 f3f1 	udiv	r3, r3, r1
 800658a:	4413      	add	r3, r2
 800658c:	4619      	mov	r1, r3
 800658e:	6938      	ldr	r0, [r7, #16]
 8006590:	f7ff feec 	bl	800636c <move_window>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d16f      	bne.n	800667a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	899b      	ldrh	r3, [r3, #12]
 800659e:	461a      	mov	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80065a6:	fb01 f202 	mul.w	r2, r1, r2
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	461a      	mov	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <get_fat+0xe8>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	091b      	lsrs	r3, r3, #4
 80065cc:	e002      	b.n	80065d4 <get_fat+0xee>
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065d4:	617b      	str	r3, [r7, #20]
			break;
 80065d6:	e055      	b.n	8006684 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	899b      	ldrh	r3, [r3, #12]
 80065e0:	085b      	lsrs	r3, r3, #1
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	4619      	mov	r1, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80065ec:	4413      	add	r3, r2
 80065ee:	4619      	mov	r1, r3
 80065f0:	6938      	ldr	r0, [r7, #16]
 80065f2:	f7ff febb 	bl	800636c <move_window>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d140      	bne.n	800667e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	8992      	ldrh	r2, [r2, #12]
 800660a:	fbb3 f0f2 	udiv	r0, r3, r2
 800660e:	fb00 f202 	mul.w	r2, r0, r2
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	440b      	add	r3, r1
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff fbf8 	bl	8005e0c <ld_word>
 800661c:	4603      	mov	r3, r0
 800661e:	617b      	str	r3, [r7, #20]
			break;
 8006620:	e030      	b.n	8006684 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	899b      	ldrh	r3, [r3, #12]
 800662a:	089b      	lsrs	r3, r3, #2
 800662c:	b29b      	uxth	r3, r3
 800662e:	4619      	mov	r1, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	fbb3 f3f1 	udiv	r3, r3, r1
 8006636:	4413      	add	r3, r2
 8006638:	4619      	mov	r1, r3
 800663a:	6938      	ldr	r0, [r7, #16]
 800663c:	f7ff fe96 	bl	800636c <move_window>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d11d      	bne.n	8006682 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	8992      	ldrh	r2, [r2, #12]
 8006654:	fbb3 f0f2 	udiv	r0, r3, r2
 8006658:	fb00 f202 	mul.w	r2, r0, r2
 800665c:	1a9b      	subs	r3, r3, r2
 800665e:	440b      	add	r3, r1
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fbeb 	bl	8005e3c <ld_dword>
 8006666:	4603      	mov	r3, r0
 8006668:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800666c:	617b      	str	r3, [r7, #20]
			break;
 800666e:	e009      	b.n	8006684 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006670:	2301      	movs	r3, #1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	e006      	b.n	8006684 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006676:	bf00      	nop
 8006678:	e004      	b.n	8006684 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800667a:	bf00      	nop
 800667c:	e002      	b.n	8006684 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800667e:	bf00      	nop
 8006680:	e000      	b.n	8006684 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006682:	bf00      	nop
		}
	}

	return val;
 8006684:	697b      	ldr	r3, [r7, #20]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800668e:	b590      	push	{r4, r7, lr}
 8006690:	b089      	sub	sp, #36	; 0x24
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800669a:	2302      	movs	r3, #2
 800669c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	f240 8102 	bls.w	80068aa <put_fat+0x21c>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	f080 80fc 	bcs.w	80068aa <put_fat+0x21c>
		switch (fs->fs_type) {
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	f000 80b6 	beq.w	8006828 <put_fat+0x19a>
 80066bc:	2b03      	cmp	r3, #3
 80066be:	f300 80fd 	bgt.w	80068bc <put_fat+0x22e>
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d003      	beq.n	80066ce <put_fat+0x40>
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	f000 8083 	beq.w	80067d2 <put_fat+0x144>
 80066cc:	e0f6      	b.n	80068bc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	4413      	add	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	899b      	ldrh	r3, [r3, #12]
 80066e4:	4619      	mov	r1, r3
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80066ec:	4413      	add	r3, r2
 80066ee:	4619      	mov	r1, r3
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff fe3b 	bl	800636c <move_window>
 80066f6:	4603      	mov	r3, r0
 80066f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066fa:	7ffb      	ldrb	r3, [r7, #31]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 80d6 	bne.w	80068ae <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	61ba      	str	r2, [r7, #24]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	8992      	ldrh	r2, [r2, #12]
 8006712:	fbb3 f0f2 	udiv	r0, r3, r2
 8006716:	fb00 f202 	mul.w	r2, r0, r2
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	440b      	add	r3, r1
 800671e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00d      	beq.n	8006746 <put_fat+0xb8>
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	b25b      	sxtb	r3, r3
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	b25a      	sxtb	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	b25b      	sxtb	r3, r3
 800673e:	4313      	orrs	r3, r2
 8006740:	b25b      	sxtb	r3, r3
 8006742:	b2db      	uxtb	r3, r3
 8006744:	e001      	b.n	800674a <put_fat+0xbc>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	b2db      	uxtb	r3, r3
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2201      	movs	r2, #1
 8006752:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	899b      	ldrh	r3, [r3, #12]
 800675c:	4619      	mov	r1, r3
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	fbb3 f3f1 	udiv	r3, r3, r1
 8006764:	4413      	add	r3, r2
 8006766:	4619      	mov	r1, r3
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7ff fdff 	bl	800636c <move_window>
 800676e:	4603      	mov	r3, r0
 8006770:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006772:	7ffb      	ldrb	r3, [r7, #31]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f040 809c 	bne.w	80068b2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	899b      	ldrh	r3, [r3, #12]
 8006784:	461a      	mov	r2, r3
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	fbb3 f0f2 	udiv	r0, r3, r2
 800678c:	fb00 f202 	mul.w	r2, r0, r2
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	440b      	add	r3, r1
 8006794:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <put_fat+0x11a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	091b      	lsrs	r3, r3, #4
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	e00e      	b.n	80067c6 <put_fat+0x138>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	b25b      	sxtb	r3, r3
 80067ae:	f023 030f 	bic.w	r3, r3, #15
 80067b2:	b25a      	sxtb	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	4313      	orrs	r3, r2
 80067c2:	b25b      	sxtb	r3, r3
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	70da      	strb	r2, [r3, #3]
			break;
 80067d0:	e074      	b.n	80068bc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	899b      	ldrh	r3, [r3, #12]
 80067da:	085b      	lsrs	r3, r3, #1
 80067dc:	b29b      	uxth	r3, r3
 80067de:	4619      	mov	r1, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067e6:	4413      	add	r3, r2
 80067e8:	4619      	mov	r1, r3
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f7ff fdbe 	bl	800636c <move_window>
 80067f0:	4603      	mov	r3, r0
 80067f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067f4:	7ffb      	ldrb	r3, [r7, #31]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d15d      	bne.n	80068b6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	8992      	ldrh	r2, [r2, #12]
 8006808:	fbb3 f0f2 	udiv	r0, r3, r2
 800680c:	fb00 f202 	mul.w	r2, r0, r2
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	440b      	add	r3, r1
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	b292      	uxth	r2, r2
 8006818:	4611      	mov	r1, r2
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fb31 	bl	8005e82 <st_word>
			fs->wflag = 1;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2201      	movs	r2, #1
 8006824:	70da      	strb	r2, [r3, #3]
			break;
 8006826:	e049      	b.n	80068bc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	899b      	ldrh	r3, [r3, #12]
 8006830:	089b      	lsrs	r3, r3, #2
 8006832:	b29b      	uxth	r3, r3
 8006834:	4619      	mov	r1, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	fbb3 f3f1 	udiv	r3, r3, r1
 800683c:	4413      	add	r3, r2
 800683e:	4619      	mov	r1, r3
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7ff fd93 	bl	800636c <move_window>
 8006846:	4603      	mov	r3, r0
 8006848:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800684a:	7ffb      	ldrb	r3, [r7, #31]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d134      	bne.n	80068ba <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	8992      	ldrh	r2, [r2, #12]
 8006864:	fbb3 f0f2 	udiv	r0, r3, r2
 8006868:	fb00 f202 	mul.w	r2, r0, r2
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	440b      	add	r3, r1
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff fae3 	bl	8005e3c <ld_dword>
 8006876:	4603      	mov	r3, r0
 8006878:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800687c:	4323      	orrs	r3, r4
 800687e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	8992      	ldrh	r2, [r2, #12]
 800688e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006892:	fb00 f202 	mul.w	r2, r0, r2
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	440b      	add	r3, r1
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fb0b 	bl	8005eb8 <st_dword>
			fs->wflag = 1;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	70da      	strb	r2, [r3, #3]
			break;
 80068a8:	e008      	b.n	80068bc <put_fat+0x22e>
		}
	}
 80068aa:	bf00      	nop
 80068ac:	e006      	b.n	80068bc <put_fat+0x22e>
			if (res != FR_OK) break;
 80068ae:	bf00      	nop
 80068b0:	e004      	b.n	80068bc <put_fat+0x22e>
			if (res != FR_OK) break;
 80068b2:	bf00      	nop
 80068b4:	e002      	b.n	80068bc <put_fat+0x22e>
			if (res != FR_OK) break;
 80068b6:	bf00      	nop
 80068b8:	e000      	b.n	80068bc <put_fat+0x22e>
			if (res != FR_OK) break;
 80068ba:	bf00      	nop
	return res;
 80068bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3724      	adds	r7, #36	; 0x24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd90      	pop	{r4, r7, pc}

080068c6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b088      	sub	sp, #32
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d904      	bls.n	80068ec <remove_chain+0x26>
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d301      	bcc.n	80068f0 <remove_chain+0x2a>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e04b      	b.n	8006988 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00c      	beq.n	8006910 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80068f6:	f04f 32ff 	mov.w	r2, #4294967295
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	69b8      	ldr	r0, [r7, #24]
 80068fe:	f7ff fec6 	bl	800668e <put_fat>
 8006902:	4603      	mov	r3, r0
 8006904:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006906:	7ffb      	ldrb	r3, [r7, #31]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <remove_chain+0x4a>
 800690c:	7ffb      	ldrb	r3, [r7, #31]
 800690e:	e03b      	b.n	8006988 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fde7 	bl	80064e6 <get_fat>
 8006918:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d031      	beq.n	8006984 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <remove_chain+0x64>
 8006926:	2302      	movs	r3, #2
 8006928:	e02e      	b.n	8006988 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006930:	d101      	bne.n	8006936 <remove_chain+0x70>
 8006932:	2301      	movs	r3, #1
 8006934:	e028      	b.n	8006988 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006936:	2200      	movs	r2, #0
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	69b8      	ldr	r0, [r7, #24]
 800693c:	f7ff fea7 	bl	800668e <put_fat>
 8006940:	4603      	mov	r3, r0
 8006942:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006944:	7ffb      	ldrb	r3, [r7, #31]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <remove_chain+0x88>
 800694a:	7ffb      	ldrb	r3, [r7, #31]
 800694c:	e01c      	b.n	8006988 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	3b02      	subs	r3, #2
 8006958:	429a      	cmp	r2, r3
 800695a:	d20b      	bcs.n	8006974 <remove_chain+0xae>
			fs->free_clst++;
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	791b      	ldrb	r3, [r3, #4]
 800696a:	f043 0301 	orr.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	429a      	cmp	r2, r3
 8006980:	d3c6      	bcc.n	8006910 <remove_chain+0x4a>
 8006982:	e000      	b.n	8006986 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006984:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10d      	bne.n	80069c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <create_chain+0x2c>
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d31b      	bcc.n	80069f4 <create_chain+0x64>
 80069bc:	2301      	movs	r3, #1
 80069be:	61bb      	str	r3, [r7, #24]
 80069c0:	e018      	b.n	80069f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff fd8e 	bl	80064e6 <get_fat>
 80069ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d801      	bhi.n	80069d6 <create_chain+0x46>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e070      	b.n	8006ab8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d101      	bne.n	80069e2 <create_chain+0x52>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	e06a      	b.n	8006ab8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d201      	bcs.n	80069f0 <create_chain+0x60>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	e063      	b.n	8006ab8 <create_chain+0x128>
		scl = clst;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	3301      	adds	r3, #1
 80069fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d307      	bcc.n	8006a18 <create_chain+0x88>
				ncl = 2;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d901      	bls.n	8006a18 <create_chain+0x88>
 8006a14:	2300      	movs	r3, #0
 8006a16:	e04f      	b.n	8006ab8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006a18:	69f9      	ldr	r1, [r7, #28]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff fd63 	bl	80064e6 <get_fat>
 8006a20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00e      	beq.n	8006a46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d003      	beq.n	8006a36 <create_chain+0xa6>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a34:	d101      	bne.n	8006a3a <create_chain+0xaa>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	e03e      	b.n	8006ab8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d1da      	bne.n	80069f8 <create_chain+0x68>
 8006a42:	2300      	movs	r3, #0
 8006a44:	e038      	b.n	8006ab8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006a46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006a48:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4c:	69f9      	ldr	r1, [r7, #28]
 8006a4e:	6938      	ldr	r0, [r7, #16]
 8006a50:	f7ff fe1d 	bl	800668e <put_fat>
 8006a54:	4603      	mov	r3, r0
 8006a56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d109      	bne.n	8006a72 <create_chain+0xe2>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d006      	beq.n	8006a72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6938      	ldr	r0, [r7, #16]
 8006a6a:	f7ff fe10 	bl	800668e <put_fat>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d116      	bne.n	8006aa6 <create_chain+0x116>
		fs->last_clst = ncl;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	3b02      	subs	r3, #2
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d804      	bhi.n	8006a96 <create_chain+0x106>
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	1e5a      	subs	r2, r3, #1
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	791b      	ldrb	r3, [r3, #4]
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	711a      	strb	r2, [r3, #4]
 8006aa4:	e007      	b.n	8006ab6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d102      	bne.n	8006ab2 <create_chain+0x122>
 8006aac:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab0:	e000      	b.n	8006ab4 <create_chain+0x124>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ab6:	69fb      	ldr	r3, [r7, #28]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	899b      	ldrh	r3, [r3, #12]
 8006adc:	461a      	mov	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	8952      	ldrh	r2, [r2, #10]
 8006ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1d1a      	adds	r2, r3, #4
 8006af2:	613a      	str	r2, [r7, #16]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <clmt_clust+0x42>
 8006afe:	2300      	movs	r3, #0
 8006b00:	e010      	b.n	8006b24 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d307      	bcc.n	8006b1a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	3304      	adds	r3, #4
 8006b16:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b18:	e7e9      	b.n	8006aee <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006b1a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	4413      	add	r3, r2
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b46:	d204      	bcs.n	8006b52 <dir_sdi+0x22>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f003 031f 	and.w	r3, r3, #31
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006b52:	2302      	movs	r3, #2
 8006b54:	e071      	b.n	8006c3a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <dir_sdi+0x46>
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d902      	bls.n	8006b76 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10c      	bne.n	8006b96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	8912      	ldrh	r2, [r2, #8]
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d301      	bcc.n	8006b8c <dir_sdi+0x5c>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e056      	b.n	8006c3a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	61da      	str	r2, [r3, #28]
 8006b94:	e02d      	b.n	8006bf2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	895b      	ldrh	r3, [r3, #10]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	899b      	ldrh	r3, [r3, #12]
 8006ba0:	fb02 f303 	mul.w	r3, r2, r3
 8006ba4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ba6:	e019      	b.n	8006bdc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6979      	ldr	r1, [r7, #20]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff fc9a 	bl	80064e6 <get_fat>
 8006bb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bba:	d101      	bne.n	8006bc0 <dir_sdi+0x90>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e03c      	b.n	8006c3a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d904      	bls.n	8006bd0 <dir_sdi+0xa0>
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d301      	bcc.n	8006bd4 <dir_sdi+0xa4>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e032      	b.n	8006c3a <dir_sdi+0x10a>
			ofs -= csz;
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d2e1      	bcs.n	8006ba8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006be4:	6979      	ldr	r1, [r7, #20]
 8006be6:	6938      	ldr	r0, [r7, #16]
 8006be8:	f7ff fc5e 	bl	80064a8 <clust2sect>
 8006bec:	4602      	mov	r2, r0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <dir_sdi+0xd4>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e01a      	b.n	8006c3a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69da      	ldr	r2, [r3, #28]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	899b      	ldrh	r3, [r3, #12]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c14:	441a      	add	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	899b      	ldrh	r3, [r3, #12]
 8006c24:	461a      	mov	r2, r3
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c2c:	fb00 f202 	mul.w	r2, r0, r2
 8006c30:	1a9b      	subs	r3, r3, r2
 8006c32:	18ca      	adds	r2, r1, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	3320      	adds	r3, #32
 8006c58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <dir_next+0x28>
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c68:	d301      	bcc.n	8006c6e <dir_next+0x2c>
 8006c6a:	2304      	movs	r3, #4
 8006c6c:	e0bb      	b.n	8006de6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	899b      	ldrh	r3, [r3, #12]
 8006c72:	461a      	mov	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c7a:	fb01 f202 	mul.w	r2, r1, r2
 8006c7e:	1a9b      	subs	r3, r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 809d 	bne.w	8006dc0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10b      	bne.n	8006cb0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	8912      	ldrh	r2, [r2, #8]
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	f0c0 808d 	bcc.w	8006dc0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	61da      	str	r2, [r3, #28]
 8006cac:	2304      	movs	r3, #4
 8006cae:	e09a      	b.n	8006de6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	899b      	ldrh	r3, [r3, #12]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	8952      	ldrh	r2, [r2, #10]
 8006cc0:	3a01      	subs	r2, #1
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d17b      	bne.n	8006dc0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f7ff fc08 	bl	80064e6 <get_fat>
 8006cd6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d801      	bhi.n	8006ce2 <dir_next+0xa0>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e081      	b.n	8006de6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce8:	d101      	bne.n	8006cee <dir_next+0xac>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e07b      	b.n	8006de6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d359      	bcc.n	8006dac <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	61da      	str	r2, [r3, #28]
 8006d04:	2304      	movs	r3, #4
 8006d06:	e06e      	b.n	8006de6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f7ff fe3d 	bl	8006990 <create_chain>
 8006d16:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <dir_next+0xe0>
 8006d1e:	2307      	movs	r3, #7
 8006d20:	e061      	b.n	8006de6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <dir_next+0xea>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e05c      	b.n	8006de6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d101      	bne.n	8006d38 <dir_next+0xf6>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e056      	b.n	8006de6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff fad3 	bl	80062e4 <sync_window>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <dir_next+0x106>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e04e      	b.n	8006de6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	899b      	ldrh	r3, [r3, #12]
 8006d52:	461a      	mov	r2, r3
 8006d54:	2100      	movs	r1, #0
 8006d56:	f7ff f8fc 	bl	8005f52 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	6979      	ldr	r1, [r7, #20]
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff fba1 	bl	80064a8 <clust2sect>
 8006d66:	4602      	mov	r2, r0
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	635a      	str	r2, [r3, #52]	; 0x34
 8006d6c:	e012      	b.n	8006d94 <dir_next+0x152>
						fs->wflag = 1;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7ff fab5 	bl	80062e4 <sync_window>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <dir_next+0x142>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e030      	b.n	8006de6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	3301      	adds	r3, #1
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	635a      	str	r2, [r3, #52]	; 0x34
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	895b      	ldrh	r3, [r3, #10]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d3e6      	bcc.n	8006d6e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006db2:	6979      	ldr	r1, [r7, #20]
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff fb77 	bl	80064a8 <clust2sect>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	899b      	ldrh	r3, [r3, #12]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dd8:	fb00 f202 	mul.w	r2, r0, r2
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	18ca      	adds	r2, r1, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b086      	sub	sp, #24
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006dfe:	2100      	movs	r1, #0
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff fe95 	bl	8006b30 <dir_sdi>
 8006e06:	4603      	mov	r3, r0
 8006e08:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d12b      	bne.n	8006e68 <dir_alloc+0x7a>
		n = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7ff faa6 	bl	800636c <move_window>
 8006e20:	4603      	mov	r3, r0
 8006e22:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d11d      	bne.n	8006e66 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2be5      	cmp	r3, #229	; 0xe5
 8006e32:	d004      	beq.n	8006e3e <dir_alloc+0x50>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d107      	bne.n	8006e4e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	3301      	adds	r3, #1
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d102      	bne.n	8006e52 <dir_alloc+0x64>
 8006e4c:	e00c      	b.n	8006e68 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006e52:	2101      	movs	r1, #1
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fef4 	bl	8006c42 <dir_next>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0d7      	beq.n	8006e14 <dir_alloc+0x26>
 8006e64:	e000      	b.n	8006e68 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006e66:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d101      	bne.n	8006e72 <dir_alloc+0x84>
 8006e6e:	2307      	movs	r3, #7
 8006e70:	75fb      	strb	r3, [r7, #23]
	return res;
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	331a      	adds	r3, #26
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe ffbe 	bl	8005e0c <ld_word>
 8006e90:	4603      	mov	r3, r0
 8006e92:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d109      	bne.n	8006eb0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	3314      	adds	r3, #20
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fe ffb3 	bl	8005e0c <ld_word>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	041b      	lsls	r3, r3, #16
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	331a      	adds	r3, #26
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	b292      	uxth	r2, r2
 8006ece:	4611      	mov	r1, r2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe ffd6 	bl	8005e82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d109      	bne.n	8006ef2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f103 0214 	add.w	r2, r3, #20
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	0c1b      	lsrs	r3, r3, #16
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	4619      	mov	r1, r3
 8006eec:	4610      	mov	r0, r2
 8006eee:	f7fe ffc8 	bl	8005e82 <st_word>
	}
}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	331a      	adds	r3, #26
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe ff7e 	bl	8005e0c <ld_word>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <cmp_lfn+0x1e>
 8006f16:	2300      	movs	r3, #0
 8006f18:	e059      	b.n	8006fce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f22:	1e5a      	subs	r2, r3, #1
 8006f24:	4613      	mov	r3, r2
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006f30:	2301      	movs	r3, #1
 8006f32:	81fb      	strh	r3, [r7, #14]
 8006f34:	2300      	movs	r3, #0
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	e033      	b.n	8006fa2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006f3a:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <cmp_lfn+0xdc>)
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	4413      	add	r3, r2
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	4413      	add	r3, r2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe ff5f 	bl	8005e0c <ld_word>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006f52:	89fb      	ldrh	r3, [r7, #14]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01a      	beq.n	8006f8e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2bfe      	cmp	r3, #254	; 0xfe
 8006f5c:	d812      	bhi.n	8006f84 <cmp_lfn+0x88>
 8006f5e:	89bb      	ldrh	r3, [r7, #12]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f001 fe11 	bl	8008b88 <ff_wtoupper>
 8006f66:	4603      	mov	r3, r0
 8006f68:	461c      	mov	r4, r3
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	617a      	str	r2, [r7, #20]
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	4413      	add	r3, r2
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 fe05 	bl	8008b88 <ff_wtoupper>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	429c      	cmp	r4, r3
 8006f82:	d001      	beq.n	8006f88 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006f84:	2300      	movs	r3, #0
 8006f86:	e022      	b.n	8006fce <cmp_lfn+0xd2>
			}
			wc = uc;
 8006f88:	89bb      	ldrh	r3, [r7, #12]
 8006f8a:	81fb      	strh	r3, [r7, #14]
 8006f8c:	e006      	b.n	8006f9c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006f8e:	89bb      	ldrh	r3, [r7, #12]
 8006f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d001      	beq.n	8006f9c <cmp_lfn+0xa0>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e018      	b.n	8006fce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b0c      	cmp	r3, #12
 8006fa6:	d9c8      	bls.n	8006f3a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <cmp_lfn+0xd0>
 8006fb4:	89fb      	ldrh	r3, [r7, #14]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <cmp_lfn+0xd0>
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <cmp_lfn+0xd0>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e000      	b.n	8006fce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006fcc:	2301      	movs	r3, #1
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd90      	pop	{r4, r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	08008e4c 	.word	0x08008e4c

08006fdc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	460b      	mov	r3, r1
 8006fec:	71fb      	strb	r3, [r7, #7]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	330d      	adds	r3, #13
 8006ff6:	79ba      	ldrb	r2, [r7, #6]
 8006ff8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	330b      	adds	r3, #11
 8006ffe:	220f      	movs	r2, #15
 8007000:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	330c      	adds	r3, #12
 8007006:	2200      	movs	r2, #0
 8007008:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	331a      	adds	r3, #26
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe ff36 	bl	8005e82 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	1e5a      	subs	r2, r3, #1
 800701a:	4613      	mov	r3, r2
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	82fb      	strh	r3, [r7, #22]
 800702a:	2300      	movs	r3, #0
 800702c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800702e:	8afb      	ldrh	r3, [r7, #22]
 8007030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007034:	4293      	cmp	r3, r2
 8007036:	d007      	beq.n	8007048 <put_lfn+0x6c>
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	61fa      	str	r2, [r7, #28]
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007048:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <put_lfn+0xcc>)
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	4413      	add	r3, r2
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	4413      	add	r3, r2
 8007056:	8afa      	ldrh	r2, [r7, #22]
 8007058:	4611      	mov	r1, r2
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe ff11 	bl	8005e82 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007060:	8afb      	ldrh	r3, [r7, #22]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <put_lfn+0x90>
 8007066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800706a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	3301      	adds	r3, #1
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	2b0c      	cmp	r3, #12
 8007076:	d9da      	bls.n	800702e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007078:	8afb      	ldrh	r3, [r7, #22]
 800707a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800707e:	4293      	cmp	r3, r2
 8007080:	d006      	beq.n	8007090 <put_lfn+0xb4>
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d103      	bne.n	8007098 <put_lfn+0xbc>
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007096:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	79fa      	ldrb	r2, [r7, #7]
 800709c:	701a      	strb	r2, [r3, #0]
}
 800709e:	bf00      	nop
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	08008e4c 	.word	0x08008e4c

080070ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08c      	sub	sp, #48	; 0x30
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80070ba:	220b      	movs	r2, #11
 80070bc:	68b9      	ldr	r1, [r7, #8]
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7fe ff26 	bl	8005f10 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b05      	cmp	r3, #5
 80070c8:	d929      	bls.n	800711e <gen_numname+0x72>
		sr = seq;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80070ce:	e020      	b.n	8007112 <gen_numname+0x66>
			wc = *lfn++;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	1c9a      	adds	r2, r3, #2
 80070d4:	607a      	str	r2, [r7, #4]
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80070da:	2300      	movs	r3, #0
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80070de:	e015      	b.n	800710c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	005a      	lsls	r2, r3, #1
 80070e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	4413      	add	r3, r2
 80070ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80070ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070f0:	085b      	lsrs	r3, r3, #1
 80070f2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <gen_numname+0x5a>
 80070fe:	69fa      	ldr	r2, [r7, #28]
 8007100:	4b30      	ldr	r3, [pc, #192]	; (80071c4 <gen_numname+0x118>)
 8007102:	4053      	eors	r3, r2
 8007104:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	3301      	adds	r3, #1
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	2b0f      	cmp	r3, #15
 8007110:	d9e6      	bls.n	80070e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1da      	bne.n	80070d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800711e:	2307      	movs	r3, #7
 8007120:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	b2db      	uxtb	r3, r3
 800712c:	3330      	adds	r3, #48	; 0x30
 800712e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007136:	2b39      	cmp	r3, #57	; 0x39
 8007138:	d904      	bls.n	8007144 <gen_numname+0x98>
 800713a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800713e:	3307      	adds	r3, #7
 8007140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	1e5a      	subs	r2, r3, #1
 8007148:	62ba      	str	r2, [r7, #40]	; 0x28
 800714a:	3330      	adds	r3, #48	; 0x30
 800714c:	443b      	add	r3, r7
 800714e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007152:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	091b      	lsrs	r3, r3, #4
 800715a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1df      	bne.n	8007122 <gen_numname+0x76>
	ns[i] = '~';
 8007162:	f107 0214 	add.w	r2, r7, #20
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	4413      	add	r3, r2
 800716a:	227e      	movs	r2, #126	; 0x7e
 800716c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800716e:	2300      	movs	r3, #0
 8007170:	627b      	str	r3, [r7, #36]	; 0x24
 8007172:	e002      	b.n	800717a <gen_numname+0xce>
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	3301      	adds	r3, #1
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
 800717a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	429a      	cmp	r2, r3
 8007180:	d205      	bcs.n	800718e <gen_numname+0xe2>
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	4413      	add	r3, r2
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b20      	cmp	r3, #32
 800718c:	d1f2      	bne.n	8007174 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	2b07      	cmp	r3, #7
 8007192:	d807      	bhi.n	80071a4 <gen_numname+0xf8>
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	62ba      	str	r2, [r7, #40]	; 0x28
 800719a:	3330      	adds	r3, #48	; 0x30
 800719c:	443b      	add	r3, r7
 800719e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80071a2:	e000      	b.n	80071a6 <gen_numname+0xfa>
 80071a4:	2120      	movs	r1, #32
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	627a      	str	r2, [r7, #36]	; 0x24
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	460a      	mov	r2, r1
 80071b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	2b07      	cmp	r3, #7
 80071b8:	d9e9      	bls.n	800718e <gen_numname+0xe2>
}
 80071ba:	bf00      	nop
 80071bc:	bf00      	nop
 80071be:	3730      	adds	r7, #48	; 0x30
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	00011021 	.word	0x00011021

080071c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80071d4:	230b      	movs	r3, #11
 80071d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	0852      	lsrs	r2, r2, #1
 80071de:	01db      	lsls	r3, r3, #7
 80071e0:	4313      	orrs	r3, r2
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	1c59      	adds	r1, r3, #1
 80071e8:	6079      	str	r1, [r7, #4]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	4413      	add	r3, r2
 80071ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1ed      	bne.n	80071d8 <sum_sfn+0x10>
	return sum;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007218:	2100      	movs	r1, #0
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fc88 	bl	8006b30 <dir_sdi>
 8007220:	4603      	mov	r3, r0
 8007222:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <dir_find+0x24>
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	e0a9      	b.n	8007382 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800722e:	23ff      	movs	r3, #255	; 0xff
 8007230:	753b      	strb	r3, [r7, #20]
 8007232:	7d3b      	ldrb	r3, [r7, #20]
 8007234:	757b      	strb	r3, [r7, #21]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f04f 32ff 	mov.w	r2, #4294967295
 800723c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	4619      	mov	r1, r3
 8007244:	6938      	ldr	r0, [r7, #16]
 8007246:	f7ff f891 	bl	800636c <move_window>
 800724a:	4603      	mov	r3, r0
 800724c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f040 8090 	bne.w	8007376 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800725e:	7dbb      	ldrb	r3, [r7, #22]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d102      	bne.n	800726a <dir_find+0x60>
 8007264:	2304      	movs	r3, #4
 8007266:	75fb      	strb	r3, [r7, #23]
 8007268:	e08a      	b.n	8007380 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	330b      	adds	r3, #11
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007276:	73fb      	strb	r3, [r7, #15]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7bfa      	ldrb	r2, [r7, #15]
 800727c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800727e:	7dbb      	ldrb	r3, [r7, #22]
 8007280:	2be5      	cmp	r3, #229	; 0xe5
 8007282:	d007      	beq.n	8007294 <dir_find+0x8a>
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d009      	beq.n	80072a2 <dir_find+0x98>
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	2b0f      	cmp	r3, #15
 8007292:	d006      	beq.n	80072a2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007294:	23ff      	movs	r3, #255	; 0xff
 8007296:	757b      	strb	r3, [r7, #21]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f04f 32ff 	mov.w	r2, #4294967295
 800729e:	631a      	str	r2, [r3, #48]	; 0x30
 80072a0:	e05e      	b.n	8007360 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	2b0f      	cmp	r3, #15
 80072a6:	d136      	bne.n	8007316 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d154      	bne.n	8007360 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80072b6:	7dbb      	ldrb	r3, [r7, #22]
 80072b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00d      	beq.n	80072dc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	7b5b      	ldrb	r3, [r3, #13]
 80072c6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80072c8:	7dbb      	ldrb	r3, [r7, #22]
 80072ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ce:	75bb      	strb	r3, [r7, #22]
 80072d0:	7dbb      	ldrb	r3, [r7, #22]
 80072d2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	695a      	ldr	r2, [r3, #20]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80072dc:	7dba      	ldrb	r2, [r7, #22]
 80072de:	7d7b      	ldrb	r3, [r7, #21]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d115      	bne.n	8007310 <dir_find+0x106>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	330d      	adds	r3, #13
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	7d3a      	ldrb	r2, [r7, #20]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d10e      	bne.n	8007310 <dir_find+0x106>
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f7ff fdfd 	bl	8006efc <cmp_lfn>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <dir_find+0x106>
 8007308:	7d7b      	ldrb	r3, [r7, #21]
 800730a:	3b01      	subs	r3, #1
 800730c:	b2db      	uxtb	r3, r3
 800730e:	e000      	b.n	8007312 <dir_find+0x108>
 8007310:	23ff      	movs	r3, #255	; 0xff
 8007312:	757b      	strb	r3, [r7, #21]
 8007314:	e024      	b.n	8007360 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007316:	7d7b      	ldrb	r3, [r7, #21]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d109      	bne.n	8007330 <dir_find+0x126>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff ff51 	bl	80071c8 <sum_sfn>
 8007326:	4603      	mov	r3, r0
 8007328:	461a      	mov	r2, r3
 800732a:	7d3b      	ldrb	r3, [r7, #20]
 800732c:	4293      	cmp	r3, r2
 800732e:	d024      	beq.n	800737a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <dir_find+0x14a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a18      	ldr	r0, [r3, #32]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3324      	adds	r3, #36	; 0x24
 8007346:	220b      	movs	r2, #11
 8007348:	4619      	mov	r1, r3
 800734a:	f7fe fe1d 	bl	8005f88 <mem_cmp>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d014      	beq.n	800737e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007354:	23ff      	movs	r3, #255	; 0xff
 8007356:	757b      	strb	r3, [r7, #21]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f04f 32ff 	mov.w	r2, #4294967295
 800735e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007360:	2100      	movs	r1, #0
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7ff fc6d 	bl	8006c42 <dir_next>
 8007368:	4603      	mov	r3, r0
 800736a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800736c:	7dfb      	ldrb	r3, [r7, #23]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f43f af65 	beq.w	800723e <dir_find+0x34>
 8007374:	e004      	b.n	8007380 <dir_find+0x176>
		if (res != FR_OK) break;
 8007376:	bf00      	nop
 8007378:	e002      	b.n	8007380 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800737a:	bf00      	nop
 800737c:	e000      	b.n	8007380 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800737e:	bf00      	nop

	return res;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08c      	sub	sp, #48	; 0x30
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80073a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <dir_register+0x20>
 80073a8:	2306      	movs	r3, #6
 80073aa:	e0e0      	b.n	800756e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80073ac:	2300      	movs	r3, #0
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
 80073b0:	e002      	b.n	80073b8 <dir_register+0x2c>
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	3301      	adds	r3, #1
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f4      	bne.n	80073b2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80073ce:	f107 030c 	add.w	r3, r7, #12
 80073d2:	220c      	movs	r2, #12
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe fd9b 	bl	8005f10 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d032      	beq.n	800744a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2240      	movs	r2, #64	; 0x40
 80073e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80073ec:	2301      	movs	r3, #1
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f0:	e016      	b.n	8007420 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	f107 010c 	add.w	r1, r7, #12
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	f7ff fe53 	bl	80070ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff feff 	bl	800720a <dir_find>
 800740c:	4603      	mov	r3, r0
 800740e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	3301      	adds	r3, #1
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	2b63      	cmp	r3, #99	; 0x63
 8007424:	d9e5      	bls.n	80073f2 <dir_register+0x66>
 8007426:	e000      	b.n	800742a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007428:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	2b64      	cmp	r3, #100	; 0x64
 800742e:	d101      	bne.n	8007434 <dir_register+0xa8>
 8007430:	2307      	movs	r3, #7
 8007432:	e09c      	b.n	800756e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007438:	2b04      	cmp	r3, #4
 800743a:	d002      	beq.n	8007442 <dir_register+0xb6>
 800743c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007440:	e095      	b.n	800756e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007442:	7dfa      	ldrb	r2, [r7, #23]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <dir_register+0xd8>
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	330c      	adds	r3, #12
 8007458:	4a47      	ldr	r2, [pc, #284]	; (8007578 <dir_register+0x1ec>)
 800745a:	fba2 2303 	umull	r2, r3, r2, r3
 800745e:	089b      	lsrs	r3, r3, #2
 8007460:	3301      	adds	r3, #1
 8007462:	e000      	b.n	8007466 <dir_register+0xda>
 8007464:	2301      	movs	r3, #1
 8007466:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007468:	6a39      	ldr	r1, [r7, #32]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff fcbf 	bl	8006dee <dir_alloc>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800747a:	2b00      	cmp	r3, #0
 800747c:	d148      	bne.n	8007510 <dir_register+0x184>
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	3b01      	subs	r3, #1
 8007482:	623b      	str	r3, [r7, #32]
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d042      	beq.n	8007510 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695a      	ldr	r2, [r3, #20]
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	015b      	lsls	r3, r3, #5
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff fb4a 	bl	8006b30 <dir_sdi>
 800749c:	4603      	mov	r3, r0
 800749e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80074a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d132      	bne.n	8007510 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3324      	adds	r3, #36	; 0x24
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fe8a 	bl	80071c8 <sum_sfn>
 80074b4:	4603      	mov	r3, r0
 80074b6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	4619      	mov	r1, r3
 80074be:	69f8      	ldr	r0, [r7, #28]
 80074c0:	f7fe ff54 	bl	800636c <move_window>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80074ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d11d      	bne.n	800750e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	6918      	ldr	r0, [r3, #16]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a19      	ldr	r1, [r3, #32]
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	7efb      	ldrb	r3, [r7, #27]
 80074e0:	f7ff fd7c 	bl	8006fdc <put_lfn>
				fs->wflag = 1;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	2201      	movs	r2, #1
 80074e8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80074ea:	2100      	movs	r1, #0
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff fba8 	bl	8006c42 <dir_next>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80074f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d107      	bne.n	8007510 <dir_register+0x184>
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	3b01      	subs	r3, #1
 8007504:	623b      	str	r3, [r7, #32]
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1d5      	bne.n	80074b8 <dir_register+0x12c>
 800750c:	e000      	b.n	8007510 <dir_register+0x184>
				if (res != FR_OK) break;
 800750e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007514:	2b00      	cmp	r3, #0
 8007516:	d128      	bne.n	800756a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	4619      	mov	r1, r3
 800751e:	69f8      	ldr	r0, [r7, #28]
 8007520:	f7fe ff24 	bl	800636c <move_window>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800752a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800752e:	2b00      	cmp	r3, #0
 8007530:	d11b      	bne.n	800756a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	2220      	movs	r2, #32
 8007538:	2100      	movs	r1, #0
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fd09 	bl	8005f52 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a18      	ldr	r0, [r3, #32]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3324      	adds	r3, #36	; 0x24
 8007548:	220b      	movs	r2, #11
 800754a:	4619      	mov	r1, r3
 800754c:	f7fe fce0 	bl	8005f10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	330c      	adds	r3, #12
 800755c:	f002 0218 	and.w	r2, r2, #24
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2201      	movs	r2, #1
 8007568:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800756a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800756e:	4618      	mov	r0, r3
 8007570:	3730      	adds	r7, #48	; 0x30
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	4ec4ec4f 	.word	0x4ec4ec4f

0800757c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08a      	sub	sp, #40	; 0x28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	613b      	str	r3, [r7, #16]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	61ba      	str	r2, [r7, #24]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4413      	add	r3, r2
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80075aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ac:	2b1f      	cmp	r3, #31
 80075ae:	d940      	bls.n	8007632 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80075b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075b2:	2b2f      	cmp	r3, #47	; 0x2f
 80075b4:	d006      	beq.n	80075c4 <create_name+0x48>
 80075b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075b8:	2b5c      	cmp	r3, #92	; 0x5c
 80075ba:	d110      	bne.n	80075de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80075bc:	e002      	b.n	80075c4 <create_name+0x48>
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	3301      	adds	r3, #1
 80075c2:	61bb      	str	r3, [r7, #24]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	4413      	add	r3, r2
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b2f      	cmp	r3, #47	; 0x2f
 80075ce:	d0f6      	beq.n	80075be <create_name+0x42>
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	4413      	add	r3, r2
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b5c      	cmp	r3, #92	; 0x5c
 80075da:	d0f0      	beq.n	80075be <create_name+0x42>
			break;
 80075dc:	e02a      	b.n	8007634 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2bfe      	cmp	r3, #254	; 0xfe
 80075e2:	d901      	bls.n	80075e8 <create_name+0x6c>
 80075e4:	2306      	movs	r3, #6
 80075e6:	e17d      	b.n	80078e4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80075e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80075ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f0:	2101      	movs	r1, #1
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 fa8c 	bl	8008b10 <ff_convert>
 80075f8:	4603      	mov	r3, r0
 80075fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80075fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <create_name+0x8a>
 8007602:	2306      	movs	r3, #6
 8007604:	e16e      	b.n	80078e4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007608:	2b7f      	cmp	r3, #127	; 0x7f
 800760a:	d809      	bhi.n	8007620 <create_name+0xa4>
 800760c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800760e:	4619      	mov	r1, r3
 8007610:	488d      	ldr	r0, [pc, #564]	; (8007848 <create_name+0x2cc>)
 8007612:	f7fe fce0 	bl	8005fd6 <chk_chr>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <create_name+0xa4>
 800761c:	2306      	movs	r3, #6
 800761e:	e161      	b.n	80078e4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	617a      	str	r2, [r7, #20]
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800762e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007630:	e7b4      	b.n	800759c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007632:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	441a      	add	r2, r3
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800763e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007640:	2b1f      	cmp	r3, #31
 8007642:	d801      	bhi.n	8007648 <create_name+0xcc>
 8007644:	2304      	movs	r3, #4
 8007646:	e000      	b.n	800764a <create_name+0xce>
 8007648:	2300      	movs	r3, #0
 800764a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800764e:	e011      	b.n	8007674 <create_name+0xf8>
		w = lfn[di - 1];
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007656:	4413      	add	r3, r2
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007664:	2b20      	cmp	r3, #32
 8007666:	d002      	beq.n	800766e <create_name+0xf2>
 8007668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800766a:	2b2e      	cmp	r3, #46	; 0x2e
 800766c:	d106      	bne.n	800767c <create_name+0x100>
		di--;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	3b01      	subs	r3, #1
 8007672:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1ea      	bne.n	8007650 <create_name+0xd4>
 800767a:	e000      	b.n	800767e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800767c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4413      	add	r3, r2
 8007686:	2200      	movs	r2, #0
 8007688:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <create_name+0x118>
 8007690:	2306      	movs	r3, #6
 8007692:	e127      	b.n	80078e4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3324      	adds	r3, #36	; 0x24
 8007698:	220b      	movs	r2, #11
 800769a:	2120      	movs	r1, #32
 800769c:	4618      	mov	r0, r3
 800769e:	f7fe fc58 	bl	8005f52 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80076a2:	2300      	movs	r3, #0
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	e002      	b.n	80076ae <create_name+0x132>
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	3301      	adds	r3, #1
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	4413      	add	r3, r2
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	d0f5      	beq.n	80076a8 <create_name+0x12c>
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	2b2e      	cmp	r3, #46	; 0x2e
 80076c8:	d0ee      	beq.n	80076a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d009      	beq.n	80076e4 <create_name+0x168>
 80076d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076d4:	f043 0303 	orr.w	r3, r3, #3
 80076d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80076dc:	e002      	b.n	80076e4 <create_name+0x168>
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <create_name+0x182>
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80076f0:	4413      	add	r3, r2
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	2b2e      	cmp	r3, #46	; 0x2e
 80076fc:	d1ef      	bne.n	80076de <create_name+0x162>

	i = b = 0; ni = 8;
 80076fe:	2300      	movs	r3, #0
 8007700:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007704:	2300      	movs	r3, #0
 8007706:	623b      	str	r3, [r7, #32]
 8007708:	2308      	movs	r3, #8
 800770a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	61ba      	str	r2, [r7, #24]
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800771c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 8090 	beq.w	8007844 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007726:	2b20      	cmp	r3, #32
 8007728:	d006      	beq.n	8007738 <create_name+0x1bc>
 800772a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800772c:	2b2e      	cmp	r3, #46	; 0x2e
 800772e:	d10a      	bne.n	8007746 <create_name+0x1ca>
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	429a      	cmp	r2, r3
 8007736:	d006      	beq.n	8007746 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800773c:	f043 0303 	orr.w	r3, r3, #3
 8007740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007744:	e07d      	b.n	8007842 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007746:	6a3a      	ldr	r2, [r7, #32]
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	429a      	cmp	r2, r3
 800774c:	d203      	bcs.n	8007756 <create_name+0x1da>
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	429a      	cmp	r2, r3
 8007754:	d123      	bne.n	800779e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	2b0b      	cmp	r3, #11
 800775a:	d106      	bne.n	800776a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800775c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007760:	f043 0303 	orr.w	r3, r3, #3
 8007764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007768:	e075      	b.n	8007856 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	429a      	cmp	r2, r3
 8007770:	d005      	beq.n	800777e <create_name+0x202>
 8007772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007776:	f043 0303 	orr.w	r3, r3, #3
 800777a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	429a      	cmp	r2, r3
 8007784:	d866      	bhi.n	8007854 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	61bb      	str	r3, [r7, #24]
 800778a:	2308      	movs	r3, #8
 800778c:	623b      	str	r3, [r7, #32]
 800778e:	230b      	movs	r3, #11
 8007790:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007792:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800779c:	e051      	b.n	8007842 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800779e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077a0:	2b7f      	cmp	r3, #127	; 0x7f
 80077a2:	d914      	bls.n	80077ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80077a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 f9b1 	bl	8008b10 <ff_convert>
 80077ae:	4603      	mov	r3, r0
 80077b0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80077b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <create_name+0x246>
 80077b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077ba:	3b80      	subs	r3, #128	; 0x80
 80077bc:	4a23      	ldr	r2, [pc, #140]	; (800784c <create_name+0x2d0>)
 80077be:	5cd3      	ldrb	r3, [r2, r3]
 80077c0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80077c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c6:	f043 0302 	orr.w	r3, r3, #2
 80077ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80077ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d007      	beq.n	80077e4 <create_name+0x268>
 80077d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077d6:	4619      	mov	r1, r3
 80077d8:	481d      	ldr	r0, [pc, #116]	; (8007850 <create_name+0x2d4>)
 80077da:	f7fe fbfc 	bl	8005fd6 <chk_chr>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d008      	beq.n	80077f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80077e4:	235f      	movs	r3, #95	; 0x5f
 80077e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80077e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077ec:	f043 0303 	orr.w	r3, r3, #3
 80077f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077f4:	e01b      	b.n	800782e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80077f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077f8:	2b40      	cmp	r3, #64	; 0x40
 80077fa:	d909      	bls.n	8007810 <create_name+0x294>
 80077fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077fe:	2b5a      	cmp	r3, #90	; 0x5a
 8007800:	d806      	bhi.n	8007810 <create_name+0x294>
					b |= 2;
 8007802:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007806:	f043 0302 	orr.w	r3, r3, #2
 800780a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800780e:	e00e      	b.n	800782e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007812:	2b60      	cmp	r3, #96	; 0x60
 8007814:	d90b      	bls.n	800782e <create_name+0x2b2>
 8007816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007818:	2b7a      	cmp	r3, #122	; 0x7a
 800781a:	d808      	bhi.n	800782e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800781c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007820:	f043 0301 	orr.w	r3, r3, #1
 8007824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800782a:	3b20      	subs	r3, #32
 800782c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	623a      	str	r2, [r7, #32]
 8007834:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007836:	b2d1      	uxtb	r1, r2
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	4413      	add	r3, r2
 800783c:	460a      	mov	r2, r1
 800783e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007842:	e763      	b.n	800770c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007844:	bf00      	nop
 8007846:	e006      	b.n	8007856 <create_name+0x2da>
 8007848:	08008d6c 	.word	0x08008d6c
 800784c:	08008dcc 	.word	0x08008dcc
 8007850:	08008d78 	.word	0x08008d78
			if (si > di) break;			/* No extension */
 8007854:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800785c:	2be5      	cmp	r3, #229	; 0xe5
 800785e:	d103      	bne.n	8007868 <create_name+0x2ec>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2205      	movs	r2, #5
 8007864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	2b08      	cmp	r3, #8
 800786c:	d104      	bne.n	8007878 <create_name+0x2fc>
 800786e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007878:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800787c:	f003 030c 	and.w	r3, r3, #12
 8007880:	2b0c      	cmp	r3, #12
 8007882:	d005      	beq.n	8007890 <create_name+0x314>
 8007884:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	2b03      	cmp	r3, #3
 800788e:	d105      	bne.n	800789c <create_name+0x320>
 8007890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007894:	f043 0302 	orr.w	r3, r3, #2
 8007898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800789c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d117      	bne.n	80078d8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80078a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078ac:	f003 0303 	and.w	r3, r3, #3
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d105      	bne.n	80078c0 <create_name+0x344>
 80078b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078b8:	f043 0310 	orr.w	r3, r3, #16
 80078bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80078c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078c4:	f003 030c 	and.w	r3, r3, #12
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d105      	bne.n	80078d8 <create_name+0x35c>
 80078cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078d0:	f043 0308 	orr.w	r3, r3, #8
 80078d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80078de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80078e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3728      	adds	r7, #40	; 0x28
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007900:	e002      	b.n	8007908 <follow_path+0x1c>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	3301      	adds	r3, #1
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b2f      	cmp	r3, #47	; 0x2f
 800790e:	d0f8      	beq.n	8007902 <follow_path+0x16>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b5c      	cmp	r3, #92	; 0x5c
 8007916:	d0f4      	beq.n	8007902 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	2200      	movs	r2, #0
 800791c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b1f      	cmp	r3, #31
 8007924:	d80a      	bhi.n	800793c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2280      	movs	r2, #128	; 0x80
 800792a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800792e:	2100      	movs	r1, #0
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff f8fd 	bl	8006b30 <dir_sdi>
 8007936:	4603      	mov	r3, r0
 8007938:	75fb      	strb	r3, [r7, #23]
 800793a:	e048      	b.n	80079ce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800793c:	463b      	mov	r3, r7
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff fe1b 	bl	800757c <create_name>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d139      	bne.n	80079c4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff fc5a 	bl	800720a <dir_find>
 8007956:	4603      	mov	r3, r0
 8007958:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007960:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	2b04      	cmp	r3, #4
 800796c:	d12c      	bne.n	80079c8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800796e:	7afb      	ldrb	r3, [r7, #11]
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	2b00      	cmp	r3, #0
 8007976:	d127      	bne.n	80079c8 <follow_path+0xdc>
 8007978:	2305      	movs	r3, #5
 800797a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800797c:	e024      	b.n	80079c8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	d121      	bne.n	80079cc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	799b      	ldrb	r3, [r3, #6]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007994:	2305      	movs	r3, #5
 8007996:	75fb      	strb	r3, [r7, #23]
 8007998:	e019      	b.n	80079ce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	8992      	ldrh	r2, [r2, #12]
 80079a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80079ac:	fb00 f202 	mul.w	r2, r0, r2
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	440b      	add	r3, r1
 80079b4:	4619      	mov	r1, r3
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff fa60 	bl	8006e7c <ld_clust>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80079c2:	e7bb      	b.n	800793c <follow_path+0x50>
			if (res != FR_OK) break;
 80079c4:	bf00      	nop
 80079c6:	e002      	b.n	80079ce <follow_path+0xe2>
				break;
 80079c8:	bf00      	nop
 80079ca:	e000      	b.n	80079ce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80079cc:	bf00      	nop
			}
		}
	}

	return res;
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80079e0:	f04f 33ff 	mov.w	r3, #4294967295
 80079e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d031      	beq.n	8007a52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e002      	b.n	80079fc <get_ldnumber+0x24>
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	3301      	adds	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b1f      	cmp	r3, #31
 8007a02:	d903      	bls.n	8007a0c <get_ldnumber+0x34>
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b3a      	cmp	r3, #58	; 0x3a
 8007a0a:	d1f4      	bne.n	80079f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b3a      	cmp	r3, #58	; 0x3a
 8007a12:	d11c      	bne.n	8007a4e <get_ldnumber+0x76>
			tp = *path;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	60fa      	str	r2, [r7, #12]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	3b30      	subs	r3, #48	; 0x30
 8007a24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2b09      	cmp	r3, #9
 8007a2a:	d80e      	bhi.n	8007a4a <get_ldnumber+0x72>
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d10a      	bne.n	8007a4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d107      	bne.n	8007a4a <get_ldnumber+0x72>
					vol = (int)i;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	3301      	adds	r3, #1
 8007a42:	617b      	str	r3, [r7, #20]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	e002      	b.n	8007a54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007a4e:	2300      	movs	r3, #0
 8007a50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007a52:	693b      	ldr	r3, [r7, #16]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	70da      	strb	r2, [r3, #3]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f04f 32ff 	mov.w	r2, #4294967295
 8007a76:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fe fc76 	bl	800636c <move_window>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <check_fs+0x2a>
 8007a86:	2304      	movs	r3, #4
 8007a88:	e038      	b.n	8007afc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3338      	adds	r3, #56	; 0x38
 8007a8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe f9ba 	bl	8005e0c <ld_word>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d001      	beq.n	8007aa8 <check_fs+0x48>
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e029      	b.n	8007afc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007aae:	2be9      	cmp	r3, #233	; 0xe9
 8007ab0:	d009      	beq.n	8007ac6 <check_fs+0x66>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ab8:	2beb      	cmp	r3, #235	; 0xeb
 8007aba:	d11e      	bne.n	8007afa <check_fs+0x9a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ac2:	2b90      	cmp	r3, #144	; 0x90
 8007ac4:	d119      	bne.n	8007afa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3338      	adds	r3, #56	; 0x38
 8007aca:	3336      	adds	r3, #54	; 0x36
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe f9b5 	bl	8005e3c <ld_dword>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ad8:	4a0a      	ldr	r2, [pc, #40]	; (8007b04 <check_fs+0xa4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d101      	bne.n	8007ae2 <check_fs+0x82>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e00c      	b.n	8007afc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	3338      	adds	r3, #56	; 0x38
 8007ae6:	3352      	adds	r3, #82	; 0x52
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe f9a7 	bl	8005e3c <ld_dword>
 8007aee:	4603      	mov	r3, r0
 8007af0:	4a05      	ldr	r2, [pc, #20]	; (8007b08 <check_fs+0xa8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d101      	bne.n	8007afa <check_fs+0x9a>
 8007af6:	2300      	movs	r3, #0
 8007af8:	e000      	b.n	8007afc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007afa:	2302      	movs	r3, #2
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	00544146 	.word	0x00544146
 8007b08:	33544146 	.word	0x33544146

08007b0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b096      	sub	sp, #88	; 0x58
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7ff ff59 	bl	80079d8 <get_ldnumber>
 8007b26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	da01      	bge.n	8007b32 <find_volume+0x26>
 8007b2e:	230b      	movs	r3, #11
 8007b30:	e265      	b.n	8007ffe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007b32:	4a9f      	ldr	r2, [pc, #636]	; (8007db0 <find_volume+0x2a4>)
 8007b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <find_volume+0x3a>
 8007b42:	230c      	movs	r3, #12
 8007b44:	e25b      	b.n	8007ffe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	f023 0301 	bic.w	r3, r3, #1
 8007b52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01a      	beq.n	8007b92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fd fbe7 	bl	8005334 <disk_status>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10c      	bne.n	8007b92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d007      	beq.n	8007b8e <find_volume+0x82>
 8007b7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b82:	f003 0304 	and.w	r3, r3, #4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007b8a:	230a      	movs	r3, #10
 8007b8c:	e237      	b.n	8007ffe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e235      	b.n	8007ffe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	2200      	movs	r2, #0
 8007b96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fd fbdf 	bl	8005368 <disk_initialize>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007bb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e21e      	b.n	8007ffe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d007      	beq.n	8007bd6 <find_volume+0xca>
 8007bc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007bd2:	230a      	movs	r3, #10
 8007bd4:	e213      	b.n	8007ffe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	7858      	ldrb	r0, [r3, #1]
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	330c      	adds	r3, #12
 8007bde:	461a      	mov	r2, r3
 8007be0:	2102      	movs	r1, #2
 8007be2:	f7fd fc27 	bl	8005434 <disk_ioctl>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <find_volume+0xe4>
 8007bec:	2301      	movs	r3, #1
 8007bee:	e206      	b.n	8007ffe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	899b      	ldrh	r3, [r3, #12]
 8007bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf8:	d80d      	bhi.n	8007c16 <find_volume+0x10a>
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	899b      	ldrh	r3, [r3, #12]
 8007bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c02:	d308      	bcc.n	8007c16 <find_volume+0x10a>
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	899b      	ldrh	r3, [r3, #12]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	899b      	ldrh	r3, [r3, #12]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <find_volume+0x10e>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e1f1      	b.n	8007ffe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c22:	f7ff ff1d 	bl	8007a60 <check_fs>
 8007c26:	4603      	mov	r3, r0
 8007c28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d149      	bne.n	8007cc8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007c34:	2300      	movs	r3, #0
 8007c36:	643b      	str	r3, [r7, #64]	; 0x40
 8007c38:	e01e      	b.n	8007c78 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007c48:	4413      	add	r3, r2
 8007c4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	3304      	adds	r3, #4
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d006      	beq.n	8007c64 <find_volume+0x158>
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	3308      	adds	r3, #8
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe f8ee 	bl	8005e3c <ld_dword>
 8007c60:	4602      	mov	r2, r0
 8007c62:	e000      	b.n	8007c66 <find_volume+0x15a>
 8007c64:	2200      	movs	r2, #0
 8007c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	3358      	adds	r3, #88	; 0x58
 8007c6c:	443b      	add	r3, r7
 8007c6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c74:	3301      	adds	r3, #1
 8007c76:	643b      	str	r3, [r7, #64]	; 0x40
 8007c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d9dd      	bls.n	8007c3a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007c7e:	2300      	movs	r3, #0
 8007c80:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <find_volume+0x182>
 8007c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	3358      	adds	r3, #88	; 0x58
 8007c94:	443b      	add	r3, r7
 8007c96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007c9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d005      	beq.n	8007cae <find_volume+0x1a2>
 8007ca2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ca4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ca6:	f7ff fedb 	bl	8007a60 <check_fs>
 8007caa:	4603      	mov	r3, r0
 8007cac:	e000      	b.n	8007cb0 <find_volume+0x1a4>
 8007cae:	2303      	movs	r3, #3
 8007cb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007cb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d905      	bls.n	8007cc8 <find_volume+0x1bc>
 8007cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8007cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d9e2      	bls.n	8007c8e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007cc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	d101      	bne.n	8007cd4 <find_volume+0x1c8>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e194      	b.n	8007ffe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d901      	bls.n	8007ce0 <find_volume+0x1d4>
 8007cdc:	230d      	movs	r3, #13
 8007cde:	e18e      	b.n	8007ffe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	3338      	adds	r3, #56	; 0x38
 8007ce4:	330b      	adds	r3, #11
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe f890 	bl	8005e0c <ld_word>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	899b      	ldrh	r3, [r3, #12]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d001      	beq.n	8007cfc <find_volume+0x1f0>
 8007cf8:	230d      	movs	r3, #13
 8007cfa:	e180      	b.n	8007ffe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	3338      	adds	r3, #56	; 0x38
 8007d00:	3316      	adds	r3, #22
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe f882 	bl	8005e0c <ld_word>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <find_volume+0x214>
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	3338      	adds	r3, #56	; 0x38
 8007d16:	3324      	adds	r3, #36	; 0x24
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe f88f 	bl	8005e3c <ld_dword>
 8007d1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d24:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	789b      	ldrb	r3, [r3, #2]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d005      	beq.n	8007d44 <find_volume+0x238>
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	789b      	ldrb	r3, [r3, #2]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d001      	beq.n	8007d44 <find_volume+0x238>
 8007d40:	230d      	movs	r3, #13
 8007d42:	e15c      	b.n	8007ffe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	789b      	ldrb	r3, [r3, #2]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
 8007d50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	895b      	ldrh	r3, [r3, #10]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d008      	beq.n	8007d78 <find_volume+0x26c>
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	895b      	ldrh	r3, [r3, #10]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	895b      	ldrh	r3, [r3, #10]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	4013      	ands	r3, r2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <find_volume+0x270>
 8007d78:	230d      	movs	r3, #13
 8007d7a:	e140      	b.n	8007ffe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	3338      	adds	r3, #56	; 0x38
 8007d80:	3311      	adds	r3, #17
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe f842 	bl	8005e0c <ld_word>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	891b      	ldrh	r3, [r3, #8]
 8007d94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d96:	8992      	ldrh	r2, [r2, #12]
 8007d98:	0952      	lsrs	r2, r2, #5
 8007d9a:	b292      	uxth	r2, r2
 8007d9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007da0:	fb01 f202 	mul.w	r2, r1, r2
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <find_volume+0x2a8>
 8007dac:	230d      	movs	r3, #13
 8007dae:	e126      	b.n	8007ffe <find_volume+0x4f2>
 8007db0:	20002604 	.word	0x20002604

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	3338      	adds	r3, #56	; 0x38
 8007db8:	3313      	adds	r3, #19
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe f826 	bl	8005e0c <ld_word>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <find_volume+0x2cc>
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	3338      	adds	r3, #56	; 0x38
 8007dce:	3320      	adds	r3, #32
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe f833 	bl	8005e3c <ld_dword>
 8007dd6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	3338      	adds	r3, #56	; 0x38
 8007ddc:	330e      	adds	r3, #14
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe f814 	bl	8005e0c <ld_word>
 8007de4:	4603      	mov	r3, r0
 8007de6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007de8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <find_volume+0x2e6>
 8007dee:	230d      	movs	r3, #13
 8007df0:	e105      	b.n	8007ffe <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007df2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df6:	4413      	add	r3, r2
 8007df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dfa:	8911      	ldrh	r1, [r2, #8]
 8007dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dfe:	8992      	ldrh	r2, [r2, #12]
 8007e00:	0952      	lsrs	r2, r2, #5
 8007e02:	b292      	uxth	r2, r2
 8007e04:	fbb1 f2f2 	udiv	r2, r1, r2
 8007e08:	b292      	uxth	r2, r2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d201      	bcs.n	8007e1a <find_volume+0x30e>
 8007e16:	230d      	movs	r3, #13
 8007e18:	e0f1      	b.n	8007ffe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e22:	8952      	ldrh	r2, [r2, #10]
 8007e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <find_volume+0x328>
 8007e30:	230d      	movs	r3, #13
 8007e32:	e0e4      	b.n	8007ffe <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007e34:	2303      	movs	r3, #3
 8007e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d802      	bhi.n	8007e4a <find_volume+0x33e>
 8007e44:	2302      	movs	r3, #2
 8007e46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d802      	bhi.n	8007e5a <find_volume+0x34e>
 8007e54:	2301      	movs	r3, #1
 8007e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	1c9a      	adds	r2, r3, #2
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e66:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007e68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6c:	441a      	add	r2, r3
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007e72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	441a      	add	r2, r3
 8007e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d11e      	bne.n	8007ec2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e86:	3338      	adds	r3, #56	; 0x38
 8007e88:	332a      	adds	r3, #42	; 0x2a
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fd ffbe 	bl	8005e0c <ld_word>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <find_volume+0x38e>
 8007e96:	230d      	movs	r3, #13
 8007e98:	e0b1      	b.n	8007ffe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	891b      	ldrh	r3, [r3, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <find_volume+0x39a>
 8007ea2:	230d      	movs	r3, #13
 8007ea4:	e0ab      	b.n	8007ffe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	3338      	adds	r3, #56	; 0x38
 8007eaa:	332c      	adds	r3, #44	; 0x2c
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fd ffc5 	bl	8005e3c <ld_dword>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8007ec0:	e01f      	b.n	8007f02 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	891b      	ldrh	r3, [r3, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <find_volume+0x3c2>
 8007eca:	230d      	movs	r3, #13
 8007ecc:	e097      	b.n	8007ffe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed4:	441a      	add	r2, r3
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007eda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d103      	bne.n	8007eea <find_volume+0x3de>
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	e00a      	b.n	8007f00 <find_volume+0x3f4>
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	69da      	ldr	r2, [r3, #28]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	4413      	add	r3, r2
 8007ef4:	085a      	lsrs	r2, r3, #1
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007f00:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	6a1a      	ldr	r2, [r3, #32]
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	899b      	ldrh	r3, [r3, #12]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f0e:	440b      	add	r3, r1
 8007f10:	3b01      	subs	r3, #1
 8007f12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f14:	8989      	ldrh	r1, [r1, #12]
 8007f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d201      	bcs.n	8007f22 <find_volume+0x416>
 8007f1e:	230d      	movs	r3, #13
 8007f20:	e06d      	b.n	8007ffe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295
 8007f28:	619a      	str	r2, [r3, #24]
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	2280      	movs	r2, #128	; 0x80
 8007f36:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007f38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d149      	bne.n	8007fd4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	3338      	adds	r3, #56	; 0x38
 8007f44:	3330      	adds	r3, #48	; 0x30
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fd ff60 	bl	8005e0c <ld_word>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d140      	bne.n	8007fd4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f54:	3301      	adds	r3, #1
 8007f56:	4619      	mov	r1, r3
 8007f58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f5a:	f7fe fa07 	bl	800636c <move_window>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d137      	bne.n	8007fd4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	2200      	movs	r2, #0
 8007f68:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	3338      	adds	r3, #56	; 0x38
 8007f6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fd ff4a 	bl	8005e0c <ld_word>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d127      	bne.n	8007fd4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	3338      	adds	r3, #56	; 0x38
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fd ff57 	bl	8005e3c <ld_dword>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4a1d      	ldr	r2, [pc, #116]	; (8008008 <find_volume+0x4fc>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d11e      	bne.n	8007fd4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	3338      	adds	r3, #56	; 0x38
 8007f9a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fd ff4c 	bl	8005e3c <ld_dword>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	4a19      	ldr	r2, [pc, #100]	; (800800c <find_volume+0x500>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d113      	bne.n	8007fd4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	3338      	adds	r3, #56	; 0x38
 8007fb0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fd ff41 	bl	8005e3c <ld_dword>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	3338      	adds	r3, #56	; 0x38
 8007fc4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fd ff37 	bl	8005e3c <ld_dword>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007fda:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007fdc:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <find_volume+0x504>)
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <find_volume+0x504>)
 8007fe6:	801a      	strh	r2, [r3, #0]
 8007fe8:	4b09      	ldr	r3, [pc, #36]	; (8008010 <find_volume+0x504>)
 8007fea:	881a      	ldrh	r2, [r3, #0]
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	4a08      	ldr	r2, [pc, #32]	; (8008014 <find_volume+0x508>)
 8007ff4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007ff6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ff8:	f7fe f950 	bl	800629c <clear_lock>
#endif
	return FR_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3758      	adds	r7, #88	; 0x58
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	41615252 	.word	0x41615252
 800800c:	61417272 	.word	0x61417272
 8008010:	20002608 	.word	0x20002608
 8008014:	2000262c 	.word	0x2000262c

08008018 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008022:	2309      	movs	r3, #9
 8008024:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d01c      	beq.n	8008066 <validate+0x4e>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d018      	beq.n	8008066 <validate+0x4e>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d013      	beq.n	8008066 <validate+0x4e>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	889a      	ldrh	r2, [r3, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	88db      	ldrh	r3, [r3, #6]
 8008048:	429a      	cmp	r2, r3
 800804a:	d10c      	bne.n	8008066 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	4618      	mov	r0, r3
 8008054:	f7fd f96e 	bl	8005334 <disk_status>
 8008058:	4603      	mov	r3, r0
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <validate+0x4e>
			res = FR_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <validate+0x5a>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	e000      	b.n	8008074 <validate+0x5c>
 8008072:	2300      	movs	r3, #0
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	6013      	str	r3, [r2, #0]
	return res;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	4613      	mov	r3, r2
 8008090:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008096:	f107 0310 	add.w	r3, r7, #16
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff fc9c 	bl	80079d8 <get_ldnumber>
 80080a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	da01      	bge.n	80080ac <f_mount+0x28>
 80080a8:	230b      	movs	r3, #11
 80080aa:	e02b      	b.n	8008104 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80080ac:	4a17      	ldr	r2, [pc, #92]	; (800810c <f_mount+0x88>)
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80080bc:	69b8      	ldr	r0, [r7, #24]
 80080be:	f7fe f8ed 	bl	800629c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	490d      	ldr	r1, [pc, #52]	; (800810c <f_mount+0x88>)
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <f_mount+0x66>
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d001      	beq.n	80080ee <f_mount+0x6a>
 80080ea:	2300      	movs	r3, #0
 80080ec:	e00a      	b.n	8008104 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80080ee:	f107 010c 	add.w	r1, r7, #12
 80080f2:	f107 0308 	add.w	r3, r7, #8
 80080f6:	2200      	movs	r2, #0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7ff fd07 	bl	8007b0c <find_volume>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008102:	7dfb      	ldrb	r3, [r7, #23]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3720      	adds	r7, #32
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20002604 	.word	0x20002604

08008110 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b09a      	sub	sp, #104	; 0x68
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <f_open+0x18>
 8008124:	2309      	movs	r3, #9
 8008126:	e1bb      	b.n	80084a0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800812e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008130:	79fa      	ldrb	r2, [r7, #7]
 8008132:	f107 0114 	add.w	r1, r7, #20
 8008136:	f107 0308 	add.w	r3, r7, #8
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff fce6 	bl	8007b0c <find_volume>
 8008140:	4603      	mov	r3, r0
 8008142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800814a:	2b00      	cmp	r3, #0
 800814c:	f040 819f 	bne.w	800848e <f_open+0x37e>
		dj.obj.fs = fs;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	f107 0318 	add.w	r3, r7, #24
 800815a:	4611      	mov	r1, r2
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fbc5 	bl	80078ec <follow_path>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008168:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800816c:	2b00      	cmp	r3, #0
 800816e:	d11a      	bne.n	80081a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008170:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008174:	b25b      	sxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	da03      	bge.n	8008182 <f_open+0x72>
				res = FR_INVALID_NAME;
 800817a:	2306      	movs	r3, #6
 800817c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008180:	e011      	b.n	80081a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008182:	79fb      	ldrb	r3, [r7, #7]
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	bf14      	ite	ne
 800818c:	2301      	movne	r3, #1
 800818e:	2300      	moveq	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	461a      	mov	r2, r3
 8008194:	f107 0318 	add.w	r3, r7, #24
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f7fd ff36 	bl	800600c <chk_lock>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80081a6:	79fb      	ldrb	r3, [r7, #7]
 80081a8:	f003 031c 	and.w	r3, r3, #28
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d07f      	beq.n	80082b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80081b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d017      	beq.n	80081e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80081b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d10e      	bne.n	80081de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80081c0:	f7fd ff80 	bl	80060c4 <enq_lock>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d006      	beq.n	80081d8 <f_open+0xc8>
 80081ca:	f107 0318 	add.w	r3, r7, #24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff f8dc 	bl	800738c <dir_register>
 80081d4:	4603      	mov	r3, r0
 80081d6:	e000      	b.n	80081da <f_open+0xca>
 80081d8:	2312      	movs	r3, #18
 80081da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	f043 0308 	orr.w	r3, r3, #8
 80081e4:	71fb      	strb	r3, [r7, #7]
 80081e6:	e010      	b.n	800820a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80081e8:	7fbb      	ldrb	r3, [r7, #30]
 80081ea:	f003 0311 	and.w	r3, r3, #17
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <f_open+0xea>
					res = FR_DENIED;
 80081f2:	2307      	movs	r3, #7
 80081f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80081f8:	e007      	b.n	800820a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80081fa:	79fb      	ldrb	r3, [r7, #7]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <f_open+0xfa>
 8008204:	2308      	movs	r3, #8
 8008206:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800820a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800820e:	2b00      	cmp	r3, #0
 8008210:	d168      	bne.n	80082e4 <f_open+0x1d4>
 8008212:	79fb      	ldrb	r3, [r7, #7]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b00      	cmp	r3, #0
 800821a:	d063      	beq.n	80082e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800821c:	f7fd f82c 	bl	8005278 <get_fattime>
 8008220:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	330e      	adds	r3, #14
 8008226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008228:	4618      	mov	r0, r3
 800822a:	f7fd fe45 	bl	8005eb8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	3316      	adds	r3, #22
 8008232:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008234:	4618      	mov	r0, r3
 8008236:	f7fd fe3f 	bl	8005eb8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	330b      	adds	r3, #11
 800823e:	2220      	movs	r2, #32
 8008240:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008246:	4611      	mov	r1, r2
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe fe17 	bl	8006e7c <ld_clust>
 800824e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008254:	2200      	movs	r2, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fe2f 	bl	8006eba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	331c      	adds	r3, #28
 8008260:	2100      	movs	r1, #0
 8008262:	4618      	mov	r0, r3
 8008264:	f7fd fe28 	bl	8005eb8 <st_dword>
					fs->wflag = 1;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2201      	movs	r2, #1
 800826c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800826e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008270:	2b00      	cmp	r3, #0
 8008272:	d037      	beq.n	80082e4 <f_open+0x1d4>
						dw = fs->winsect;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008278:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800827a:	f107 0318 	add.w	r3, r7, #24
 800827e:	2200      	movs	r2, #0
 8008280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008282:	4618      	mov	r0, r3
 8008284:	f7fe fb1f 	bl	80068c6 <remove_chain>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800828e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008292:	2b00      	cmp	r3, #0
 8008294:	d126      	bne.n	80082e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe f866 	bl	800636c <move_window>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082aa:	3a01      	subs	r2, #1
 80082ac:	615a      	str	r2, [r3, #20]
 80082ae:	e019      	b.n	80082e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80082b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d115      	bne.n	80082e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80082b8:	7fbb      	ldrb	r3, [r7, #30]
 80082ba:	f003 0310 	and.w	r3, r3, #16
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <f_open+0x1ba>
					res = FR_NO_FILE;
 80082c2:	2304      	movs	r3, #4
 80082c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80082c8:	e00c      	b.n	80082e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d007      	beq.n	80082e4 <f_open+0x1d4>
 80082d4:	7fbb      	ldrb	r3, [r7, #30]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <f_open+0x1d4>
						res = FR_DENIED;
 80082de:	2307      	movs	r3, #7
 80082e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80082e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d128      	bne.n	800833e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	bf14      	ite	ne
 8008316:	2301      	movne	r3, #1
 8008318:	2300      	moveq	r3, #0
 800831a:	b2db      	uxtb	r3, r3
 800831c:	461a      	mov	r2, r3
 800831e:	f107 0318 	add.w	r3, r7, #24
 8008322:	4611      	mov	r1, r2
 8008324:	4618      	mov	r0, r3
 8008326:	f7fd feef 	bl	8006108 <inc_lock>
 800832a:	4602      	mov	r2, r0
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <f_open+0x22e>
 8008338:	2302      	movs	r3, #2
 800833a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800833e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008342:	2b00      	cmp	r3, #0
 8008344:	f040 80a3 	bne.w	800848e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800834c:	4611      	mov	r1, r2
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fd94 	bl	8006e7c <ld_clust>
 8008354:	4602      	mov	r2, r0
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	331c      	adds	r3, #28
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd fd6c 	bl	8005e3c <ld_dword>
 8008364:	4602      	mov	r2, r0
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	88da      	ldrh	r2, [r3, #6]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	79fa      	ldrb	r2, [r7, #7]
 8008382:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3330      	adds	r3, #48	; 0x30
 800839a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800839e:	2100      	movs	r1, #0
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fd fdd6 	bl	8005f52 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d06e      	beq.n	800848e <f_open+0x37e>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d06a      	beq.n	800848e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	895b      	ldrh	r3, [r3, #10]
 80083c4:	461a      	mov	r2, r3
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	899b      	ldrh	r3, [r3, #12]
 80083ca:	fb02 f303 	mul.w	r3, r2, r3
 80083ce:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083dc:	e016      	b.n	800840c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe f87f 	bl	80064e6 <get_fat>
 80083e8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80083ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d802      	bhi.n	80083f6 <f_open+0x2e6>
 80083f0:	2302      	movs	r3, #2
 80083f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80083f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d102      	bne.n	8008404 <f_open+0x2f4>
 80083fe:	2301      	movs	r3, #1
 8008400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800840c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008410:	2b00      	cmp	r3, #0
 8008412:	d103      	bne.n	800841c <f_open+0x30c>
 8008414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008418:	429a      	cmp	r2, r3
 800841a:	d8e0      	bhi.n	80083de <f_open+0x2ce>
				}
				fp->clust = clst;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008420:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008422:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008426:	2b00      	cmp	r3, #0
 8008428:	d131      	bne.n	800848e <f_open+0x37e>
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	899b      	ldrh	r3, [r3, #12]
 800842e:	461a      	mov	r2, r3
 8008430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008432:	fbb3 f1f2 	udiv	r1, r3, r2
 8008436:	fb01 f202 	mul.w	r2, r1, r2
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d026      	beq.n	800848e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe f82f 	bl	80064a8 <clust2sect>
 800844a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800844c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d103      	bne.n	800845a <f_open+0x34a>
						res = FR_INT_ERR;
 8008452:	2302      	movs	r3, #2
 8008454:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008458:	e019      	b.n	800848e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	899b      	ldrh	r3, [r3, #12]
 800845e:	461a      	mov	r2, r3
 8008460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008462:	fbb3 f2f2 	udiv	r2, r3, r2
 8008466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008468:	441a      	add	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	7858      	ldrb	r0, [r3, #1]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a1a      	ldr	r2, [r3, #32]
 800847c:	2301      	movs	r3, #1
 800847e:	f7fc ff99 	bl	80053b4 <disk_read>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <f_open+0x37e>
 8008488:	2301      	movs	r3, #1
 800848a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800848e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <f_open+0x38c>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800849c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3768      	adds	r7, #104	; 0x68
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08c      	sub	sp, #48	; 0x30
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f107 0210 	add.w	r2, r7, #16
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7ff fda5 	bl	8008018 <validate>
 80084ce:	4603      	mov	r3, r0
 80084d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80084d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d107      	bne.n	80084ec <f_write+0x44>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	7d5b      	ldrb	r3, [r3, #21]
 80084e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80084e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <f_write+0x4a>
 80084ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084f0:	e16a      	b.n	80087c8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	7d1b      	ldrb	r3, [r3, #20]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <f_write+0x5a>
 80084fe:	2307      	movs	r3, #7
 8008500:	e162      	b.n	80087c8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	441a      	add	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	429a      	cmp	r2, r3
 8008510:	f080 814c 	bcs.w	80087ac <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	43db      	mvns	r3, r3
 800851a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800851c:	e146      	b.n	80087ac <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	8992      	ldrh	r2, [r2, #12]
 8008526:	fbb3 f1f2 	udiv	r1, r3, r2
 800852a:	fb01 f202 	mul.w	r2, r1, r2
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	2b00      	cmp	r3, #0
 8008532:	f040 80f1 	bne.w	8008718 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	8992      	ldrh	r2, [r2, #12]
 800853e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	8952      	ldrh	r2, [r2, #10]
 8008546:	3a01      	subs	r2, #1
 8008548:	4013      	ands	r3, r2
 800854a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d143      	bne.n	80085da <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10c      	bne.n	8008574 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	d11a      	bne.n	800859c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2100      	movs	r1, #0
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fa10 	bl	8006990 <create_chain>
 8008570:	62b8      	str	r0, [r7, #40]	; 0x28
 8008572:	e013      	b.n	800859c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d007      	beq.n	800858c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	4619      	mov	r1, r3
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f7fe fa9c 	bl	8006ac0 <clmt_clust>
 8008588:	62b8      	str	r0, [r7, #40]	; 0x28
 800858a:	e007      	b.n	800859c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	4619      	mov	r1, r3
 8008594:	4610      	mov	r0, r2
 8008596:	f7fe f9fb 	bl	8006990 <create_chain>
 800859a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8109 	beq.w	80087b6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d104      	bne.n	80085b4 <f_write+0x10c>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2202      	movs	r2, #2
 80085ae:	755a      	strb	r2, [r3, #21]
 80085b0:	2302      	movs	r3, #2
 80085b2:	e109      	b.n	80087c8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ba:	d104      	bne.n	80085c6 <f_write+0x11e>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2201      	movs	r2, #1
 80085c0:	755a      	strb	r2, [r3, #21]
 80085c2:	2301      	movs	r3, #1
 80085c4:	e100      	b.n	80087c8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085ca:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <f_write+0x132>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085d8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	7d1b      	ldrb	r3, [r3, #20]
 80085de:	b25b      	sxtb	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	da18      	bge.n	8008616 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	7858      	ldrb	r0, [r3, #1]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6a1a      	ldr	r2, [r3, #32]
 80085f2:	2301      	movs	r3, #1
 80085f4:	f7fc fefe 	bl	80053f4 <disk_write>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d004      	beq.n	8008608 <f_write+0x160>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	755a      	strb	r2, [r3, #21]
 8008604:	2301      	movs	r3, #1
 8008606:	e0df      	b.n	80087c8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	7d1b      	ldrb	r3, [r3, #20]
 800860c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008610:	b2da      	uxtb	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fd ff42 	bl	80064a8 <clust2sect>
 8008624:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d104      	bne.n	8008636 <f_write+0x18e>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2202      	movs	r2, #2
 8008630:	755a      	strb	r2, [r3, #21]
 8008632:	2302      	movs	r3, #2
 8008634:	e0c8      	b.n	80087c8 <f_write+0x320>
			sect += csect;
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	4413      	add	r3, r2
 800863c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	899b      	ldrh	r3, [r3, #12]
 8008642:	461a      	mov	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	fbb3 f3f2 	udiv	r3, r3, r2
 800864a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d043      	beq.n	80086da <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	4413      	add	r3, r2
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	8952      	ldrh	r2, [r2, #10]
 800865c:	4293      	cmp	r3, r2
 800865e:	d905      	bls.n	800866c <f_write+0x1c4>
					cc = fs->csize - csect;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	895b      	ldrh	r3, [r3, #10]
 8008664:	461a      	mov	r2, r3
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	7858      	ldrb	r0, [r3, #1]
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	69f9      	ldr	r1, [r7, #28]
 8008676:	f7fc febd 	bl	80053f4 <disk_write>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <f_write+0x1e2>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	755a      	strb	r2, [r3, #21]
 8008686:	2301      	movs	r3, #1
 8008688:	e09e      	b.n	80087c8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a1a      	ldr	r2, [r3, #32]
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	6a3a      	ldr	r2, [r7, #32]
 8008694:	429a      	cmp	r2, r3
 8008696:	d918      	bls.n	80086ca <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a1a      	ldr	r2, [r3, #32]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	8992      	ldrh	r2, [r2, #12]
 80086aa:	fb02 f303 	mul.w	r3, r2, r3
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	18d1      	adds	r1, r2, r3
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	899b      	ldrh	r3, [r3, #12]
 80086b6:	461a      	mov	r2, r3
 80086b8:	f7fd fc2a 	bl	8005f10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	7d1b      	ldrb	r3, [r3, #20]
 80086c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	899b      	ldrh	r3, [r3, #12]
 80086ce:	461a      	mov	r2, r3
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	fb02 f303 	mul.w	r3, r2, r3
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80086d8:	e04b      	b.n	8008772 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d016      	beq.n	8008712 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	699a      	ldr	r2, [r3, #24]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d210      	bcs.n	8008712 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	7858      	ldrb	r0, [r3, #1]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086fa:	2301      	movs	r3, #1
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	f7fc fe59 	bl	80053b4 <disk_read>
 8008702:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	755a      	strb	r2, [r3, #21]
 800870e:	2301      	movs	r3, #1
 8008710:	e05a      	b.n	80087c8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	899b      	ldrh	r3, [r3, #12]
 800871c:	4618      	mov	r0, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	8992      	ldrh	r2, [r2, #12]
 8008726:	fbb3 f1f2 	udiv	r1, r3, r2
 800872a:	fb01 f202 	mul.w	r2, r1, r2
 800872e:	1a9b      	subs	r3, r3, r2
 8008730:	1ac3      	subs	r3, r0, r3
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	429a      	cmp	r2, r3
 800873a:	d901      	bls.n	8008740 <f_write+0x298>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	8992      	ldrh	r2, [r2, #12]
 800874e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008752:	fb00 f202 	mul.w	r2, r0, r2
 8008756:	1a9b      	subs	r3, r3, r2
 8008758:	440b      	add	r3, r1
 800875a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875c:	69f9      	ldr	r1, [r7, #28]
 800875e:	4618      	mov	r0, r3
 8008760:	f7fd fbd6 	bl	8005f10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	7d1b      	ldrb	r3, [r3, #20]
 8008768:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800876c:	b2da      	uxtb	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	4413      	add	r3, r2
 8008778:	61fb      	str	r3, [r7, #28]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	699a      	ldr	r2, [r3, #24]
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	441a      	add	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	619a      	str	r2, [r3, #24]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	429a      	cmp	r2, r3
 8008790:	bf38      	it	cc
 8008792:	461a      	movcc	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	60da      	str	r2, [r3, #12]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	441a      	add	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f47f aeb5 	bne.w	800851e <f_write+0x76>
 80087b4:	e000      	b.n	80087b8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087b6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	7d1b      	ldrb	r3, [r3, #20]
 80087bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3730      	adds	r7, #48	; 0x30
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f107 0208 	add.w	r2, r7, #8
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff fc19 	bl	8008018 <validate>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d168      	bne.n	80088c2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	7d1b      	ldrb	r3, [r3, #20]
 80087f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d062      	beq.n	80088c2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7d1b      	ldrb	r3, [r3, #20]
 8008800:	b25b      	sxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	da15      	bge.n	8008832 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	7858      	ldrb	r0, [r3, #1]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1a      	ldr	r2, [r3, #32]
 8008814:	2301      	movs	r3, #1
 8008816:	f7fc fded 	bl	80053f4 <disk_write>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <f_sync+0x54>
 8008820:	2301      	movs	r3, #1
 8008822:	e04f      	b.n	80088c4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7d1b      	ldrb	r3, [r3, #20]
 8008828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800882c:	b2da      	uxtb	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008832:	f7fc fd21 	bl	8005278 <get_fattime>
 8008836:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f7fd fd93 	bl	800636c <move_window>
 8008846:	4603      	mov	r3, r0
 8008848:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d138      	bne.n	80088c2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	330b      	adds	r3, #11
 800885a:	781a      	ldrb	r2, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	330b      	adds	r3, #11
 8008860:	f042 0220 	orr.w	r2, r2, #32
 8008864:	b2d2      	uxtb	r2, r2
 8008866:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6818      	ldr	r0, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	461a      	mov	r2, r3
 8008872:	68f9      	ldr	r1, [r7, #12]
 8008874:	f7fe fb21 	bl	8006eba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f103 021c 	add.w	r2, r3, #28
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f7fd fb17 	bl	8005eb8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3316      	adds	r3, #22
 800888e:	6939      	ldr	r1, [r7, #16]
 8008890:	4618      	mov	r0, r3
 8008892:	f7fd fb11 	bl	8005eb8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3312      	adds	r3, #18
 800889a:	2100      	movs	r1, #0
 800889c:	4618      	mov	r0, r3
 800889e:	f7fd faf0 	bl	8005e82 <st_word>
					fs->wflag = 1;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2201      	movs	r2, #1
 80088a6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fd fd8c 	bl	80063c8 <sync_fs>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7d1b      	ldrb	r3, [r3, #20]
 80088b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff ff7b 	bl	80087d0 <f_sync>
 80088da:	4603      	mov	r3, r0
 80088dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d118      	bne.n	8008916 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f107 0208 	add.w	r2, r7, #8
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff fb93 	bl	8008018 <validate>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10c      	bne.n	8008916 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	4618      	mov	r0, r3
 8008902:	f7fd fc8f 	bl	8006224 <dec_lock>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	2b0a      	cmp	r3, #10
 8008930:	d103      	bne.n	800893a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008932:	210d      	movs	r1, #13
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fff3 	bl	8008920 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	db25      	blt.n	8008992 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	60fa      	str	r2, [r7, #12]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	4413      	add	r3, r2
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b3c      	cmp	r3, #60	; 0x3c
 8008958:	dd12      	ble.n	8008980 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f103 010c 	add.w	r1, r3, #12
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	f107 0308 	add.w	r3, r7, #8
 800896a:	f7ff fd9d 	bl	80084a8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	429a      	cmp	r2, r3
 8008974:	d101      	bne.n	800897a <putc_bfd+0x5a>
 8008976:	2300      	movs	r3, #0
 8008978:	e001      	b.n	800897e <putc_bfd+0x5e>
 800897a:	f04f 33ff 	mov.w	r3, #4294967295
 800897e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	609a      	str	r2, [r3, #8]
 8008990:	e000      	b.n	8008994 <putc_bfd+0x74>
	if (i < 0) return;
 8008992:	bf00      	nop
}
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	db16      	blt.n	80089d8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6818      	ldr	r0, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f103 010c 	add.w	r1, r3, #12
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	461a      	mov	r2, r3
 80089ba:	f107 030c 	add.w	r3, r7, #12
 80089be:	f7ff fd73 	bl	80084a8 <f_write>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d107      	bne.n	80089d8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d102      	bne.n	80089d8 <putc_flush+0x3e>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	e001      	b.n	80089dc <putc_flush+0x42>
	return EOF;
 80089d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	605a      	str	r2, [r3, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	609a      	str	r2, [r3, #8]
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b096      	sub	sp, #88	; 0x58
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008a18:	f107 030c 	add.w	r3, r7, #12
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff ffe0 	bl	80089e4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008a24:	e009      	b.n	8008a3a <f_puts+0x2c>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	781a      	ldrb	r2, [r3, #0]
 8008a2e:	f107 030c 	add.w	r3, r7, #12
 8008a32:	4611      	mov	r1, r2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff ff73 	bl	8008920 <putc_bfd>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1f1      	bne.n	8008a26 <f_puts+0x18>
	return putc_flush(&pb);
 8008a42:	f107 030c 	add.w	r3, r7, #12
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff ffa7 	bl	800899a <putc_flush>
 8008a4c:	4603      	mov	r3, r0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3758      	adds	r7, #88	; 0x58
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	4613      	mov	r3, r2
 8008a64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a66:	2301      	movs	r3, #1
 8008a68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a6e:	4b1f      	ldr	r3, [pc, #124]	; (8008aec <FATFS_LinkDriverEx+0x94>)
 8008a70:	7a5b      	ldrb	r3, [r3, #9]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d131      	bne.n	8008adc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a78:	4b1c      	ldr	r3, [pc, #112]	; (8008aec <FATFS_LinkDriverEx+0x94>)
 8008a7a:	7a5b      	ldrb	r3, [r3, #9]
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <FATFS_LinkDriverEx+0x94>)
 8008a82:	2100      	movs	r1, #0
 8008a84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a86:	4b19      	ldr	r3, [pc, #100]	; (8008aec <FATFS_LinkDriverEx+0x94>)
 8008a88:	7a5b      	ldrb	r3, [r3, #9]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	4a17      	ldr	r2, [pc, #92]	; (8008aec <FATFS_LinkDriverEx+0x94>)
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a96:	4b15      	ldr	r3, [pc, #84]	; (8008aec <FATFS_LinkDriverEx+0x94>)
 8008a98:	7a5b      	ldrb	r3, [r3, #9]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4b13      	ldr	r3, [pc, #76]	; (8008aec <FATFS_LinkDriverEx+0x94>)
 8008aa0:	4413      	add	r3, r2
 8008aa2:	79fa      	ldrb	r2, [r7, #7]
 8008aa4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008aa6:	4b11      	ldr	r3, [pc, #68]	; (8008aec <FATFS_LinkDriverEx+0x94>)
 8008aa8:	7a5b      	ldrb	r3, [r3, #9]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	b2d1      	uxtb	r1, r2
 8008ab0:	4a0e      	ldr	r2, [pc, #56]	; (8008aec <FATFS_LinkDriverEx+0x94>)
 8008ab2:	7251      	strb	r1, [r2, #9]
 8008ab4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008ab6:	7dbb      	ldrb	r3, [r7, #22]
 8008ab8:	3330      	adds	r3, #48	; 0x30
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	223a      	movs	r2, #58	; 0x3a
 8008ac6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	3302      	adds	r3, #2
 8008acc:	222f      	movs	r2, #47	; 0x2f
 8008ace:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	3303      	adds	r3, #3
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	371c      	adds	r7, #28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	2000282c 	.word	0x2000282c

08008af0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008afa:	2200      	movs	r2, #0
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff ffaa 	bl	8008a58 <FATFS_LinkDriverEx>
 8008b04:	4603      	mov	r3, r0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	6039      	str	r1, [r7, #0]
 8008b1a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008b1c:	88fb      	ldrh	r3, [r7, #6]
 8008b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b20:	d802      	bhi.n	8008b28 <ff_convert+0x18>
		c = chr;
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	81fb      	strh	r3, [r7, #14]
 8008b26:	e025      	b.n	8008b74 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008b2e:	88fb      	ldrh	r3, [r7, #6]
 8008b30:	2bff      	cmp	r3, #255	; 0xff
 8008b32:	d805      	bhi.n	8008b40 <ff_convert+0x30>
 8008b34:	88fb      	ldrh	r3, [r7, #6]
 8008b36:	3b80      	subs	r3, #128	; 0x80
 8008b38:	4a12      	ldr	r2, [pc, #72]	; (8008b84 <ff_convert+0x74>)
 8008b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b3e:	e000      	b.n	8008b42 <ff_convert+0x32>
 8008b40:	2300      	movs	r3, #0
 8008b42:	81fb      	strh	r3, [r7, #14]
 8008b44:	e016      	b.n	8008b74 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008b46:	2300      	movs	r3, #0
 8008b48:	81fb      	strh	r3, [r7, #14]
 8008b4a:	e009      	b.n	8008b60 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008b4c:	89fb      	ldrh	r3, [r7, #14]
 8008b4e:	4a0d      	ldr	r2, [pc, #52]	; (8008b84 <ff_convert+0x74>)
 8008b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d006      	beq.n	8008b68 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008b5a:	89fb      	ldrh	r3, [r7, #14]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	81fb      	strh	r3, [r7, #14]
 8008b60:	89fb      	ldrh	r3, [r7, #14]
 8008b62:	2b7f      	cmp	r3, #127	; 0x7f
 8008b64:	d9f2      	bls.n	8008b4c <ff_convert+0x3c>
 8008b66:	e000      	b.n	8008b6a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008b68:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008b6a:	89fb      	ldrh	r3, [r7, #14]
 8008b6c:	3380      	adds	r3, #128	; 0x80
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008b74:	89fb      	ldrh	r3, [r7, #14]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	08008e5c 	.word	0x08008e5c

08008b88 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008b92:	88fb      	ldrh	r3, [r7, #6]
 8008b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b98:	d201      	bcs.n	8008b9e <ff_wtoupper+0x16>
 8008b9a:	4b3e      	ldr	r3, [pc, #248]	; (8008c94 <ff_wtoupper+0x10c>)
 8008b9c:	e000      	b.n	8008ba0 <ff_wtoupper+0x18>
 8008b9e:	4b3e      	ldr	r3, [pc, #248]	; (8008c98 <ff_wtoupper+0x110>)
 8008ba0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	1c9a      	adds	r2, r3, #2
 8008ba6:	617a      	str	r2, [r7, #20]
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008bac:	8a7b      	ldrh	r3, [r7, #18]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d068      	beq.n	8008c84 <ff_wtoupper+0xfc>
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	8a7b      	ldrh	r3, [r7, #18]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d364      	bcc.n	8008c84 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	1c9a      	adds	r2, r3, #2
 8008bbe:	617a      	str	r2, [r7, #20]
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	823b      	strh	r3, [r7, #16]
 8008bc4:	8a3b      	ldrh	r3, [r7, #16]
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	81fb      	strh	r3, [r7, #14]
 8008bca:	8a3b      	ldrh	r3, [r7, #16]
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008bd0:	88fa      	ldrh	r2, [r7, #6]
 8008bd2:	8a79      	ldrh	r1, [r7, #18]
 8008bd4:	8a3b      	ldrh	r3, [r7, #16]
 8008bd6:	440b      	add	r3, r1
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	da49      	bge.n	8008c70 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008bdc:	89fb      	ldrh	r3, [r7, #14]
 8008bde:	2b08      	cmp	r3, #8
 8008be0:	d84f      	bhi.n	8008c82 <ff_wtoupper+0xfa>
 8008be2:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <ff_wtoupper+0x60>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c0d 	.word	0x08008c0d
 8008bec:	08008c1f 	.word	0x08008c1f
 8008bf0:	08008c35 	.word	0x08008c35
 8008bf4:	08008c3d 	.word	0x08008c3d
 8008bf8:	08008c45 	.word	0x08008c45
 8008bfc:	08008c4d 	.word	0x08008c4d
 8008c00:	08008c55 	.word	0x08008c55
 8008c04:	08008c5d 	.word	0x08008c5d
 8008c08:	08008c65 	.word	0x08008c65
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008c0c:	88fa      	ldrh	r2, [r7, #6]
 8008c0e:	8a7b      	ldrh	r3, [r7, #18]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	4413      	add	r3, r2
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	80fb      	strh	r3, [r7, #6]
 8008c1c:	e027      	b.n	8008c6e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008c1e:	88fa      	ldrh	r2, [r7, #6]
 8008c20:	8a7b      	ldrh	r3, [r7, #18]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	88fa      	ldrh	r2, [r7, #6]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	80fb      	strh	r3, [r7, #6]
 8008c32:	e01c      	b.n	8008c6e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	3b10      	subs	r3, #16
 8008c38:	80fb      	strh	r3, [r7, #6]
 8008c3a:	e018      	b.n	8008c6e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
 8008c3e:	3b20      	subs	r3, #32
 8008c40:	80fb      	strh	r3, [r7, #6]
 8008c42:	e014      	b.n	8008c6e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	3b30      	subs	r3, #48	; 0x30
 8008c48:	80fb      	strh	r3, [r7, #6]
 8008c4a:	e010      	b.n	8008c6e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	3b1a      	subs	r3, #26
 8008c50:	80fb      	strh	r3, [r7, #6]
 8008c52:	e00c      	b.n	8008c6e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008c54:	88fb      	ldrh	r3, [r7, #6]
 8008c56:	3308      	adds	r3, #8
 8008c58:	80fb      	strh	r3, [r7, #6]
 8008c5a:	e008      	b.n	8008c6e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	3b50      	subs	r3, #80	; 0x50
 8008c60:	80fb      	strh	r3, [r7, #6]
 8008c62:	e004      	b.n	8008c6e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008c6a:	80fb      	strh	r3, [r7, #6]
 8008c6c:	bf00      	nop
			}
			break;
 8008c6e:	e008      	b.n	8008c82 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008c70:	89fb      	ldrh	r3, [r7, #14]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d195      	bne.n	8008ba2 <ff_wtoupper+0x1a>
 8008c76:	8a3b      	ldrh	r3, [r7, #16]
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008c80:	e78f      	b.n	8008ba2 <ff_wtoupper+0x1a>
			break;
 8008c82:	bf00      	nop
	}

	return chr;
 8008c84:	88fb      	ldrh	r3, [r7, #6]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	08008f5c 	.word	0x08008f5c
 8008c98:	08009150 	.word	0x08009150

08008c9c <__libc_init_array>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4d0d      	ldr	r5, [pc, #52]	; (8008cd4 <__libc_init_array+0x38>)
 8008ca0:	4c0d      	ldr	r4, [pc, #52]	; (8008cd8 <__libc_init_array+0x3c>)
 8008ca2:	1b64      	subs	r4, r4, r5
 8008ca4:	10a4      	asrs	r4, r4, #2
 8008ca6:	2600      	movs	r6, #0
 8008ca8:	42a6      	cmp	r6, r4
 8008caa:	d109      	bne.n	8008cc0 <__libc_init_array+0x24>
 8008cac:	4d0b      	ldr	r5, [pc, #44]	; (8008cdc <__libc_init_array+0x40>)
 8008cae:	4c0c      	ldr	r4, [pc, #48]	; (8008ce0 <__libc_init_array+0x44>)
 8008cb0:	f000 f834 	bl	8008d1c <_init>
 8008cb4:	1b64      	subs	r4, r4, r5
 8008cb6:	10a4      	asrs	r4, r4, #2
 8008cb8:	2600      	movs	r6, #0
 8008cba:	42a6      	cmp	r6, r4
 8008cbc:	d105      	bne.n	8008cca <__libc_init_array+0x2e>
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc4:	4798      	blx	r3
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	e7ee      	b.n	8008ca8 <__libc_init_array+0xc>
 8008cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cce:	4798      	blx	r3
 8008cd0:	3601      	adds	r6, #1
 8008cd2:	e7f2      	b.n	8008cba <__libc_init_array+0x1e>
 8008cd4:	08009214 	.word	0x08009214
 8008cd8:	08009214 	.word	0x08009214
 8008cdc:	08009214 	.word	0x08009214
 8008ce0:	08009218 	.word	0x08009218

08008ce4 <memset>:
 8008ce4:	4402      	add	r2, r0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d100      	bne.n	8008cee <memset+0xa>
 8008cec:	4770      	bx	lr
 8008cee:	f803 1b01 	strb.w	r1, [r3], #1
 8008cf2:	e7f9      	b.n	8008ce8 <memset+0x4>

08008cf4 <strncpy>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	3901      	subs	r1, #1
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	b132      	cbz	r2, 8008d0a <strncpy+0x16>
 8008cfc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d00:	f803 4b01 	strb.w	r4, [r3], #1
 8008d04:	3a01      	subs	r2, #1
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	d1f7      	bne.n	8008cfa <strncpy+0x6>
 8008d0a:	441a      	add	r2, r3
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d100      	bne.n	8008d14 <strncpy+0x20>
 8008d12:	bd10      	pop	{r4, pc}
 8008d14:	f803 1b01 	strb.w	r1, [r3], #1
 8008d18:	e7f9      	b.n	8008d0e <strncpy+0x1a>
	...

08008d1c <_init>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr

08008d28 <_fini>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	bf00      	nop
 8008d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2e:	bc08      	pop	{r3}
 8008d30:	469e      	mov	lr, r3
 8008d32:	4770      	bx	lr
